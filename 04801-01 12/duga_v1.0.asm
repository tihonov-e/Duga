;************************************************************************************
  ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;**************** 31-03-2011 ********************************************************		
;             ######################################################################
;            #       ДИВГ.04801-01                                                   #
;           #        Основаня программа работы со стендом ДУГА		              #
;          #  ЖКИ Bolymin BG-12864A-GPLHn$ 21 знак х 8 строк.(Philips KS107/108) #  
;		  #      Контроллер Atmel AT89C51ED2  Кварц. резонатор 22.1184 МГц.     #
;		 #           Один машинный цикл=1/(F/12)=0.5425 мкс    				   #
;       #              **************************************************     #
;      #                        Версия ПО 1.00                               #
	 ;#######################################################################

; ПЕРЕМЕННЫЕ	   
		$INCLUDE (C:\Keil\PROJECTs\DUGA\Peremen.inc)		; Переменные
 
;******************************************************************

 
;==============================================================================================
;============================================================================================== 
 //НАЧАЛО ПРОГРАММЫ//
;============================================================================================== 
 
 
 
;============================================================================================== 
;            ОБЩАЯ ИНИЦИАЛИЗАЦИЯ И НАСТРОЙКА СИСТЕМЫ
;==============================================================================================
 ORG 0000h
	    JMP start ;C АДРЕСА 00H
         
 
        ORG     000BH    ; Прерывание от TF0.
        ljmp    Diskret_Time
                         ;******************************************************
                        ; Обработка процедуры прерывания: перезагрузка счётчика/
                       ; таймера T/C0 с повторным его перезапуском, и увеличения переменных
                      ; TAB4ST,TAB4ML после отрабатывания таймером T/C0
                     ; временного интервала 489,335 мкс. = 0.489335 мс.
                    ;*********************************************************
                   ; Общее время процедуры обработки прерывания 20/(21max) машинных циклов.
                  ;  (10,85 мкс.-20 машинных циклов/11,3925 мкс.-21max машинных циклов.)
                 ; !! Данное время обработки прерывания ДОБАВЛЯЕТСЯ к времени заполнения
                ; !! таймеpа/счетчика T/C0. Таким образом общее время:489,335+10,85=500,185 мкс.
               ;************************************************************************

        ORG     002BH    ; Прерывание от TF2.
        ljmp    Diskret_Time_2
	
	    ORG 0100h  ; ПРОГА НАЧНЕТ РАБОТАТЬ С АРЕСА 100Н (ЧТОБЫ НЕ МАШАТЬСЯ С ВЕКТОРАМИ ПРЕРЫВ)

start:
;Начальная установка
;Все регистры выключены
MOV P0, #0FFH
MOV P2, #0FFH
SETB F_OUT_GND ; ПО-УМОЛЧАНИЮ, ВЫХОДЫ ДУГИ-Ф ОТРУБИМ, КАК ПОТ. ОПАСНЫЕ
MOV  REGIM_A1_2,#11111110B	; ПО УМОЛЧАНИЮ, ДУГА-O
SETB FLAG_SERVICE_MODE	; СБРОС ФЛАГА СЕРВИСНОГО РЕЖИМА
	   
	   MOV TAB2ML,#00H ; ОБНУЛЕНИЕ ПЕРЕМЕННЫЗ TIMER2
	   MOV TAB2ST,#00H

	   MOV TAB4ML,#00H ; ОБНУЛЕНИЕ ПЕРЕМЕННЫЗ TIMER0
	   MOV TAB4ST,#00H
       
	   
	   ;*******************************************************************************
	    lcall   LcdInit
        ; Общая инициализация LCD индикатора 1-8 строки, после подачи питания.
       ;********************************************************************************
	   
	   ;*****************************************************************************
		;*      Инициализация последовательного интерфейса для скорости 9600 бод.    *
		;*****************************************************************************
	   
	   Init_232_Speed_9600:
        MOV     IE,#00H  ; Запретить все прерывания.

		MOV	TCON,#00H

        CLR     TR0        ; Останов внутреннего таймера/счетчика 0.
        CLR     TR1       ; Останов внутреннего таймера/счетчика 1.
		CLR		TR2

;        ANL     TMOD,#0FH
;        ORL     TMOD,#20H
        MOV     TMOD,#21H     ; Режим 1. для Timer0 - 16-ти pазpядный
                             ; счетчик c пpогpаммной пеpезагpузкой.
                            ;---------------------------------------
                           ; Timer1 -в режиме внутреннего таймера в режиме 2:
                          ; - TH0 с перезагрузкой (auto-reload) от TH1.

       MOV		T2CON,#00000001H     ; Режим CAPTURE. для Timer2 - 16-ти pазpядный
                             ; счетчик c пpогpаммной пеpезагpузкой.


	    MOV     SCON,#50H; Режим 1: 8-ми битовый универсальный приемник-
                         ; передатчик (УАПП) - SCON.7=0; SCON.6=1;
                         ; Разрешение приема данных в посл. порт -SCON.4=1.

        MOV     PCON,#00H ; Сбросить бит удвоения скорости передачи:
                          ; SMOD (PCON.7) = 0.

        MOV     TH1,#0FAH ; TH1=250.
        ; Установлена скорость обмена последовательного порта 9600 бод.
       ; Скорость обмена определяется по формуле:
      ; Fобм = (2^SMOD*fcp)/(32*12*[256-(TH1)]) =
     ; Fобм = (2^0 * 22118400)/(32*12*[256-250]) = 9600 бод.


	SETB	TR1	 ; Запуск внутреннего таймера T/C1.
                         ; (для синхронизации последовательного порта).


        ;------------------------------------------------------------------
;$$
        ;ПРИОРИЕТЕТЫ ПРЕРЫВАНИЙ
                       ; ***********************************
		MOV		IPL0,#00100010B
		MOV		IPH0,#00000010B
        			   ; ***********************************
		MOV     IE,#10110010B ; Разрешить прерывания от последовательного порта.
;$$                    ; T/C2 и Т/C0.
;***************************************************************************
	;КОНЕЦ ИНИЦИАЛИЗАЦИИ
;**************************************************************************





;============================================================================================== 
;            ОПРОС КНОПОК ПО ВКЛЮЧЕНИЮ ПИТАНИЯ ДЛЯ ВХОДА В СЕРВИСНЫЕ РЕЖИМЫ СТЕНДА
;============================================================================================== 
;		- "СБРОС" - ТЕСТ ЖКИ
;		- "ТЕСТ" - ТЕСТ КЛАВИАТУРЫ
;		- "ВЫКЛ" - ТЕСТ СВЕТОДИОДОВ
;		- "ВКЛ" - СЕРВИСНЫЙ РЕЖИМ, ПОКАЗЫВАЮЩИЙ ВРЕМЯ СРАБ.ВХОДА
;==============================================================================================

		CLR		OE_BTN1

		JNB		P2.6,GO_TEST_BUTTONS ; ЕСЛИ НАЖАЛИ "TEST" - ТЕСТ BUTTONS
		JNB		P2.7,GO_TEST_MODE_LCD ; ЕСЛИ НАЖАЛИ "СБРОС" - ТЕСТ LCD
		JNB		P2.5,GO_TEST_LED_MODE ; ЕСЛИ НАЖАЛИ "ВЫКЛ" - ТЕСТ СВЕТОДИОДОВ
		JNB		P2.4,GO_TEST_SERVICE_MODE ; ЕСЛИ НАЖАЛИ "ВКЛ" - СУПЕР СЕРВИСНЫЙ РЕЖИМ

		SETB	OE_BTN1
		JMP 	CALLING_MENU_BLOCK	 ; ЕСЛИ 

GO_TEST_BUTTONS:
		SETB	OE_BTN1
		CALL TEST_BUTTONS

GO_TEST_MODE_LCD:
		SETB	OE_BTN1
		CALL TEST_MODE
GO_TEST_LED_MODE:
		SETB	OE_BTN1
		CALL  TEST_LED_MODE

GO_TEST_SERVICE_MODE:
		SETB	OE_BTN1	  ;зыкрываем буфер кнопок
		CALL TEST_SERVICE_MODE

; даже в сервисном режиме будем выбирать тип блока,
; чтобы  уж точно не спалить ДУГА-Т
;=====================================
; ВЫЗОВ ПРОЦЕДУРЫ РАБОТЫ С сервисным МЕНЮ БЛОКА
;======================================
 MOV  REGIM_A1_2,#11111110B
 LCALL Menu_Regim
;======================================
JNB REGIM_DUGA_F,VKL_F_OUT_GND_2 ; ЕСЛИ ВЫБРАН РЕЖИМ ДУГА-Ф, ТО ВКЛ ВЫХОДЫ ДУГА-Ф
		JMP  START_MANUAL_REGIM
VKL_F_OUT_GND_2: CLR F_OUT_GND ; ВКЛЮЧИТЬ ВЫХОДЫ ДУГА-Ф
; В ОСТАЛЬНЫХ РЕЖИМАХ ВЫХОДЫ ДУГА-Ф ВЫКЛЮЧЕНЫ
; ЭТО СДЕЛАНО ДЛЯ ТОГО, ЧТОБЫ ДАЖЕ ЕСЛИ ПЕРЕПУТАЛ И ПОДКЮЧИЛ ДУГА-Т К ДУГА-Ф, ДУГА-Т НЕ СГОРЕЛА
		JMP  START_MANUAL_REGIM
;======================================
;==============================================================================================


CALLING_MENU_BLOCK:	   
;=====================================
; ВЫЗОВ ПРОЦЕДУРЫ РАБОТЫ С МЕНЮ БЛОКА
;======================================
 MOV  REGIM_A1_2,#11111110B
 LCALL Menu_Regim
;======================================
JNB REGIM_DUGA_F,VKL_F_OUT_GND ; ЕСЛИ ВЫБРАН РЕЖИМ ДУГА-Ф, ТО ВКЛ ВЫХОДЫ ДУГА-Ф
JMP START_MANUAL_REGIM
VKL_F_OUT_GND: CLR F_OUT_GND ; ВКЛЮЧИТЬ ВЫХОДЫ ДУГА-Ф
; В ОСТАЛЬНЫХ РЕЖИМАХ ВЫХОДЫ ДУГА-Ф ВЫКЛЮЧЕНЫ
; ЭТО СДЕЛАНО ДЛЯ ТОГО, ЧТОБЫ ДАЖЕ ЕСЛИ ПЕРЕПУТАЛ И ПОДКЮЧИЛ ДУГА-Т К ДУГА-Ф, ДУГА-Т НЕ СГОРЕЛА
;======================================




START_MANUAL_REGIM:
;/////////////////////////////////////////////////////////////////////////////
;РУЧНОЙ РЕЖИМ РАБОТЫ
; РЕАЛИЗУЮ НУЖНЫЙ ИМПУЛЬС ПО КНОПКЕ , ПОКА НА 1-Й КАНАЛ
; НА ЭКРАН ВЫВЕДУ ДЛИТЕЛЬНОСТЬ ИМПУЛЬСА И ОТВЕТ ДУГИ
;/////////////////////////////////////////////////////////////////////////////	
	
		; УСТАНОВКИ ПО УМОЛЧАНИЮ
        ;*************************************************
	    CLR POW_ON1
		
		
		lcall   LcdInit	; ИНИЦ-Я ДИСПЛЕЯ, А ТО ОН ОТРУБАЕТСЯ ИНОГДА
		

	   CLR	INTENS		 ;МАКСИМАЛЬНАЯ ИНТЕНСИВНОСТЬ ПО-УМОЛЧАНИЮ
	   
	   JNB 	FLAG_SERVICE_MODE,GO_DRAW_SERVICE_MODE ; ЕСЛИ МЫ В СЕРВИСНОМ РЕЖИМЕ, РИСУЕМ СВОЙ ТИТУЛ
	   CALL DRAW_MANUAL	 ;РИСОВАНИЕ ЗАГОЛОВКА РУЧНОГО РЕЖИМА
	   JMP MET96
GO_DRAW_SERVICE_MODE:
	   CALL DRAW_SERVICE_MODE	   


MET96:
	   
	   MOV P2,#0FFH		 ; НА ВСЯКИЙ ПОЖАРНЫЙ ЛИНИЮ В СТОК

;/////////////////////////////////////////////////////////////
; СБРОС ПЕРЕМЕННЫХ В СТОК
;/////////////////////////////////////////////////////////////
	   MOV	INPUT,#0FFH
	   MOV LED,#0FFH ; ВСЕ СВЕТОДИОДЫ ПОТУШЕНЫ
	   SETB CONST_IMPULS		
	   MOV TIME_1MS,#00H  ; ОБНУЛЕНИЕ ПЕРМЕННОЙ ДЛЯ ЗАЩИТЫ ВХОДОВ ОТ ЗАВИСАНИЯ
;=====================
; СБРОС ФЛАГОВ КАНАЛА
		SETB FLAG_CH1
		SETB FLAG_CH2
		SETB FLAG_CH3
		SETB FLAG_CH4
		SETB FLAG_CH0
;=====================

; УСТАНОВКА ФЛАГА ОПРОСА НДЗ В ЗАЩИТЕ ОТ ЗАВИСАНИЯ LISTEN_INPUT
; СБРАСЫВАТЬ БУДУ ВРУЧНУЮ В АВТО РЕЖИМЕ
; 1-НЕ ОПРАШИВАТЬ НДЗ
; 0-ОПРАШИВАТЬ
CLR FLAG_OPROS_NDZ
;=====================
SETB FLAG_AUTO ; СБРОС ФЛАГА АВТО РЕЖИМА
SETB TIME_IN_ERROR	   ; СБРОС ФЛАГА ОШИБКИ ВРЕМЕНИ ВХОДА
;/////////////////////////////////////////////////////////////


	   JMP MANUAL_REGIM ; GO



;************РУЧНОЙ РЕЖИМ РАБОТЫ*************
;************************************************************


MANUAL_REGIM:

		//Временный код для вкл-выкл. питания ДУГИ
//***********************************************************

;MET111:
;		SETB POW_ON1
;		MOV R7,#30
;		CALL delay_n_x_01_sek
;		CLR POW_ON1
;		MOV R7,#30
;		CALL delay_n_x_01_sek
;	    JMP MET111
//***********************************************************


		JNB FLAG_SERVICE_MODE,SCAN_BUTTONS ; ЕСЛИ МЫ В СЕРВИСНОМ РЕЖИМЕ, ТО ИДЕМ СРАЗУ
		; НА ОПРОС КНОПОК
;------------------------------------------------------------------
; 					  СКАН ВХОДОВ
; В цикле будем сканить входы
; если вход замкнут, зажжем диод И ЖКИ
;------------------------------------------------------------------
		MOV P2,#0FFH ; ЛИНИЮ В СТОК
		CLR	OE_IN  ; ВКЛЮЧИМ БУФЕР ВХОДОВ
		MOV INPUT,P2   ; СОХРАНИМ ПОРТ В АСС
		SETB OE_IN	; ВЫКЛЮЧИМ БУФЕР 
		MOV P2,#0FFH ; ЛИНИЮ В СТОК

		; ПОБИТНАЯ ПРОВЕРКА
;*****************************
;*****************************
NEXT_NDZ:
		JNB IN_NDZ,GO1_DRAW_NDZ		
		JMP	NEXT_CHECK_1
GO1_DRAW_NDZ:
			CLR LED_IN_NDZ
			CALL BURN_LEDS
			CALL DRAW_IN_NDZ

NEXT_CHECK_1:
		JNB IN_1,GO1_DRAW_IN_1		
		JMP	NEXT_CHECK_2
GO1_DRAW_IN_1: 
			CLR LED_IN_1
			CALL BURN_LEDS
			CALL DRAW_IN_1
;*****************************
NEXT_CHECK_2:
		JNB IN_2,GO1_DRAW_IN_2
		JMP	NEXT_CHECK_3
GO1_DRAW_IN_2: 
			CLR LED_IN_2
			CALL BURN_LEDS
			CALL DRAW_IN_2
;*****************************
NEXT_CHECK_3:
		JNB IN_3,GO1_DRAW_IN_3
		JMP	NEXT_CHECK_4_1
GO1_DRAW_IN_3: 
			CLR LED_IN_3
			CALL BURN_LEDS
			CALL DRAW_IN_3
;*****************************
NEXT_CHECK_4_1:
		JNB IN_4_1,GO1_DRAW_IN_4_1		
		JMP	NEXT_CHECK_4_2
GO1_DRAW_IN_4_1:
			CLR LED_IN_4_1
			CALL BURN_LEDS
			CALL DRAW_IN_4_1
;*****************************
NEXT_CHECK_4_2:
		JNB IN_4_2,GO1_DRAW_IN_4_2		
		JMP	SCAN_BUTTONS
GO1_DRAW_IN_4_2:
			CLR LED_IN_4_2
			CALL BURN_LEDS
			CALL DRAW_IN_4_2

;------------------------------------------------------------------
; 					  СКАН КНОПОК
;------------------------------------------------------------------
SCAN_BUTTONS:
		lcall   TTI_S				   ; СКАН КНОПОК 

		
		jnb     POW_ON,GO_SET_POW_ON
									   ; ЕСЛИ НАЖАТА КЛАВИША, ТО ВКЛ/ВЫКЛ ПИТАНИЕ
		jnb     POW_OFF,GO_SET_POW_OFF

		jnb     S_12MS,GO_SET_12MS	 ; ИМПУЛЬС 12МС
									   
		jnb		S_21MS, GO_SET_21MS  ; ИМПУЛЬС  21МС

		jnb		S_300MS, GO_SET_300MS  ; ИМПУЛЬС  300МС

		jnb		S_1100MS, GO_SET_1100MS  ; ИМПУЛЬС  1100МС
		
		jnb		S_OK, GO_SET_CONST  ; ИМПУЛЬС	CONST

		jnb		RES, GO_CLR_LED  ; СБРОС ДИОДОВ

		JB	REGIM_DUGA_O,CHECK_BUTTON_TEST ;ЕСЛИ ВЫБРАН ЛЮБ.РЕЖИМ, КРОМЕ ДУГА-0
											; КНОПКУ S_SEL НЕ ОПРАШИВАЕМ
		
		jnb		S_SEL, GO_SET_INTENS  ; УСТАНОВКА ИНТЕНСИВНОСТИ

CHECK_BUTTON_TEST:
		JNB CONST_IMPULS,SKAN_GALYA	  ; ЕСЛИ МЫ В РЕЖИМЕ CONST, НЕ ПРОВЕРЯЕМ КНОПКУ ТЕСТ
		JNB FLAG_SERVICE_MODE,SKAN_GALYA  ; ЕСЛИ МЫ В СЕРВ. РЕЖИМЕ, НЕ ПРОВЕРЯЕМ КНОПКУ ТЕСТ
		jnb     TEST,GO_AUTO_REGIM


		JMP SKAN_GALYA ; К ПРОВЕРКЕ ГАЛИ, ЕСЛИ НЕ НАЖАТА НИКАКАЯ КЛАВИША

;------------------------------------------------------------------
GO_SET_POW_ON:
		
		JMP		SET_POW_ON
GO_SET_POW_OFF:
		JMP		SET_POW_OFF

GO_SET_12MS:
		CALL	SET_12MS ; УСТАНОВКА ИМПУЛЬСА	21MS
		JMP SKAN_GALYA
GO_SET_21MS:
		CALL	SET_21MS ; УСТАНОВКА ИМПУЛЬСА	21MS
		JMP SKAN_GALYA


GO_SET_300MS:
		CALL	SET_300MS ; УСТАНОВКА ИМПУЛЬСА	300MS
		JMP SKAN_GALYA


GO_SET_1100MS:
		CALL	SET_1100MS ; УСТАНОВКА ИМПУЛЬСА	1100MS
		JMP SKAN_GALYA


GO_SET_CONST:
		CPL CONST_IMPULS
		JB CONST_IMPULS,GO_CLR_CONST
		CALL	SET_CONST ; УСТАНОВКА ИМПУЛЬСА	CONST
		JMP SKAN_GALYA

GO_CLR_CONST:
		CALL	CLR_CONST ; СБРОС ИМПУЛЬСА	CONST
		JMP SKAN_GALYA

GO_SET_INTENS:
		CALL	SET_INTENS ; УСТАНОВКА ИНТЕНСИВНОСТИ
		JNB CONST_IMPULS,SET_INTENS_CONST ; ЕСЛИ МЫ ПОМЕНЯЛИ ИНТЕНСИВНОСТЬ В РЕЖИМЕ CONST
	    								   ; ТО АВТОМАТИЧЕСКИ УСТАНОВИМ ЕЕ
		JMP SKAN_GALYA
		SET_INTENS_CONST:									 
		CALL	SET_CONST ; УСТАНОВКА ИМПУЛЬСА	CONST
		JMP SKAN_GALYA

GO_CLR_LED:
		SETB TIME_IN_ERROR
		MOV	LED,#0FFH
		MOV	INPUT,#0FFH
		CALL	BURN_LEDS
		CALL DRAW_IN_NOT_ALL
		JMP MANUAL_REGIM

GO_AUTO_REGIM:
		 CALL AUTO_REGIM
		JMP START_MANUAL_REGIM
;------------------------------------------------------------------


;------------------------------------------------------------------
; 					  СКАН ГАЛИ
;------------------------------------------------------------------
SKAN_GALYA:
		
		lcall   TTI_G					

CHECK_CHN_1:
        jnb     CHN_1,GO_G_CHN_1	 ;ЕСЛИ КЛАВИША НАЖАТА, ТО НА МЕТКУ GO_G_CHN_1
        JMP CHECK_CHN_2				 ; ЕСЛИ НЕ НАЖАТА, ТО К ПРОВЕРКЕ СЛЕД. КЛАВИШИ
		GO_G_CHN_1:
		CALL	SET_CHN_1				 ;УСТАНОВИТЬ КАНАЛ х
		JMP MANUAL_REGIM
		;******************************
CHECK_CHN_2:
		jnb     CHN_2,GO_G_CHN_2
        JMP CHECK_CHN_3
		GO_G_CHN_2:
		CALL	SET_CHN_2
		JMP MANUAL_REGIM
        ;******************************
CHECK_CHN_3: 
		jnb     CHN_3,GO_G_CHN_3
        JMP CHECK_CHN_4
		GO_G_CHN_3:
		CALL	SET_CHN_3
		JMP MANUAL_REGIM
		;******************************
CHECK_CHN_4:
		jnb     CHN_4,GO_G_CHN_4
        JMP CHECK_CHN_0
		GO_G_CHN_4:
		CALL	SET_CHN_4
		JMP MANUAL_REGIM
		;******************************
CHECK_CHN_0:
		jnb     CHN_0,GO_G_CHN_0
        JMP MANUAL_REGIM	 		; К ПРОВЕРКЕ КНОПОК, ЕСЛИ НЕ НАЖАТА НИКАКАЯ КЛАВИША
		GO_G_CHN_0:
		CALL	SET_CHN_0
		JMP MANUAL_REGIM
		;****************************** 
;------------------------------------------------------------------

;------------------------------------------------------------------
; 					  ОТРАБОТКА КНОПОК
;------------------------------------------------------------------
SET_POW_ON:				  ;ВКЛЮЧИТЬ ПИТАНИЕ ДУГИ
		CLR POW_ON1
; ЕСЛИ МЫ В СЕРВИСНОМ РЕЖИМЕ, ТО НИХЕРА НЕ РИСУЕМ
; ВКЛ ИЛИ ВЫКЛ	    
		JNB FLAG_SERVICE_MODE,EXIT_SET_POW_ON 
		CALL DRAW_ON
EXIT_SET_POW_ON:		
		JMP MANUAL_REGIM
;------------------------------------------------------------------
SET_POW_OFF:				;ВЫКЛЮЧИТЬ ПИТАНИЕ ДУГИ
		SETB POW_ON1
; ЕСЛИ МЫ В СЕРВИСНОМ РЕЖИМЕ, ТО НИХЕРА НЕ РИСУЕМ
; ВКЛ ИЛИ ВЫКЛ	    
		JNB FLAG_SERVICE_MODE,EXIT_SET_POW_OFF 
		CALL DRAW_OFF
EXIT_SET_POW_OFF:	 
		JMP MANUAL_REGIM





;------------------------------------------------------------------
SET_12MS:	   			;ИМПУЛЬС 12MS

		
		CLR	S_12MS
		SETB S_21MS
		SETB S_300MS
		SETB S_1100MS

		;CALL	DRAW_12MS
		JNB FLAG_AUTO,SELECT_CHN_12MS ; ЕСЛИ МЫ В АВТО РЕЖИМЕ ТО НЕ РИСУЕМ *
		
		MOV R7,#2
		call delay_n_x_01_sek ; ЗАДЕРЖКА 200МС

		CALL	DRAW_STAR	 ;РИСУЕМ ЗВЕЗДОЧКУ ПОСЛЕ НАДПИСИ 12MS
SELECT_CHN_12MS:	
		CALL SELECT_CHN		;ВЫБОР КАНАЛА+ИНТЕНСИВНОСТЬ

;=========================================
;===============Задержка==================
;=========================================
; == Загрузка таймера T/C0 начальным кодом для формирования интервала 500 мкс.=
;=============================================================================
        lcall   load_tc0       ; Останов и перезагрузка внутpеннего   ;*
                              ; таймеpа/счетчика 0. Сброс флага TF0. ;*
        ;***********************************************************;*
        mov     TAB4ST,#0
        mov     TAB4ML,#0; "Очистка" накопительных переменных временного параметра
        ;---------------; инкрементируемых на +1 после обработки процедуры прерывания
                       ; Diskret_Time по переполнению флага tf0 внутpеннего таймеpа/счетчика 0.
        
		SETB CE_CHN	 ; ВЗВЕДЕМ ЗАТВОР ТРИГГЕРА (ЧТО НА ВХОДЕ, ТО И НА ВЫХОДЕ)
		CLR OE_CHN	; СНИМЕМ 3 СОСТОЯНИЕ РЕГИСТРА D14
		
		setb    tr0   ; Запуск внутpеннего таймеpа/счетчика 0. ОТСЧЕТ ПО 1МС ПОШЕЛ!
        ;====================================================
                         ; По переполнению таймеpа/счетчика 0 -
                        ; - обработка процедуры прерывания: перезагрузка счётчика/
                       ; таймера T/C0 с повторным его перезапуском, и увеличения переменных
                      ; TAB4ST,TAB4ML после отрабатывания таймером T/C0
                     ; временного интервала 489,335 мкс. = 0.489335 мс.
                    ;*********************************************************
                    ;*********************************************************
                   ; Общее время процедуры обработки прерывания 20/(21max) машинных циклов.
                  ;  (10,85 мкс.-20 машинных циклов/11,3925 мкс.-21max машинных циклов.)
                 ; !! Данное время обработки прерывания ДОБАВЛЯЕТСЯ к времени заполнения
                ; !! таймеpа/счетчика T/C0. Таким образом общее время:489,335+10,85=500,185 мкс.
               ;************************************************************************
		CLR CE_CHN	 ; ЗАЩЕЛКНУЛИ ЗАТВОР ТРИГГЕРА
;=========================================

		SETB	FLAG_OPROS_NDZ ; НЕ ОПРАШИВАЕМ НДЗ, ЕСЛИ ВХОДЫ НЕ СРАБ.	
		CALL	CHECK_INP  ;ПРОВЕРКА ВХОДОВ СТЕНДА
;------------------------------------------------------------------
		RET



;------------------------------------------------------------------
				   ;ИМПУЛЬС 21MS
SET_21MS:
		
		SETB S_12MS
		CLR S_21MS
		SETB S_300MS
		SETB S_1100MS

		;CALL	DRAW_21MS
		JNB FLAG_AUTO,SELECT_CHN_21MS ; ЕСЛИ МЫ В АВТО РЕЖИМЕ ТО НЕ РИСУЕМ *
		
		MOV R7,#2
		call delay_n_x_01_sek ; ЗАДЕРЖКА 300МС

		CALL	DRAW_STAR	 ;РИСУЕМ ЗВЕЗДОЧКУ ПОСЛЕ НАДПИСИ 12MS

SELECT_CHN_21MS:
		CALL SELECT_CHN		;ВЫБОР КАНАЛА+ИНТЕНСИВНОСТЬ

;=========================================
;===============Задержка==================
;=========================================
; == Загрузка таймера T/C0 начальным кодом для формирования интервала 500 мкс.=
;=============================================================================
        lcall   load_tc0       ; Останов и перезагрузка внутpеннего   ;*
                              ; таймеpа/счетчика 0. Сброс флага TF0. ;*
        ;***********************************************************;*
        mov     TAB4ST,#0
        mov     TAB4ML,#0; "Очистка" накопительных переменных временного параметра
        ;---------------; инкрементируемых на +1 после обработки процедуры прерывания
                       ; Diskret_Time по переполнению флага tf0 внутpеннего таймеpа/счетчика 0.
        
		SETB CE_CHN	 ; ВЗВЕДЕМ ЗАТВОР ТРИГГЕРА (ЧТО НА ВХОДЕ, ТО И НА ВЫХОДЕ)
		CLR OE_CHN	; СНИМЕМ 3 СОСТОЯНИЕ РЕГИСТРА D14
		
		setb    tr0   ; Запуск внутpеннего таймеpа/счетчика 0. ОТСЧЕТ ПО 1МС ПОШЕЛ!
        ;====================================================
                         ; По переполнению таймеpа/счетчика 0 -
                        ; - обработка процедуры прерывания: перезагрузка счётчика/
                       ; таймера T/C0 с повторным его перезапуском, и увеличения переменных
                      ; TAB4ST,TAB4ML после отрабатывания таймером T/C0
                     ; временного интервала 489,335 мкс. = 0.489335 мс.
                    ;*********************************************************
                    ;*********************************************************
                   ; Общее время процедуры обработки прерывания 20/(21max) машинных циклов.
                  ;  (10,85 мкс.-20 машинных циклов/11,3925 мкс.-21max машинных циклов.)
                 ; !! Данное время обработки прерывания ДОБАВЛЯЕТСЯ к времени заполнения
                ; !! таймеpа/счетчика T/C0. Таким образом общее время:489,335+10,85=500,185 мкс.
               ;************************************************************************
		CLR CE_CHN	 ; ЗАЩЕЛКНУЛИ ЗАТВОР ТРИГГЕРА
;=========================================

		SETB	FLAG_OPROS_NDZ ; НЕ ОПРАШИВАЕМ НДЗ, ЕСЛИ ВХОДЫ НЕ СРАБ.	
		CALL	CHECK_INP  ;ПРОВЕРКА ВХОДОВ СТЕНДА
		RET



;------------------------------------------------------------------
			  ;ИМПУЛЬС 300MS
SET_300MS:
		;CALL	DRAW_300MS
		
		SETB S_12MS
		SETB S_21MS
		CLR S_300MS
		SETB S_1100MS

		JNB FLAG_AUTO,SELECT_CHN_300MS ; ЕСЛИ МЫ В АВТО РЕЖИМЕ ТО НЕ РИСУЕМ *
		
		MOV R7,#2
		call delay_n_x_01_sek ; ЗАДЕРЖКА 300МС

		CALL	DRAW_STAR	 ;РИСУЕМ ЗВЕЗДОЧКУ ПОСЛЕ НАДПИСИ 12MS

SELECT_CHN_300MS:
		CALL SELECT_CHN		;ВЫБОР КАНАЛА+ИНТЕНСИВНОСТЬ

;=========================================
;===============Задержка==================
;=========================================
; == Загрузка таймера T/C0 начальным кодом для формирования интервала 500 мкс.=
;=============================================================================
        lcall   load_tc0       ; Останов и перезагрузка внутpеннего   ;*
                              ; таймеpа/счетчика 0. Сброс флага TF0. ;*
        ;***********************************************************;*
        mov     TAB4ST,#0
        mov     TAB4ML,#0; "Очистка" накопительных переменных временного параметра
        ;---------------; инкрементируемых на +1 после обработки процедуры прерывания
                       ; Diskret_Time по переполнению флага tf0 внутpеннего таймеpа/счетчика 0.
        
		SETB CE_CHN	 ; ВЗВЕДЕМ ЗАТВОР ТРИГГЕРА (ЧТО НА ВХОДЕ, ТО И НА ВЫХОДЕ)
		CLR OE_CHN	; СНИМЕМ 3 СОСТОЯНИЕ РЕГИСТРА D14
		
		setb    tr0   ; Запуск внутpеннего таймеpа/счетчика 0. ОТСЧЕТ ПО 1МС ПОШЕЛ!
        ;====================================================
                         ; По переполнению таймеpа/счетчика 0 -
                        ; - обработка процедуры прерывания: перезагрузка счётчика/
                       ; таймера T/C0 с повторным его перезапуском, и увеличения переменных
                      ; TAB4ST,TAB4ML после отрабатывания таймером T/C0
                     ; временного интервала 489,335 мкс. = 0.489335 мс.
                    ;*********************************************************
                    ;*********************************************************
                   ; Общее время процедуры обработки прерывания 20/(21max) машинных циклов.
                  ;  (10,85 мкс.-20 машинных циклов/11,3925 мкс.-21max машинных циклов.)
                 ; !! Данное время обработки прерывания ДОБАВЛЯЕТСЯ к времени заполнения
                ; !! таймеpа/счетчика T/C0. Таким образом общее время:489,335+10,85=500,185 мкс.
               ;************************************************************************
		CLR CE_CHN	 ; ЗАЩЕЛКНУЛИ ЗАТВОР ТРИГГЕРА
;=========================================

		SETB	FLAG_OPROS_NDZ ; НЕ ОПРАШИВАЕМ НДЗ, ЕСЛИ ВХОДЫ НЕ СРАБ.	
		CALL	CHECK_INP  ;ПРОВЕРКА ВХОДОВ СТЕНДА
;------------------------------------------------------------------
		 RET


;------------------------------------------------------------------
			  ;ИМПУЛЬС 1100MS
SET_1100MS:
		;CALL	DRAW_1100MS
		
		SETB S_12MS
		SETB S_21MS
		SETB S_300MS
		CLR S_1100MS
		
		JNB FLAG_AUTO,SELECT_CHN_1100MS ; ЕСЛИ МЫ В АВТО РЕЖИМЕ ТО НЕ РИСУЕМ *
	
		MOV R7,#2
		call delay_n_x_01_sek ; ЗАДЕРЖКА 300МС

		CALL	DRAW_STAR	 ;РИСУЕМ ЗВЕЗДОЧКУ ПОСЛЕ НАДПИСИ 12MS

SELECT_CHN_1100MS:
		CALL SELECT_CHN		;ВЫБОР КАНАЛА+ИНТЕНСИВНОСТЬ

;=========================================
;===============Задержка==================
;=========================================
; == Загрузка таймера T/C0 начальным кодом для формирования интервала 500 мкс.=
;=============================================================================
        lcall   load_tc0       ; Останов и перезагрузка внутpеннего   ;*
                              ; таймеpа/счетчика 0. Сброс флага TF0. ;*
        ;***********************************************************;*
        mov     TAB4ST,#0
        mov     TAB4ML,#0; "Очистка" накопительных переменных временного параметра
        ;---------------; инкрементируемых на +1 после обработки процедуры прерывания
                       ; Diskret_Time по переполнению флага tf0 внутpеннего таймеpа/счетчика 0.
        
		SETB CE_CHN	 ; ВЗВЕДЕМ ЗАТВОР ТРИГГЕРА (ЧТО НА ВХОДЕ, ТО И НА ВЫХОДЕ)
		CLR OE_CHN	; СНИМЕМ 3 СОСТОЯНИЕ РЕГИСТРА D14
		
		setb    tr0   ; Запуск внутpеннего таймеpа/счетчика 0. ОТСЧЕТ ПО 1МС ПОШЕЛ!
        ;====================================================
                         ; По переполнению таймеpа/счетчика 0 -
                        ; - обработка процедуры прерывания: перезагрузка счётчика/
                       ; таймера T/C0 с повторным его перезапуском, и увеличения переменных
                      ; TAB4ST,TAB4ML после отрабатывания таймером T/C0
                     ; временного интервала 489,335 мкс. = 0.489335 мс.
                    ;*********************************************************
                    ;*********************************************************
                   ; Общее время процедуры обработки прерывания 20/(21max) машинных циклов.
                  ;  (10,85 мкс.-20 машинных циклов/11,3925 мкс.-21max машинных циклов.)
                 ; !! Данное время обработки прерывания ДОБАВЛЯЕТСЯ к времени заполнения
                ; !! таймеpа/счетчика T/C0. Таким образом общее время:489,335+10,85=500,185 мкс.
               ;************************************************************************
		CLR CE_CHN	 ; ЗАЩЕЛКНУЛИ ЗАТВОР ТРИГГЕРА
;=========================================

		;JNB	FLAG_AUTO,CALLING_CHECK_INP_1100MS ; ЕСЛИ АВТО РЕЖИМ, ТО ФЛАГ НЕ ВЫСТ.
		CLR	FLAG_OPROS_NDZ ; ОПРАШИВАЕМ НДЗ, ЕСЛИ ВХОДЫ НЕ СРАБ.	

CALLING_CHECK_INP_1100MS:
		CALL	CHECK_INP  ;ПРОВЕРКА ВХОДОВ СТЕНДА
		
		RET
;------------------------------------------------------------------

SET_CONST:

		
		CLR S_OK ; УСТАНОВИМ ДЛЯ ОПРОСА ВХОДОВ
				; ЧТОБЫ НЕ ФИКСИРОВАТЬ ВРЕМЯ СРАБ
		CALL	DRAW_CONST
		
		CLR OE_CHN	; СНИМЕМ 3 СОСТОЯНИЕ РЕГИСТРА D14
		SETB CE_CHN	 ; ВЗВЕДЕМ ЗАТВОР ТРИГГЕРА

		CALL SELECT_CHN	;ВЫБОР КАНАЛА+ИНТЕНСИВНОСТЬ
		
		CLR CE_CHN	   ; ЗАЩЕЛКНУЛИ ТРИГГЕР

		MOV P2, #0FFH ; ШИНУ ДАННЫХ В ИСХ СОСТОЯНИЕ
		CALL CHECK_INP	 ;ПРОВЕРКА ВХОДОВ СТЕНДА
		RET
;------------------------------------------------------------------

;------------------------------------------------------------------
CLR_CONST:

		CALL	DRAW_CLR
		
		SETB OE_CHN	; ВЫКЛ РЕГИСТР D14

		MOV P2, #0FFH ; ШИНУ ДАННЫХ В ИСХ СОСТОЯНИЕ

		RET
;------------------------------------------------------------------

SET_INTENS:

		CPL	INTENS	   					; ИНВЕРСИЯ СЛУЖЕБНОГО БИТА INTENS
		
		JNB	INTENS,GO_DRAW_INTENS_MAX	; ЕСЛИ INTENS В 0, ТО РИСУЕМ MAX
		CALL DRAW_INTENS_MIN			; ЕСЛИ INTENS В 1, ТО РИСУЕМ MIN
		RET	
GO_DRAW_INTENS_MAX:
		CALL  DRAW_INTENS_MAX			;РИСУЕМ MAX
		RET

;------------------------------------------------------------------


;------------------------------------------------------------------
SET_CHN_1:					;УСТАНОВИТЬ КАНАЛ 1
		
		JNB	FLAG_CH1,EXIT_SET_CHN_1	; ЕСЛИ КАНАЛ УЖЕ УСТАНОВЛЕН,  	
									; ТО ВЫХОД
		MOV SEL_CHN,#1
		;CALL DRAW_CHN
		
		CLR FLAG_CH1	; УСТАНОВИМ ФЛАГИ, ЧТОБЫ ПО 100 РАЗ СЮДА НЕ БЕГАТЬ
		SETB FLAG_CH2
		SETB FLAG_CH3
		SETB FLAG_CH4
		SETB FLAG_CH0

; ЕСЛИ РЕЖИМ CONST, ТО ПРИ ПЕРЕКЛЮЧЕНИИ КАНАЛА,
; МЫ ЕГО СОХРАНИМ
		JNB	 CONST_IMPULS,CHN_1_SET_CONST
		
EXIT_SET_CHN_1:
		RET

CHN_1_SET_CONST:
		CALL	  SET_CONST
		JMP		 EXIT_SET_CHN_1
;------------------------------------------------------------------

;------------------------------------------------------------------
SET_CHN_2:					;УСТАНОВИТЬ КАНАЛ 2
		
		JNB	FLAG_CH2,EXIT_SET_CHN_2	; ЕСЛИ КАНАЛ УЖЕ УСТАНОВЛЕН,  	
									; ОБРАТНО  К СКАНУ КНОПОК
		MOV SEL_CHN,#2
		;CALL DRAW_CHN
		
		CLR FLAG_CH2	; УСТАНОВИМ ФЛАГ, ЧТОБЫ ПО 100 РАЗ СЮДА НЕ БЕГАТЬ
		SETB FLAG_CH1
		SETB FLAG_CH3
		SETB FLAG_CH4
		SETB FLAG_CH0

; ЕСЛИ РЕЖИМ CONST, ТО ПРИ ПЕРЕКЛЮЧЕНИИ КАНАЛА,
; МЫ ЕГО СОХРАНИМ
		JNB	 CONST_IMPULS,CHN_2_SET_CONST

EXIT_SET_CHN_2:
		RET

CHN_2_SET_CONST:
		CALL	  SET_CONST
		JMP		 EXIT_SET_CHN_2

;------------------------------------------------------------------

;------------------------------------------------------------------
SET_CHN_3:					;УСТАНОВИТЬ КАНАЛ 3
		
		JNB	FLAG_CH3,EXIT_SET_CHN_3	; ЕСЛИ КАНАЛ УЖЕ УСТАНОВЛЕН,  	
									; ОБРАТНО  К СКАНУ КНОПОК
		
		MOV SEL_CHN,#3
		;CALL DRAW_CHN
		
		CLR FLAG_CH3	; УСТАНОВИМ ФЛАГ, ЧТОБЫ ПО 100 РАЗ СЮДА НЕ БЕГАТЬ
		SETB FLAG_CH1
		SETB FLAG_CH2
		SETB FLAG_CH4
		SETB FLAG_CH0

; ЕСЛИ РЕЖИМ CONST, ТО ПРИ ПЕРЕКЛЮЧЕНИИ КАНАЛА,
; МЫ ЕГО СОХРАНИМ
		JNB	 CONST_IMPULS,CHN_3_SET_CONST

EXIT_SET_CHN_3:
		RET

CHN_3_SET_CONST:
		CALL	  SET_CONST
		JMP		 EXIT_SET_CHN_3
;------------------------------------------------------------------

;------------------------------------------------------------------
SET_CHN_4:					;УСТАНОВИТЬ КАНАЛ 4

		JNB	FLAG_CH4,EXIT_SET_CHN_4	; ЕСЛИ КАНАЛ УЖЕ УСТАНОВЛЕН,  	
									; ОБРАТНО  К СКАНУ КНОПОК
		
		MOV SEL_CHN,#4
		;CALL DRAW_CHN
		
		CLR FLAG_CH4	; УСТАНОВИМ ФЛАГ, ЧТОБЫ ПО 100 РАЗ СЮДА НЕ БЕГАТЬ
		SETB FLAG_CH1
		SETB FLAG_CH2
		SETB FLAG_CH3
		SETB FLAG_CH0


; ЕСЛИ РЕЖИМ CONST, ТО ПРИ ПЕРЕКЛЮЧЕНИИ КАНАЛА,
; МЫ ЕГО СОХРАНИМ
		JNB	 CONST_IMPULS,CHN_4_SET_CONST

EXIT_SET_CHN_4:
		RET

CHN_4_SET_CONST:
		CALL	  SET_CONST
		JMP		 EXIT_SET_CHN_4

;------------------------------------------------------------------


;------------------------------------------------------------------
SET_CHN_0:					;УСТАНОВИТЬ КАНАЛ 5

		JNB	FLAG_CH0,EXIT_SET_CHN_0	; ЕСЛИ КАНАЛ УЖЕ УСТАНОВЛЕН,  	
									; ОБРАТНО  К СКАНУ КНОПОК
		
		MOV SEL_CHN,#0
		;CALL DRAW_CHN
		
		CLR FLAG_CH0	; УСТАНОВИМ ФЛАГ, ЧТОБЫ ПО 100 РАЗ СЮДА НЕ БЕГАТЬ
		SETB FLAG_CH1
		SETB FLAG_CH2
		SETB FLAG_CH3
		SETB FLAG_CH4

; ЕСЛИ РЕЖИМ CONST, ТО ПРИ ПЕРЕКЛЮЧЕНИИ КАНАЛА,
; МЫ ЕГО СОХРАНИМ
		JNB	 CONST_IMPULS,CHN_0_SET_CONST

EXIT_SET_CHN_0:
		RET

CHN_0_SET_CONST:
		CALL	  SET_CONST
		JMP		 EXIT_SET_CHN_0

;------------------------------------------------------------------




;************************************************************
;                ###########################################################################
;               #                                                                         #
;              #       =АВТОМАТИЧЕСКИЙ РЕЖИМ ПОСЛЕ НАЖАТИЯ КНОПКИ TEST=                  # 
;     		  #		   																	#
;			 #	В ПРОЦЕССЕ ТЕСТА БУДУ ПОКАЗЫВАТЬ НОМЕР ШАГА И ТЕСТА+НАЗВАНИЕ ШАГА	   #
;			#	ЕСЛИ ПРОИЗОШЛА ОШИБКА,СТИРАЮ НАДПИСЬ "ИДЕТ ТЕСТ...",ЗАЖИГАЮ ДИОД	  #
;		   #	СООТВЕТСТВУЮЩИЙ НЕИСПРАВНОМУ ВХОДУ И ЖДУ НАЖАТИЯ КНОПКИ "СБРОС"		 #				
;		  #	 ТЕСТ ДУГА-О ЗАНИМАЕТ 17 СЕК.(6 СЕК ЗАНИМАЕТ ОЖИДАНИЕ КВИТИРОВАНИЯ)	    #
;		 #	ДОСРОЧНЫЙ ВЫХОД ИЗ ТЕСТА ПО КНОПКЕ СБРОС (EXTRIM_EXIT_AUTO)			   #
;        ###########################################################################


AUTO_REGIM:
		CALL CLR_CONST	; ВЫРУБИМ РЕЖИМ CONST, ЕСЛИ БЫЛ ВКЛЮЧЕН
		SETB S_OK ; СБРОСИМ ДЛЯ ОПРОСА ВХОДОВ
		SETB CONST_IMPULS ; СБРОСИМ ФЛАГ CONST РЕЖИМА
		
		SETB FLAG_CH1	; СБРОСИМ ФЛАГИ УСТАНОВКИ КАНАЛОВ
		SETB FLAG_CH2
		SETB FLAG_CH3
		SETB FLAG_CH4
		SETB FLAG_CH0
		

		MOV	LED,#0FFH	  ; ПЕРЕМЕННУЮ ДИОДОВ В СТОК
		CALL	BURN_LEDS ; СБРОС ДИОДОВ
		
		CLR FLAG_AUTO ; УСТАНОВ ФЛАГА АВТО РЕЖИМА
		CALL DRAW_AUTO	; РИСУЕМ ОКНО АВТО РЕЖИМА
		
		


;==================================
; Проверка исходного состояния реле
; ДО ПОДАЧИ ПИТАНИЯ
; ВСЕ РЕЛЕ, КРОМЕ НДЗ ДОЛЖНЫ БЫТЬ РАЗОМКНУТЫ
;==================================				
AUTO_STEP1:


; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;===============================================
		MOV	TEST_NUM,#'1'
		MOV STEP_NUM,#'1'
;**********************************************
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ
		CALL DRAW_STEP_1   ;НАЗВАНИЕ ТЕСТА

; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================

		SETB	POW_ON1 ; ВЫРУБИМ ПИТАНИЕ
		
;///////////////////////////////////////////////////////////////////////////////////////
		;==========================
		; ПРОВЕРИМ, ЗАМКНУЛОСЬ ЛИ НДЗ ПОСЛЕ СНЯТИЯ ПИТАНИЯ
; ЭТО ДЕЛАЕТСЯ ИЗ-ЗА ТОГО, ЧТО В ДУГЕ СТОИТ КОНДЕР НА ВЫКЛ ПИТАНИЯ.
; ПОЭТОМУ ДАГА ВЫРУБАЕТСЯ НЕ СРАЗУ. МАКС ВРЕМЯ ВЫРУБАНИЯ 3 СЕК (СКАЗАЛ ВАДИМ ЦЫГАНКОВ)		
		
		MOV TAB4ST,#00H			; ОБНУЛИМ ПЕРЕМЕННУЮ ДЛЯ НАЧАЛА ОТСЧЕТА
		MOV TAB4ML,#00H			; ОБНУЛИМ ПЕРЕМЕННУЮ ДЛЯ НАЧАЛА ОТСЧЕТА
		
		CLR OE_IN  ;ВРУБИМ БУФЕР ВХОДОВ ДЛЯ ПРОСЛУШКИ
WAITING_NDZ_STEP_1:		
		JNB	 P2.5,START_STEP_1 ; ЖДЕМ, ПОКА НЕ ЗАМКНЕТСЯ НДЗ
		;***************************
		; ЗАЩИТА ОТ ЗАВИСАНИЯ  НДЗ
		; ЕСЛИ ЧЕРЕЗ 4000 МС РЕЛЕ НЕ ЗАМКНУЛОСЬ
		; ТО ВЫХОДИМ С ОШИБКОЙ
		CALL delay_1_ms	 ; ДИСКРЕТНОСТЬ 1МС

				inc     TAB4ML    ; 1 cl.
                mov     R6,TAB4ML; 2 cl.
                ;***************
                cjne    R6,#00H,CHECK_TIME_STEP1 ; 2 cl.
                ;***************
                inc     TAB4ST ; 1 cl.
                ;*************;
CHECK_TIME_STEP1:
;***ПРОВЕРКА ПЕРЕМЕННЫХ TAB4ST,TAB4ML Прошло ЛИ 4000 мс.? ***
; TAB4ST=0FH 	TAB4ML=A0H 	 (1100=44CH)
		CLR		C								  ; 1 cl.
		mov     A,TAB4ML						  ; 1 cl.
		SUBB	A,#0A0H		;TAB4ML-0A0H		  ; 1 cl.
		MOV		DPL,A		;РЕЗУЛЬТАТ В DPL	  ; 1 cl.
		
		mov     A,TAB4ST						  ; 1 cl.
		SUBB	A,#0FH		;TAB4ST-0FH		  	  ; 1 cl.

;ЛОГ. ИЛИ МЕЖДУ РЕЗУЛЬТАТАМИ
; ЕСЛИ СЧЕТЧИК ДОСТИГ 0FA0H, ТО В АСС БУДЕТ НОЛЬ		
		ORL		A,DPL

;ПЕРЕХОД, ЕСЛИ АСС РАВЕН НУЛЮ
		JZ		GO_STEP_1_ERROR_23			  
;ПЕРЕХОД, ЕСЛИ АСС НЕ РАВЕН НУЛЮ
		JMP		WAITING_NDZ_STEP_1				  ; 2 cl.


GO_STEP_1_ERROR_23:		
		SETB  OE_IN	 ; ЗАКРЫВАЕМ БУФЕР ВХОДОВ ПОСЛЕ ОПРОСА НДЗ
		
		MOV	A,TAB4ST
		CALL UART
		MOV	A,TAB4ML
		CALL UART

		JMP GO1_ERROR_23 ; если ндз так и не зАмкнулся за 4с, то ошибка 23
		

;///////////////////////////////////////////////////////////////////////////////////////

START_STEP_1:
		SETB  OE_IN	 ; ЗАКРЫВАЕМ БУФЕР ВХОДОВ ПОСЛЕ ОПРОСА НДЗ
		
		MOV R7,#20
		CALL delay_n_x_1_ms	;НА ВСЯКИЙ

		JNB RES,GO_EXIT_AUTO_1	; ЕСЛИ НАЖАЛИ КНОПКУ СБРОС - ВЫХОДИМ						 

		CLR	OE_IN  ; ВКЛЮЧИМ БУФЕР ВХОДОВ
		MOV INPUT,P2   ; СОХРАНИМ ПОРТ В INPUT
		SETB OE_IN	; ВЫКЛЮЧИМ БУФЕР 
		
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO1_ERROR_18		
		JNB IN_2,GO1_ERROR_19		
		JNB IN_3,GO1_ERROR_20		
		JNB IN_4_1,GO1_ERROR_21		
		JNB IN_4_2,GO1_ERROR_22		
		JB IN_NDZ,GO1_ERROR_23		

		JMP AUTO_STEP2

GO_EXIT_AUTO_1: JMP EXTRIM_EXIT_AUTO ; ВЫХОД ИЗ ТЕСТА ПО КНОПККЕ СБРОС

GO1_ERROR_18:	JMP	GO_ERROR_18
GO1_ERROR_19:	JMP	GO_ERROR_19
GO1_ERROR_20:	JMP	GO_ERROR_20
GO1_ERROR_21:	JMP	GO_ERROR_21
GO1_ERROR_22:	JMP	GO_ERROR_22
GO1_ERROR_23:	JMP	GO_ERROR_23








;==================================
; Проверка готовности после подачи питания
; я буду смотреть, успеет ли сработать ндз
; через 250 мс после Подачи питания
;==================================				
AUTO_STEP2:
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV	TEST_NUM,#'2'
		MOV STEP_NUM,#'1'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ
		
		CALL DRAW_STEP_2   ;НАЗВАНИЕ ТЕСТА

; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================

; для дискретности в 1 мс будем использовать таймер 2		
;***********************************************************;*
		CALL load_tc2 ;ЗАГРУЗИМ ТАЙМЕР 2
		
        ;***********************************************************;*
        mov     TAB2ST,#0
        mov     TAB2ML,#0; "Очистка" накопительных переменных временного параметра
        ;---------------; инкрементируемых на +1 после обработки процедуры прерывания
                       ; Diskret_Time2 по переполнению флага tf2 внутpеннего таймеpа/счетчика 2.

		CLR POW_ON1 ; ВКЛЮЧИМ ПИТАНИЕ
		
		CLR	OE_IN  ; ВКЛЮЧИМ БУФЕР ВХОДОВ

		setb    tr2   ; Запуск внутpеннего таймеpа/счетчика 2. ОТСЧЕТ ПО 1МС ПОШЕЛ!
;***********************************************************;*
		
		; теперь ждем, пока не сработает (P2.5 В 1) ндз
CHECK_NDZ_AUTO2:
		JNB P2.5,USLOVIE_AUTO2	 
		JMP EXIT_WITHOUT_ERROR24 ; ЕСЛИ УСПЕЛ СРАБОТАТЬ МЕННЕ ЧЕМ ЗА 250 МС
								; ТО ИДЕМ НА СЛЕД.ШАГ

;----------------------------------------------------------------------
; БУДЕМ ПРОВЕРЯТЬ ВРЕМЯ ГОТОВНОСТИ ДО ТЕХ ПОР, ПОКА
; ОНО НЕ ПРЕВЫСИТ 250 МС. ПОТОМ - ОШИБКА
;----------------------------------------------------------------------
USLOVIE_AUTO2:
		;*******************************
		;УСЛОВИЕ
		; IF A>250
		; then 3.14ц
		;*******************************
		CLR C

		MOV A,TAB2ML
		CJNE A,#0FAH,CHECK_NDZ_AUTO2         ;A=250 ???

		JMP EXIT_WITH_ERROR24  ; ВЫХОД ИЗ АВТО ТЕСТА С ОШИБКОЙ 24
;----------------------------------------------------------------------
;----------------------------------------------------------------------


;----------------------------------------------------------------------
		; СЮДА ПОПАДЕМ, ЕСЛИ ВРЕМЯ ГОТОВНОСТИ БОЛЬШЕ 250 МС
;----------------------------------------------------------------------
EXIT_WITH_ERROR24:
		CLR    tr2  ; ВЫРУБИМ ТАЙМЕР 
		CLR    TF2 			  ;ФЛАГ
		
		SETB	OE_IN  ; ВЫКЛЮЧИМ БУФЕР ВХОДОВ
		MOV P2,#0FFH	; ЛИНИЮ В СТОК
		
		;CALL DRAW_STEP_2
		JMP GO_ERROR_24
;----------------------------------------------------------------------



;----------------------------------------------------------------------
		; СЮДА ПОПАДЕМ, ЕСЛИ ВСЕ ОК И ВРЕМЯ <250 МС
;----------------------------------------------------------------------
EXIT_WITHOUT_ERROR24:
		CLR    tr2    ; ВЫРУБИМ ТАЙМЕР
		CLR    TF2 				;ФЛАГ
		
		SETB	OE_IN  ; ВЫКЛЮЧИМ БУФЕР ВХОДОВ
		MOV P2,#0FFH	; ЛИНИЮ В СТОК

		; ВЫВОД В UART ВРЕМЕНИ ГОТОВНОСТИ БЛОКА
		;MOV A,TAB2ML
		;CALL UART
;----------------------------------------------------------------------
		;ЕСЛИ ЛЮБОЙ РЕЖИМ. КРОМЕ ДУГА_О, ТО СРАЗУ К 4 ТЕСТУ
		JB	REGIM_DUGA_O,GO_AUTO_STEP_4	 ;REGIM_DUGA_O 	УСТАНАВЛИВАЕТСЯ В МЕНЮ БЛОКА
		JMP AUTO_STEP3
		;JMP AUTO_STEP8
GO_AUTO_STEP_4: JMP AUTO_STEP4





;==================================
; Подача импульсов минимальной интенсивности (2000 лк) 
; длительностью 21 мс
; ВЫХОДЫ НЕ ДОЛЖНЫ СРАБАТЫВАТЬ
;==================================

AUTO_STEP3:
		CALL DRAW_STEP_3_O   ;НАЗВАНИЕ ТЕСТА

AUTO_STEP3_1:
;*********************
; КАНАЛ 1
;*********************

;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV	TEST_NUM,#'3'
		MOV STEP_NUM,#'1'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ
		
; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================
		CALL SET_CHN_1 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 1, НЕЗАМИСИМО ОТ ГАЛИ

		SETB INTENS	;NTENS=1-MIN->SETB P2.4 МИНИМАЛЛНАЯ ИНТЕНСИВНОСТЬ 
		
		CALL SET_21MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 21 МС+ОПРОС ВХОДОВ
		JNB	RES,GO3_1_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO3_ERROR_7		
		JNB IN_2,GO3_ERROR_8		
		JNB IN_3,GO3_ERROR_9		
		JNB IN_4_1,GO3_ERROR_10		
		JNB IN_4_2,GO3_ERROR_11		
		JNB IN_NDZ,GO3_ERROR_12		

		JMP AUTO_STEP3_2 ; СЛЕД. КАНАЛ

; ДОСРОЧНЫЙ ВЫХОД ПО КНОПКЕ СБРОС
GO3_1_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================





;*********************
; КАНАЛ 2
;*********************

AUTO_STEP3_2:


;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV	TEST_NUM,#'3'
		MOV STEP_NUM,#'2'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ
; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================
		
		CALL SET_CHN_2 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 2, НЕЗАМИСИМО ОТ ГАЛИ

		SETB INTENS	;NTENS=1-MIN->SETB P2.4 МИНИМАЛЛНАЯ ИНТЕНСИВНОСТЬ 
		CALL SET_21MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 21 МС+ОПРОС ВХОДОВ
		JNB	RES,GO3_2_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС
; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 1-СРАБОТАЛ 0-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO3_ERROR_7		
		JNB IN_2,GO3_ERROR_8		
		JNB IN_3,GO3_ERROR_9		
		JNB IN_4_1,GO3_ERROR_10		
		JNB IN_4_2,GO3_ERROR_11		
		JNB IN_NDZ,GO3_ERROR_12		



		JMP AUTO_STEP3_3

; ДОСРОЧНЫЙ ВЫХОД ПО КНОПКЕ СБРОС
GO3_2_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================


		JMP	AUTO_STEP3_3	; ЕСЛИ ВСЕ ОК ТО К СЛЕД КАНАЛУ

;============================
; ПЕРЕХОДЫ
;===========================
GO3_ERROR_7: 	JMP	GO_ERROR_7	
GO3_ERROR_8: 	JMP	GO_ERROR_8
GO3_ERROR_9: 	JMP	GO_ERROR_9
GO3_ERROR_10:	JMP	GO_ERROR_10
GO3_ERROR_11:	JMP	GO_ERROR_11
GO3_ERROR_12:	JMP	GO_ERROR_12
;===========================



;*********************
; КАНАЛ 3
;*********************
AUTO_STEP3_3:

;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV	TEST_NUM,#'3'
		MOV STEP_NUM,#'3'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ


; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================


		CALL SET_CHN_3 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 3, НЕЗАМИСИМО ОТ ГАЛИ

		SETB INTENS	;NTENS=1-MIN->SETB P2.4 МИНИМАЛЛНАЯ ИНТЕНСИВНОСТЬ 
		CALL SET_21MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 21 МС+ОПРОС ВХОДОВ
		JNB	RES,GO3_3_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС
; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 1-СРАБОТАЛ 0-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO3_ERROR_7		
		JNB IN_2,GO3_ERROR_8		
		JNB IN_3,GO3_ERROR_9		
		JNB IN_4_1,GO3_ERROR_10		
		JNB IN_4_2,GO3_ERROR_11		
		JNB IN_NDZ,GO3_ERROR_12		



		JMP AUTO_STEP3_4

; ДОСРОЧНЫЙ ВЫХОД ПО КНОПКЕ СБРОС
GO3_3_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================


;*********************
; КАНАЛ 4
;*********************

AUTO_STEP3_4:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV	TEST_NUM,#'3'
		MOV STEP_NUM,#'4'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ


; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================


		CALL SET_CHN_4 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 4, НЕЗАМИСИМО ОТ ГАЛИ

		SETB INTENS	;NTENS=1-MIN->SETB P2.4 МИНИМАЛЛНАЯ ИНТЕНСИВНОСТЬ 
		CALL SET_21MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 21 МС+ОПРОС ВХОДОВ
		JNB	RES,GO3_4_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС
; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 1-СРАБОТАЛ 0-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO3_ERROR_7		
		JNB IN_2,GO3_ERROR_8		
		JNB IN_3,GO3_ERROR_9		
		JNB IN_4_1,GO3_ERROR_10		
		JNB IN_4_2,GO3_ERROR_11		
		JNB IN_NDZ,GO3_ERROR_12		
	

		JMP AUTO_STEP4

GO3_4_EXIT_AUTO:   
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================



;==================================
; Подача импульсов максимальной интенсивности (3500 лк),  
; длительность 12 мс
; ВЫХОДЫ НЕ ДОЛЖНЫ СРАБАТЫВАТЬ
;==================================
AUTO_STEP4:
;==============================
AUTO_STEP4_1:
;*********************
; КАНАЛ 1
;*********************

;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		; РЕЖИМ ДУГА-О - ВЫВОДИМ ТЕСТ№4, ЕСЛИ НЕТ, ТО №3
		JB REGIM_DUGA_O,TEST_3_1_F

TEST_4_1_O:		
		CALL DRAW_STEP_4_O   ;"ПОДАЧА ИМПУЛЬСОВ ДЛИТЕЛЬНОСТЬЮ 12ms"
		MOV	TEST_NUM,#'4'
		MOV STEP_NUM,#'1'
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ
		JMP START_AUTO_STEP4_1

TEST_3_1_F:
		CALL DRAW_STEP_3_F   ;"Макс. интенсивность 12ms"
		MOV	TEST_NUM,#'3'
		MOV STEP_NUM,#'1'
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ

;==========================
START_AUTO_STEP4_1:


; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================

		CALL SET_CHN_1 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 1, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		CALL SET_12MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 12 МС+ОПРОС ВХОДОВ
		JNB	RES,GO4_2_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС
; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO4_ERROR_7		
		JNB IN_2,GO4_ERROR_8		
		JNB IN_3,GO4_ERROR_9		
		JNB IN_4_1,GO4_ERROR_10		
		JNB IN_4_2,GO4_ERROR_11		
		JNB IN_NDZ,GO4_ERROR_12		


		JMP AUTO_STEP4_2

GO4_2_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================


;*********************
; КАНАЛ 2
;*********************
AUTO_STEP4_2:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'2'
;==========================

;==========================

		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА И ШАГА ДЛЯ СЕБЯ
		
; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================

		CALL SET_CHN_2 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 2, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 

		CALL SET_12MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 12 МС+ОПРОС ВХОДОВ
		JNB	RES,GO4_3_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС
; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO4_ERROR_7		
		JNB IN_2,GO4_ERROR_8		
		JNB IN_3,GO4_ERROR_9		
		JNB IN_4_1,GO4_ERROR_10		
		JNB IN_4_2,GO4_ERROR_11		
		JNB IN_NDZ,GO4_ERROR_12		
		
		JMP AUTO_STEP4_3

GO4_3_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================




;============================
; ПЕРЕХОДЫ
;===========================
GO4_ERROR_7: 	JMP	GO_ERROR_7	
GO4_ERROR_8: 	JMP	GO_ERROR_8
GO4_ERROR_9: 	JMP	GO_ERROR_9
GO4_ERROR_10:	JMP	GO_ERROR_10
GO4_ERROR_11:	JMP	GO_ERROR_11
GO4_ERROR_12:	JMP	GO_ERROR_12
;===========================


;*********************
; КАНАЛ 3
;*********************
AUTO_STEP4_3:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'3'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ
; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================
		
		CALL SET_CHN_3 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 3, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 

		CALL SET_12MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 12 МС+ОПРОС ВХОДОВ

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO4_ERROR_7		
		JNB IN_2,GO4_ERROR_8		
		JNB IN_3,GO4_ERROR_9		
		JNB IN_4_1,GO4_ERROR_10		
		JNB IN_4_2,GO4_ERROR_11		
		JNB IN_NDZ,GO4_ERROR_12		

;*********************
; КАНАЛ 4
;*********************
AUTO_STEP4_4:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'4'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ


; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST

;====================
		
		CALL SET_CHN_4 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 4, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		CALL SET_12MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 12 МС+ОПРОС ВХОДОВ
		JNB	RES,GO4_4_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС
; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO4_ERROR_7		
		JNB IN_2,GO4_ERROR_8		
		JNB IN_3,GO4_ERROR_9		
		JNB IN_4_1,GO4_ERROR_10		
		JNB IN_4_2,GO4_ERROR_11		
		JNB IN_NDZ,GO4_ERROR_12		


		JMP AUTO_STEP5

GO4_4_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================



;==================================
; Подача импульсов максимальной интенсивности (3500 лк),  
; длительность 21 мс
; ВЫХОДЫ ДОЛЖНЫ СРАБАТЫВАТЬ
;==================================
AUTO_STEP5:
; ЗАДЕРЖКА ДЛЯ НАБЛЮДЕНИЯ
;***********************
		;CLR LED_OK
		;CALL BURN_LEDS
		;MOV	DPTR,#3
		;CALL delay_n_sek
		
		;SETB LED_OK
		;CALL BURN_LEDS
;***********************
AUTO_STEP5_1:
;*********************
; КАНАЛ 1
;*********************

;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================

		; РЕЖИМ ДУГА-О - ВЫВОДИМ ТЕСТ№5, ЕСЛИ НЕТ, ТО №4
		JB REGIM_DUGA_O,TEST_4_1_F

TEST_5_1_O:		
		CALL DRAW_STEP_5_O   ; "Макс. интенсивность 21ms"
		MOV	TEST_NUM,#'5'
		MOV STEP_NUM,#'1'
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ
		JMP START_AUTO_STEP5_1

TEST_4_1_F:
		CALL DRAW_STEP_4_F   ;"ПОДАЧА ИМПУЛЬСОВ ДЛИТЕЛЬНОСТЬЮ 21ms"
		MOV	TEST_NUM,#'4'
		MOV STEP_NUM,#'1'
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ

;==========================
START_AUTO_STEP5_1:

		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ


; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST

;====================
		
		CALL SET_CHN_1 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 1, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		CALL SET_21MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 21 МС+ОПРОС ВХОДОВ

		JNB	RES,GO5_2_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
; ДОЛЖЕН СРАБОТАТЬ ВХОД 1, ОСТАЛЬНЫЕ НЕТ
		; ПОБИТНАЯ ПРОВЕРКА
		JB IN_1,GO5_ERROR_1		
		JNB IN_2,GO5_ERROR_8		
		JNB IN_3,GO5_ERROR_9		
		JNB IN_4_1,GO5_ERROR_10		
		JNB IN_4_2,GO5_ERROR_11		
		JNB IN_NDZ,GO5_ERROR_12		
		
		JNB TIME_IN_ERROR,GO5_ERROR_13 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.


		JMP AUTO_STEP5_2

GO5_2_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================



;*********************
; КАНАЛ 2
;*********************
AUTO_STEP5_2:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'2'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ


; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST

;====================
		
		CALL SET_CHN_2 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 2, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		CALL SET_21MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 21 МС+ОПРОС ВХОДОВ
		
		JNB	RES,GO5_3_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO5_ERROR_7		
		JB IN_2,GO5_ERROR_2		
		JNB IN_3,GO5_ERROR_9		
		JNB IN_4_1,GO5_ERROR_10		
		JNB IN_4_2,GO5_ERROR_11		
		JNB IN_NDZ,GO5_ERROR_12		
		
		JNB TIME_IN_ERROR,GO5_ERROR_14 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.


		JMP AUTO_STEP5_3

GO5_3_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================


		JMP AUTO_STEP5_3 ; ЕСЛИ ВСЕ ОК, К СЛЕД КАНАЛУ


;============================
; ПЕРЕХОДЫ
;===========================
GO5_ERROR_1:  JMP GO_ERROR_1
GO5_ERROR_2:  JMP GO_ERROR_2
GO5_ERROR_3:  JMP GO_ERROR_3
GO5_ERROR_4:  JMP GO_ERROR_4
GO5_ERROR_5:  JMP GO_ERROR_5
GO5_ERROR_7:  JMP GO_ERROR_7
GO5_ERROR_8:  JMP GO_ERROR_8
GO5_ERROR_9:  JMP GO_ERROR_9
GO5_ERROR_10: JMP GO_ERROR_10
GO5_ERROR_11: JMP GO_ERROR_11
GO5_ERROR_12: JMP GO_ERROR_12
GO5_ERROR_13: JMP GO_ERROR_13
GO5_ERROR_14: JMP GO_ERROR_14
GO5_ERROR_15: JMP GO_ERROR_15
GO5_ERROR_16: JMP GO_ERROR_16
;===========================


;*********************
; КАНАЛ 3
;*********************
AUTO_STEP5_3:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'3'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ

; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST

;====================
		CALL SET_CHN_3 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 3, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		CALL SET_21MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 21 МС+ОПРОС ВХОДОВ
		
		JNB	RES,GO5_4_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС
; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO5_ERROR_7		
		JNB IN_2,GO5_ERROR_8		
		JB IN_3,GO5_ERROR_3		
		JNB IN_4_1,GO5_ERROR_10		
		JNB IN_4_2,GO5_ERROR_11		
		JNB IN_NDZ,GO5_ERROR_12		

		JNB TIME_IN_ERROR,GO5_ERROR_15 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.

		JMP AUTO_STEP5_4

GO5_4_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================



;*********************
; КАНАЛ 4
;*********************
AUTO_STEP5_4:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'4'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ


; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST

;====================

		CALL SET_CHN_4 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 4, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		CLR    S_21MS  ; ФЛАГ НАЖАТИЯ КНОПКИ "12МС". НУЖЕН ДЛЯ ПРАВ. РАБОТЫ 
						; ПРОЦЕДУРЫ ОБРАБОТКИ ПРЕРЫВАНИЯ ОТ ТС0
		CALL SET_21MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 21 МС+ОПРОС ВХОДОВ

		JNB	RES,GO5_5_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO5_ERROR_7		
		JNB IN_2,GO5_ERROR_8		
		JNB IN_3,GO5_ERROR_9		
		JB IN_4_1,GO5_ERROR_4		
		JB IN_4_2,GO5_ERROR_5		
		JNB IN_NDZ,GO5_ERROR_12		
		
		JNB TIME_IN_ERROR,GO5_ERROR_16 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.
		
		CALL WAITING_FOR ; ВЫЗОВ ПРОЦЕДУРЫ ОЖИДАНИЯ КНОПКИ КВИТ
		
		MOV LED,#0FFH
		CALL	BURN_LEDS

		JNB RES,GO5_5_EXIT_AUTO	; ЕСЛИ СБРОС, ТО ВЫХОДИМ
		
		JMP AUTO_STEP6	; К СЛЕДУЮЩЕМУ ТЕСТУ

GO5_5_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO









;==================================
; Подача импульсов максимальной интенсивности (3500 лк),  
; длительность 300 мс
; ВЫХОДЫ ДОЛЖНЫ СРАБАТЫВАТЬ
;==================================
AUTO_STEP6:
AUTO_STEP6_1:
;*********************
; КАНАЛ 1
;*********************

;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		

		; РЕЖИМ ДУГА-О - ВЫВОДИМ ТЕСТ№6, ЕСЛИ НЕТ, ТО №5
		JB REGIM_DUGA_O,TEST_5_1_F

TEST_6_1_O:		
		CALL DRAW_STEP_6_O   ; "Макс. интенсивность 300ms"
		MOV	TEST_NUM,#'6'
		MOV STEP_NUM,#'1'
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ
		JMP START_AUTO_STEP6_1

TEST_5_1_F:
		CALL DRAW_STEP_5_F   ;"ПОДАЧА ИМПУЛЬСОВ ДЛИТЕЛЬНОСТЬЮ 300ms"
		MOV	TEST_NUM,#'5'
		MOV STEP_NUM,#'1'
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ

START_AUTO_STEP6_1:		

; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST

;====================
		CALL SET_CHN_1 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 1, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		CALL SET_300MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 300 МС+ОПРОС ВХОДОВ

		JNB	RES,GO6_1_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
; ДОЛЖЕН СРАБОТАТЬ ВХОД 1, ОСТАЛЬНЫЕ НЕТ
		; ПОБИТНАЯ ПРОВЕРКА
		JB IN_1,GO6_ERROR_1		
		JNB IN_2,GO6_ERROR_8		
		JNB IN_3,GO6_ERROR_9		
		JNB IN_4_1,GO6_ERROR_10		
		JNB IN_4_2,GO6_ERROR_11		
		JNB IN_NDZ,GO6_ERROR_12		

		JNB TIME_IN_ERROR,GO6_ERROR_13 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.

		JMP AUTO_STEP6_2


GO6_1_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================

;*********************
; КАНАЛ 2
;*********************
AUTO_STEP6_2:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'2'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ

; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST

;====================
		CALL SET_CHN_2 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 2, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		CALL SET_300MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 300 МС+ОПРОС ВХОДОВ

		JNB	RES,GO6_2_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO6_ERROR_7		
		JB IN_2,GO6_ERROR_2		
		JNB IN_3,GO6_ERROR_9		
		JNB IN_4_1,GO6_ERROR_10		
		JNB IN_4_2,GO6_ERROR_11		
		JNB IN_NDZ,GO6_ERROR_12		
		
		JNB TIME_IN_ERROR,GO6_ERROR_14 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.

		JMP AUTO_STEP6_3

GO6_2_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================




;============================
; ПЕРЕХОДЫ
;===========================
GO6_ERROR_1:  JMP GO_ERROR_1
GO6_ERROR_2:  JMP GO_ERROR_2
GO6_ERROR_3:  JMP GO_ERROR_3
GO6_ERROR_4:  JMP GO_ERROR_4
GO6_ERROR_5:  JMP GO_ERROR_5
GO6_ERROR_7:  JMP GO_ERROR_7
GO6_ERROR_8:  JMP GO_ERROR_8
GO6_ERROR_9:  JMP GO_ERROR_9
GO6_ERROR_10: JMP GO_ERROR_10
GO6_ERROR_11: JMP GO_ERROR_11
GO6_ERROR_12: JMP GO_ERROR_12
GO6_ERROR_13: JMP GO_ERROR_13
GO6_ERROR_14: JMP GO_ERROR_14
GO6_ERROR_15: JMP GO_ERROR_15
GO6_ERROR_16: JMP GO_ERROR_16
;===========================


;*********************
; КАНАЛ 3
;*********************
AUTO_STEP6_3:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'3'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ

; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST

;====================
		CALL SET_CHN_3 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 3, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		CALL SET_300MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 300 МС+ОПРОС ВХОДОВ
		
		JNB	RES,GO6_3_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO6_ERROR_7		
		JNB IN_2,GO6_ERROR_8		
		JB IN_3,GO6_ERROR_3		
		JNB IN_4_1,GO6_ERROR_10		
		JNB IN_4_2,GO6_ERROR_11		
		JNB IN_NDZ,GO6_ERROR_12		

		JNB TIME_IN_ERROR,GO6_ERROR_15 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.


		JMP AUTO_STEP6_4

; ДОСРОЧНЫЙ ВЫХОД
GO6_3_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================



;*********************
; КАНАЛ 4
;*********************
AUTO_STEP6_4:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'4'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ

; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================

		CALL SET_CHN_4 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 4, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		CALL SET_300MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 300 МС+ОПРОС ВХОДОВ

		JNB	RES,GO6_4_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO6_ERROR_7		
		JNB IN_2,GO6_ERROR_8		
		JNB IN_3,GO6_ERROR_9		
		JB IN_4_1,GO6_ERROR_4		
		JB IN_4_2,GO6_ERROR_5		
		JNB IN_NDZ,GO6_ERROR_12		
		
		JNB TIME_IN_ERROR,GO6_ERROR_16 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.




		CALL WAITING_FOR ; ВЫЗОВ ПРОЦЕДУРЫ ОЖИДАНИЯ КНОПКИ КВИТ
		MOV LED,#0FFH
		CALL	BURN_LEDS
		
		JNB RES,GO6_4_EXIT_AUTO	; ЕСЛИ СБРОС, ТО ВЫХОДИМ
		
		JMP AUTO_STEP7	; К СЛЕДУЮЩЕМУ ТЕСТУ

GO6_4_EXIT_AUTO: 
SETB OE_BTN1
JMP EXTRIM_EXIT_AUTO
;==============================





;==================================
; Подача импульсов максимальной интенсивности (3500 лк),  
; длительность 1100 мс
; ВЫХОДЫ ДОЛЖНЫ СРАБАТЫВАТЬ
;==================================
AUTO_STEP7:
; ЗАДЕРЖКА ДЛЯ НАБЛЮДЕНИЯ
;***********************
		;CLR LED_OK
		;CALL BURN_LEDS
		;MOV	DPTR,#3
		;CALL delay_n_sek
		
		;SETB LED_OK
		;CALL BURN_LEDS
;***********************

AUTO_STEP7_1:
;*********************
; КАНАЛ 1
;*********************

;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================


		; РЕЖИМ ДУГА-О - ВЫВОДИМ ТЕСТ№7, ЕСЛИ НЕТ, ТО №6
		JB REGIM_DUGA_O,TEST_6_1_F

TEST_7_1_O:		
		CALL DRAW_STEP_7_O   ; "Макс. интенсивность 1100ms"
		MOV	TEST_NUM,#'7'
		MOV STEP_NUM,#'1'
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ
		JMP START_AUTO_STEP7_1	

TEST_6_1_F:
		CALL DRAW_STEP_6_F   ;"ПОДАЧА ИМПУЛЬСОВ ДЛИТЕЛЬНОСТЬЮ 300ms"
		MOV	TEST_NUM,#'6'
		MOV STEP_NUM,#'1'
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ

START_AUTO_STEP7_1:			

; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================

		CALL SET_CHN_1 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 1, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		CALL SET_1100MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 1100 МС+ОПРОС ВХОДОВ

		JNB	RES,GO7_1_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
; ДОЛЖЕН СРАБОТАТЬ ВХОД 1, ОСТАЛЬНЫЕ НЕТ
		; ПОБИТНАЯ ПРОВЕРКА
		JB IN_1,GO7_ERROR_1		
		JNB IN_2,GO7_ERROR_8		
		JNB IN_3,GO7_ERROR_9		
		JNB IN_4_1,GO7_ERROR_10		
		JNB IN_4_2,GO7_ERROR_11		
		JB IN_NDZ,GO7_ERROR_6		

		JNB TIME_IN_ERROR,GO7_ERROR_13 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.


		JMP AUTO_STEP7_2		  ;=

; ДОСРОЧНЫЙ ВЫХОД
GO7_1_EXIT_AUTO: 				  ;=
JMP EXTRIM_EXIT_AUTO					  ;=
;===================================

;*********************
; КАНАЛ 2
;*********************
AUTO_STEP7_2:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'2'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ


; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================

		CALL SET_CHN_2 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 2, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	; NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		
		;==========================
		; ПРОВЕРИМ, ОТРАБОТАЛО ЛИ НДЗ ПОСЛЕ ПРЕД. КАНАЛА
		MOV P2,#0FFH ; ЛИНИЮ В СТОК	НА ВСЯКИЙ
		MOV TIME_1MS,#00H			; ОБНУЛИМ ПЕРЕМЕННУЮ ДЛЯ НАЧАЛА ОТСЧЕТА
						; TIME_1MS БУДЕТ ИСПОЛЬЗОВАНА ДЛЯ ЗАЩИТЫ ОТ ЗАВИСАНИЯ
		CLR OE_IN  ;ВРУБИМ БУФЕР ВХОДОВ ДЛЯ ПРОСЛУШКИ

WAITING_NDZ_STEP_7_2:		
		JB	 P2.5,START_IMPULS_STEP_7_2 ; ЖДЕМ, ПОКА НЕ РАЗОМКНЕТСЯ НДЗ
		;***************************
		; ЗАЩИТА ОТ ЗАВИСАНИЯ  НДЗ
		; ЕСЛИ ЧЕРЕЗ 100 МС РЕЛЕ НЕ РАЗОМКНУЛОСЬ
		; ТО ВЫХОДИМ С ОШИБКОЙ
		CALL delay_1_ms

		INC TIME_1MS

		MOV A,TIME_1MS
		CJNE A,#100,WAITING_NDZ_STEP_7_2
		SETB  OE_IN	 ; ЗАКРЫВАЕМ БУФЕР ВХОДОВ ПОСЛЕ ОПРОСА НДЗ
		JMP GO7_ERROR_25 ; если ндз так и не разомкнулся за 100 мс, то ошибка 25
		
		;==========================
START_IMPULS_STEP_7_2:		
		SETB  OE_IN	 ; ЗАКРЫВАЕМ БУФЕР ВХОДОВ ПОСЛЕ ОПРОСА НДЗ
		CALL SET_1100MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 1100 МС+ОПРОС ВХОДОВ

		JNB	RES,GO7_2_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO7_ERROR_7		
		JB IN_2,GO7_ERROR_2		
		JNB IN_3,GO7_ERROR_9		
		JNB IN_4_1,GO7_ERROR_10		
		JNB IN_4_2,GO7_ERROR_11		
		JB IN_NDZ,GO7_ERROR_6		
		
		JNB TIME_IN_ERROR,GO7_ERROR_14 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.


								  ;=
		JMP AUTO_STEP7_3		  ;=
								  ;=
; ДОСРОЧНЫЙ ВЫХОД
GO7_2_EXIT_AUTO: 				  ;=
JMP EXTRIM_EXIT_AUTO					  ;=
;===================================


		JMP AUTO_STEP7_3 ; ЕСЛИ ВСЕ ОК, К СЛЕД КАНАЛУ


;============================
; ПЕРЕХОДЫ
;===========================
GO7_ERROR_1:  JMP GO_ERROR_1
GO7_ERROR_2:  JMP GO_ERROR_2
GO7_ERROR_3:  JMP GO_ERROR_3
GO7_ERROR_4:  JMP GO_ERROR_4
GO7_ERROR_5:  JMP GO_ERROR_5
GO7_ERROR_6:  JMP GO_ERROR_6
GO7_ERROR_7:  JMP GO_ERROR_7
GO7_ERROR_8:  JMP GO_ERROR_8
GO7_ERROR_9:  JMP GO_ERROR_9
GO7_ERROR_10: JMP GO_ERROR_10
GO7_ERROR_11: JMP GO_ERROR_11
GO7_ERROR_12: JMP GO_ERROR_12
GO7_ERROR_13: JMP GO_ERROR_13
GO7_ERROR_14: JMP GO_ERROR_14
GO7_ERROR_15: JMP GO_ERROR_15
GO7_ERROR_16: JMP GO_ERROR_16
GO7_ERROR_25: JMP GO_ERROR_25
;===========================


;*********************
; КАНАЛ 3
;*********************
AUTO_STEP7_3:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'3'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ

; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================
		CALL SET_CHN_3 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 3, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 
		
		;==========================
		; ПРОВЕРИМ, ОТРАБОТАЛО ЛИ НДЗ ПОСЛЕ ПРЕД. КАНАЛА
		MOV P2,#0FFH ; ЛИНИЮ В СТОК	НА ВСЯКИЙ
		MOV TIME_1MS,#00H			; ОБНУЛИМ ПЕРЕМЕННУЮ ДЛЯ НАЧАЛА ОТСЧЕТА
						; TIME_1MS БУДЕТ ИСПОЛЬЗОВАНА ДЛЯ ЗАЩИТЫ ОТ ЗАВИСАНИЯ
		CLR OE_IN  ;ВРУБИМ БУФЕР ВХОДОВ ДЛЯ ПРОСЛУШКИ
WAITING_NDZ_STEP_7_3:		
		JB	 P2.5,START_IMPULS_STEP_7_3 ; ЖДЕМ, ПОКА НЕ РАЗОМКНЕТСЯ НДЗ
		;***************************
		; ЗАЩИТА ОТ ЗАВИСАНИЯ  НДЗ
		; ЕСЛИ ЧЕРЕЗ 100 МС РЕЛЕ НЕ РАЗОМКНУЛОСЬ
		; ТО ВЫХОДИМ С ОШИБКОЙ
		CALL delay_1_ms

		INC TIME_1MS

		MOV A,TIME_1MS
		CJNE A,#100,WAITING_NDZ_STEP_7_3
		SETB  OE_IN	 ; ЗАКРЫВАЕМ БУФЕР ВХОДОВ ПОСЛЕ ОПРОСА НДЗ
		JMP GO7_ERROR_25 ; если ндз так и не разомкнулся за 100 мс, то ошибка 25
		
		;==========================
START_IMPULS_STEP_7_3:		
		SETB  OE_IN	 ; ЗАКРЫВАЕМ БУФЕР ВХОДОВ ПОСЛЕ ОПРОСА НДЗ

		CALL SET_1100MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 1100 МС+ОПРОС ВХОДОВ
		
		JNB	RES,GO7_3_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO7_ERROR_7		
		JNB IN_2,GO7_ERROR_8		
		JB IN_3,GO7_ERROR_3		
		JNB IN_4_1,GO7_ERROR_10		
		JNB IN_4_2,GO7_ERROR_11		
		JB IN_NDZ,GO7_ERROR_6		

		JNB TIME_IN_ERROR,GO7_ERROR_15 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.


		JMP AUTO_STEP7_4		  ;=
								  ;=

; ДОСРОЧНЫЙ ВЫХОД
GO7_3_EXIT_AUTO: 				  ;=
JMP EXTRIM_EXIT_AUTO					  ;=
;===================================


;*********************
; КАНАЛ 4
;*********************
AUTO_STEP7_4:
;==================================				
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;==========================
		MOV STEP_NUM,#'4'
;==========================
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ

; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================

		CALL SET_CHN_4 ; УСТАНОВИМ ВРУЧНУЮ КАНАЛ 4, НЕЗАМИСИМО ОТ ГАЛИ

		CLR INTENS	;NTENS=0-MAX->CLR P2.4 MAX ИНТЕНСИВНОСТЬ 

		;==========================
		; ПРОВЕРИМ, ОТРАБОТАЛО ЛИ НДЗ ПОСЛЕ ПРЕД. КАНАЛА
		MOV P2,#0FFH ; ЛИНИЮ В СТОК	НА ВСЯКИЙ
		MOV TIME_1MS,#00H			; ОБНУЛИМ ПЕРЕМЕННУЮ ДЛЯ НАЧАЛА ОТСЧЕТА
						; TIME_1MS БУДЕТ ИСПОЛЬЗОВАНА ДЛЯ ЗАЩИТЫ ОТ ЗАВИСАНИЯ
		CLR OE_IN  ;ВРУБИМ БУФЕР ВХОДОВ ДЛЯ ПРОСЛУШКИ
WAITING_NDZ_STEP_7_4:		
		JB	 P2.5,START_IMPULS_STEP_7_4 ; ЖДЕМ, ПОКА НЕ РАЗОМКНЕТСЯ НДЗ
		;***************************
		; ЗАЩИТА ОТ ЗАВИСАНИЯ  НДЗ
		; ЕСЛИ ЧЕРЕЗ 100 МС РЕЛЕ НЕ РАЗОМКНУЛОСЬ
		; ТО ВЫХОДИМ С ОШИБКОЙ
		CALL delay_1_ms

		INC TIME_1MS

		MOV A,TIME_1MS
		CJNE A,#100,WAITING_NDZ_STEP_7_4
		SETB  OE_IN	 ; ЗАКРЫВАЕМ БУФЕР ВХОДОВ ПОСЛЕ ОПРОСА НДЗ
		JMP GO7_ERROR_25 ; если ндз так и не разомкнулся за 100 мс, то ошибка 25
		
		;==========================
START_IMPULS_STEP_7_4:		
		SETB  OE_IN	 ; ЗАКРЫВАЕМ БУФЕР ВХОДОВ ПОСЛЕ ОПРОСА НДЗ

		CALL SET_1100MS ; ВЫЗОВ ПРОЦЕДУРЫ ИМПУЛЬСА 1100 МС+ОПРОС ВХОДОВ
		
		JNB	RES,GO7_4_EXIT_AUTO	  ; ПРОВЕРКА НАЖАТИЯ КНОПКИ СБРОС

; СЕЙЧАС, СОСТОЯНИЕ ВЫХОДОВ ХРАНИТЬСЯ В ПЕРЕМЕННОЙ INPUT		
; 0-СРАБОТАЛ 1-НЕСРАБОТАЛ
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO77_ERROR_7		
		JNB IN_2,GO77_ERROR_8		
		JNB IN_3,GO77_ERROR_9		
		JB IN_4_1,GO77_ERROR_4		
		JB IN_4_2,GO77_ERROR_5		
		JB IN_NDZ,GO77_ERROR_6		
		
		
		JNB TIME_IN_ERROR,GO77_ERROR_16 ; ПРОВЕРКА ФЛАГА ОШИБКИ ВРЕМЕНИ СРАБ.


								  ;=
		JMP AUTO_STEP8  		  ;=

; НЕ ДОСТАЕТ
GO77_ERROR_7: JMP GO7_ERROR_7
GO77_ERROR_8: JMP GO7_ERROR_8
GO77_ERROR_9: JMP GO7_ERROR_9
GO77_ERROR_4: JMP GO7_ERROR_4
GO77_ERROR_5: JMP GO7_ERROR_5
GO77_ERROR_6: JMP GO7_ERROR_6
GO77_ERROR_16: JMP GO7_ERROR_16
; ДОСРОЧНЫЙ ВЫХОД
GO7_4_EXIT_AUTO: 				  ;=
JMP EXTRIM_EXIT_AUTO			  ;=
;===================================

		JMP AUTO_STEP8	; К СЛЕДУЮЩЕМУ ТЕСТУ




;===============================
; ВЫКЛЮЧЕНИЕ ПИТАНИЯ БЛОКА
; ПРОВЕРЯЕМ ИСХОДНОЕ СОСТОЯНИЕ РЕЛЕ ПОСЛЕ ВЫКЛЮЧЕНИЯ ПИТАНИЯ
;===============================
AUTO_STEP8:
		CALL DRAW_STEP_8_O   ; "ВЫКЛЮЧЕНИЕ ПИТАНИЯ БЛОКА"
; СРАЗУ ЗАПИШЕМ НОМЕР ТЕСТА И ШАГ АЛГОРИТМА		
;===============================================
		; РЕЖИМ ДУГА-О - ВЫВОДИМ ТЕСТ№8, ЕСЛИ НЕТ, ТО №7
		JB REGIM_DUGA_O,TEST_7_1_F

TEST_8_1_O:		
		MOV	TEST_NUM,#'8'
		MOV STEP_NUM,#'1'
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ
		JMP START_AUTO_STEP8

TEST_7_1_F:
		MOV	TEST_NUM,#'7'
		MOV STEP_NUM,#'1'
		CALL DRAW_STEP_TEHNOLOGY ; НАРИСУЕМ НОМЕР ТЕСТА  И ШАГА ДЛЯ СЕБЯ

START_AUTO_STEP8:			
		CALL DRAW_STEP_8_O   ;НАЗВАНИЕ ТЕСТА


; ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ
;====================
;CALL WAITING_BTN_TEST
;====================

		
		;==========================
		; ПРОВЕРИМ, ОТРАБОТАЛО ЛИ НДЗ ПОСЛЕ ПРЕД. КАНАЛА (ПОСЛЕ ТЕСТА 7_4)
		MOV P2,#0FFH ; ЛИНИЮ В СТОК	НА ВСЯКИЙ
		MOV TIME_1MS,#00H			; ОБНУЛИМ ПЕРЕМЕННУЮ ДЛЯ НАЧАЛА ОТСЧЕТА
						; TIME_1MS БУДЕТ ИСПОЛЬЗОВАНА ДЛЯ ЗАЩИТЫ ОТ ЗАВИСАНИЯ
		CLR OE_IN  ;ВРУБИМ БУФЕР ВХОДОВ ДЛЯ ПРОСЛУШКИ
WAITING_NDZ_STEP_8:		
		JB	 P2.5,START_IMPULS_STEP_8 ; ЖДЕМ, ПОКА НЕ РАЗОМКНЕТСЯ НДЗ
		;***************************
		; ЗАЩИТА ОТ ЗАВИСАНИЯ  НДЗ
		; ЕСЛИ ЧЕРЕЗ 100 МС РЕЛЕ НЕ РАЗОМКНУЛОСЬ
		; ТО ВЫХОДИМ С ОШИБКОЙ
		CALL delay_1_ms

		INC TIME_1MS

		MOV A,TIME_1MS
		CJNE A,#100,WAITING_NDZ_STEP_8
		SETB  OE_IN	 ; ЗАКРЫВАЕМ БУФЕР ВХОДОВ ПОСЛЕ ОПРОСА НДЗ
		JMP GO7_ERROR_25 ; если ндз так и не разомкнулся за 100 мс, то ошибка 25
		
		;==========================
START_IMPULS_STEP_8:		
		SETB  OE_IN	 ; ЗАКРЫВАЕМ БУФЕР ВХОДОВ ПОСЛЕ ОПРОСА НДЗ

		SETB POW_ON1 ; ВЫРУБИМ ПИТАНИЕ
		
;///////////////////////////////////////////////////////////////////////////////////////
		;==========================
		; ПРОВЕРИМ, ЗАМКНУЛОСЬ ЛИ НДЗ ПОСЛЕ СНЯТИЯ ПИТАНИЯ
; ЭТО ДЕЛАЕТСЯ ИЗ-ЗА ТОГО, ЧТО В ДУГЕ СТОИТ КОНДЕР НА ВЫКЛ ПИТАНИЯ.
; ПОЭТОМУ ДУГА ВЫРУБАЕТСЯ НЕ СРАЗУ. МАКС ВРЕМЯ ВЫРУБАНИЯ 3 СЕК (СКАЗАЛ ВАДИМ ЦЫГАНКОВ)		
		
		MOV TAB4ST,#00H			; ОБНУЛИМ ПЕРЕМЕННУЮ ДЛЯ НАЧАЛА ОТСЧЕТА
		MOV TAB4ML,#00H			; ОБНУЛИМ ПЕРЕМЕННУЮ ДЛЯ НАЧАЛА ОТСЧЕТА
		
		CLR OE_IN  ;ВРУБИМ БУФЕР ВХОДОВ ДЛЯ ПРОСЛУШКИ

WAITING_NDZ_STEP_8_1:		
		JNB	 P2.5,START_STEP_8 ; ЖДЕМ, ПОКА НЕ ЗАМКНЕТСЯ НДЗ
		;***************************
		; ЗАЩИТА ОТ ЗАВИСАНИЯ  НДЗ
		; ЕСЛИ ЧЕРЕЗ 4000 МС РЕЛЕ НЕ ЗАМКНУЛОСЬ
		; ТО ВЫХОДИМ С ОШИБКОЙ
		CALL delay_1_ms	 ; ДИСКРЕТНОСТЬ 1МС

				inc     TAB4ML    ; 1 cl.
                mov     R6,TAB4ML; 2 cl.
                ;***************
                cjne    R6,#00H,CHECK_TIME_STEP8 ; 2 cl.
                ;***************
                inc     TAB4ST ; 1 cl.
                ;*************;
CHECK_TIME_STEP8:
;***ПРОВЕРКА ПЕРЕМЕННЫХ TAB4ST,TAB4ML Прошло ЛИ 4000 мс.? ***
; TAB4ST=0FH 	TAB4ML=A0H 	 (1100=44CH)
		CLR		C								  ; 1 cl.
		mov     A,TAB4ML						  ; 1 cl.
		SUBB	A,#0A0H		;TAB4ML-0A0H		  ; 1 cl.
		MOV		DPL,A		;РЕЗУЛЬТАТ В DPL	  ; 1 cl.
		
		mov     A,TAB4ST						  ; 1 cl.
		SUBB	A,#0FH		;TAB4ST-0FH		  	  ; 1 cl.

;ЛОГ. ИЛИ МЕЖДУ РЕЗУЛЬТАТАМИ
; ЕСЛИ СЧЕТЧИК ДОСТИГ 0FA0H, ТО В АСС БУДЕТ НОЛЬ		
		ORL		A,DPL

;ПЕРЕХОД, ЕСЛИ АСС РАВЕН НУЛЮ
		JZ		GO_STEP_8_ERROR_23			  
;ПЕРЕХОД, ЕСЛИ АСС НЕ РАВЕН НУЛЮ
		JMP		WAITING_NDZ_STEP_8_1				  ; 2 cl.


; СЮДА ПОПАДЕМ, ЕСЛИ ВРЕМЯ ВЫКЛ ДУГИ > 4 С
GO_STEP_8_ERROR_23:		

		SETB  OE_IN	 ; ЗАКРЫВАЕМ БУФЕР ВХОДОВ ПОСЛЕ ОПРОСА НДЗ

		MOV	A,TAB4ST
		CALL UART
		MOV	A,TAB4ML
		CALL UART

		
		JMP GO_ERROR_23 ; если ндз так и не зАмкнулся за 4с, то ошибка 23
;///////////////////////////////////////////////////////////////////////////////////////

START_STEP_8:
		SETB OE_IN	; ВЫКЛЮЧИМ БУФЕР 
		
		MOV R7,#20
		CALL delay_n_x_1_ms	;НА ВСЯКИЙ


		JNB RES,EXTRIM_EXIT_AUTO

		CLR	OE_IN  ; ВКЛЮЧИМ БУФЕР ВХОДОВ
		MOV INPUT,P2   ; СОХРАНИМ ПОРТ В INPUT
		SETB OE_IN	; ВЫКЛЮЧИМ БУФЕР 
		
		; ПОБИТНАЯ ПРОВЕРКА
		JNB IN_1,GO8_ERROR_18		
		JNB IN_2,GO8_ERROR_19		
		JNB IN_3,GO8_ERROR_20		
		JNB IN_4_1,GO8_ERROR_21		
		JNB IN_4_2,GO8_ERROR_22		
		JB IN_NDZ,GO8_ERROR_23		

		JMP EXIT_AUTO_OK

GO8_ERROR_18:	JMP	GO_ERROR_18
GO8_ERROR_19:	JMP	GO_ERROR_19
GO8_ERROR_20:	JMP	GO_ERROR_20
GO8_ERROR_21:	JMP	GO_ERROR_21
GO8_ERROR_22:	JMP	GO_ERROR_22
GO8_ERROR_23:	JMP	GO_ERROR_23


;=======================================
; УСПЕШНОЕ ЗАВЕРШЕНИЕ АВТО ТЕСТИРОВАНИЯ
;========================================
EXIT_AUTO_OK:
	   CALL DRAW_TEST_OK  ; РИСУЕМ ОКНО БЛОК ИСПРАВЕН
	   
	   MOV LED,#10111111B
	   CALL BURN_LEDS ; ЗАЖИГАЕМ СВЕТОДИОД ОК И ТУШИМ ВХОДЫ
	   JMP SCAN_BUTTON_ERROR

EXIT_AUTO:

		MOV	LED,#0FFH
		CALL	BURN_LEDS ; СБРОС ДИОДОВ

		SETB POW_ON1
		RET

EXTRIM_EXIT_AUTO: ; СБРОС ТЕСТА ПОЛЬЗОВАТЕЛЕМ
		SETB RES ; БИТ КНОПКИ СБРОС В СТОК
		MOV	LED,#0FFH
		CALL	BURN_LEDS ; СБРОС ДИОДОВ
		
		CALL DRAW_STOP_TEST_USER

; БУДЕМ ЖДАТЬ ПОКА ЧЕЛ НЕ ОТПУСТИТ КНОПКУ СБРОС
; А ТО СРАЗУ ВЫЛЕТАЕМ В РАБОЧИЙ РЕЖИМ        
		CLR OE_BTN1
		JNB P2.7,$ ; ЖДЕМССС
		SETB OE_BTN1
		JMP	SCAN_BUTTON_ERROR
;********************************************
;        ТАБЛИЦЫ		
;********************************************		



TEST1:			DB		'ТЕСТОВЫЙ РЕЖИМ'
TEST2:			DB		'РУЧНОЙ РЕЖИМ'
TEST3:			DB		'импульс';7
TEST4:			DB		'12ms  '
TEST5:			DB		'21ms  ' ;6
TEST6:			DB		'300ms '
TEST7:			DB		'1100ms'
TEST8:			DB		'Канал:' ;6
TEST9:			DB		'Интенсивность:' ;14
TEST10:			DB		'min' ;3
TEST11:			DB		'max' ;3
TEST12:			DB		'const' ;5
TEST13:			DB		'      ' ;6
TEST14:			DB		'ms' ;2
TEST15:			DB		' ' ;1
TEST16:			DB		'Выходы:' ;7
TEST17:			DB		'Вых.1' ;5
TEST18:			DB		'Вых.2' ;5
TEST19:			DB		'Вых.3' ;5
TEST20:			DB		'Вых.4.1' ;7
TEST21:			DB		'Вых.4.2' ;7
TEST22:			DB		'Отказ' ;5
TEST23:			DB		'Длит.выхода:' ;12
TEST25:			DB		'ИДЕТ ТЕСТ...' ;12
TEST26:			DB		'Состояние:' ;10
TEST27:			DB		'НОРМА' ;5
TEST28:			DB		'ОШИБКА:' ;7
TEST29:			DB		'ТЕСТ:' ;5
TEST30:			DB		'ШАГ:' ;4
TEST31:			DB		'НОРМА' ;5
TEST32:			DB		'                     ' ;21

TEST33:			DB		'Проверка исходного' ;18
TEST34:			DB		'состояния реле' ;14

TEST35:			DB		'Проверка готовности' ;19
TEST36:			DB		'после подачи питания' ;20

TEST37:			DB		'Мин. интенсивность' ;18

TEST38:			DB		'Макс. интенсивность' ;19

TEST39:			DB		'Выключение питания' ;18

TEST40:			DB		'блока' ;5

TEST41:			DB		'---     ' ;8

TEST42:			DB		'ВКЛ. ' ;5
TEST43:			DB		'ВЫКЛ.' ;5

TEST44:			DB		'Срабатывание выходов:' ;21

TEST45:			DB		'Сигнал:' ;7
TEST46:			DB		'ниже порога' ;11
TEST47:			DB		'выше порога' ;11

TEST48:			DB		'Нажмите клавишу' ;15
TEST49:			DB		'"КВИТИРОВАНИЕ"' ;14

TEST50:			DB		'сек...' ;6

TEST51:			DB		'БЛОК ИСПРАВЕН' ;13

TEST52:			DB		'Подача импульсов' ;16
TEST53:			DB		'длительностью 12мс' ;18
TEST54:			DB		'длительностью 21мс' ;18
TEST55:			DB		'длительностью 300мс' ;19
TEST56:			DB		'длительностью 1100мс' ;20
TEST57:			DB		'!' ;1
TEST58:			DB		'ТЕСТ ПРЕРВАН' ;12
TEST59:			DB		'ОПЕРАТОРОМ' ;10

TEST60:			DB		'**Сервисный режим**' ;19
TEST61:			DB		'Длительность выхода:' ;20


TEST62: 		DB      '---------------------'			
TEST63: 		DB      'Выбрать тип блока:' ;18
TEST64: 		DB      'ДУГА-О'
TEST65: 		DB      'ДУГА-Ф'
TEST66: 		DB		'"Выбор" - Выбор'	;15
TEST67: 		DB      '"Ok"    - Ввод'	;14
TEST68: 		DB      'ДУГА-Т'

TEST69: 		DB      '**Тест светодиодов**'

TEST70: 		DB      'с уровнем сигнала';17
TEST71: 		DB      '**Тест светодиодов**'
;*********************************************










;//////////////////////////////////////////////////////////////////////
;                         ПРОЦЕДУРЫ
;//////////////////////////////////////////////////////////////////////	

;                #########################################################################
;               #                                                                       #
;              #                               ОШИБКИ					               #      		  
;             #########################################################################

SET_ERROR:

		SETB POW_ON1 ; вырубим питание
		CALL DRAW_ERROR ; РИСУЕМ НОМЕР ОШИБКИ ИЗ ТАБЛИЦЫ ТЗ
		CALL BLINK_LED_ERROR  ; пошли моргать диодом неисправного канала

GO_EXIT_AUTO:
		JMP   EXIT_AUTO



;=============================
; ТУПО ОПРОС ТРЕХ КНОПОК
;=============================
SCAN_BUTTON_ERROR:
		LCALL TTI_S

		jnb     RES,GO_EXIT_AUTO
		jnb     POW_ON,POWER_ON
		jnb     POW_OFF,POWER_OFF
		
		JMP SCAN_BUTTON_ERROR
;================================
POWER_ON: CLR POW_ON1
		  JMP SCAN_BUTTON_ERROR

POWER_OFF: SETB POW_ON1
		   JMP SCAN_BUTTON_ERROR

;=======================================================================
; коды ошибок из таблицы
;=======================================================================

;====Несрабатывание Вых.1======
GO_ERROR_1:
		MOV ERROR,#1
		MOV LED,#01111110B
		JMP SET_ERROR

;====Несрабатывание Вых.2======
GO_ERROR_2:
		MOV ERROR,#2
		MOV LED,#01111101B
		JMP SET_ERROR


;====Несрабатывание Вых.3======
GO_ERROR_3:
		MOV ERROR,#3
		MOV LED,#01111011B
		JMP SET_ERROR


;====Несрабатывание Вых.4.1======
GO_ERROR_4:
		MOV ERROR,#4
		MOV LED,#01110111B
		JMP SET_ERROR

;====Несрабатывание Вых.4.2======
GO_ERROR_5:
		MOV ERROR,#5
		MOV LED,#01101111B
		JMP SET_ERROR

;====Несрабатывание НДЗ======
GO_ERROR_6:
		MOV ERROR,#6
		MOV LED,#01011111B
		JMP SET_ERROR

;====Ложное срабатывание  Вых.1======
GO_ERROR_7:
		MOV ERROR,#7
		MOV LED,#01111110B
		JMP SET_ERROR

;====Ложное срабатывание  Вых.2======
GO_ERROR_8:
		MOV ERROR,#8
		MOV LED,#01111101B
		JMP SET_ERROR

;====Ложное срабатывание  Вых.3======
GO_ERROR_9:
		MOV ERROR,#9
		MOV LED,#01111011B
		JMP SET_ERROR

;====Ложное срабатывание  Вых.4.1======
GO_ERROR_10:
		MOV ERROR,#10
		MOV LED,#01110111B
		JMP SET_ERROR

;====Ложное срабатывание  Вых.4.2======
GO_ERROR_11:
		MOV ERROR,#11
		MOV LED,#01101111B
		JMP SET_ERROR

;====Ложное срабатывание  НДЗ======
GO_ERROR_12:
		MOV ERROR,#12
		MOV LED,#01011111B
		JMP SET_ERROR


;====Длительность импульса Вых.1 не соответствует норме======
GO_ERROR_13:
		MOV ERROR,#13
		MOV LED,#01111110B
		JMP SET_ERROR


;====Длительность импульса Вых.2 не соответствует норме======
GO_ERROR_14:
		MOV ERROR,#14
		MOV LED,#01111101B
		JMP SET_ERROR


;====Длительность импульса Вых.3 не соответствует норме======
GO_ERROR_15:
		MOV ERROR,#15
		MOV LED,#01111011B
		JMP SET_ERROR


;====Длительность импульса Вых.4.1 не соответствует норме======
GO_ERROR_16:
		MOV ERROR,#16
		MOV LED,#01110111B
		JMP SET_ERROR

;====Длительность импульса Вых.4.2 не соответствует норме======
GO_ERROR_17:
		MOV ERROR,#17
		MOV LED,#01101111B
		JMP SET_ERROR


;====Ошибка исходного состояния Вых.1======
GO_ERROR_18:
		MOV ERROR,#18
		MOV LED,#01111110B
		JMP SET_ERROR

;====Ошибка исходного состояния Вых.2======
GO_ERROR_19:
		MOV ERROR,#19
		MOV LED,#01111101B
		JMP SET_ERROR

;====Ошибка исходного состояния Вых.3======
GO_ERROR_20:
		MOV ERROR,#20
		MOV LED,#01111011B
		JMP SET_ERROR

;====Ошибка исходного состояния Вых.4,1======
GO_ERROR_21:
		MOV ERROR,#21
		MOV LED,#01110111B
		JMP SET_ERROR


;====Ошибка исходного состояния Вых.4,2======
GO_ERROR_22:
		MOV ERROR,#22
		MOV LED,#01101111B
		JMP SET_ERROR



;====Ошибка исходного состояния НДЗ======
GO_ERROR_23:
		MOV ERROR,#23
		MOV LED,#01011111B
		JMP SET_ERROR



;====Ошибка времени готовности блока======
GO_ERROR_24:
		MOV ERROR,#24
		MOV LED,#01011111B
		JMP SET_ERROR
;=======================================================================

;====Ошибка работы реле "Отказ" (залипание контактов)======
GO_ERROR_25:
		MOV ERROR,#25
		MOV LED,#01011111B
		JMP SET_ERROR
;=======================================================================



;=======================================================================
;=======================================================================

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;                        РИСОВАНИЕ
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;=======================================================
;ОКНО РУЧНОГО РЕЖИМА РАБОТЫ
DRAW_MANUAL:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4
       ;******************************************************************
        lcall   RESP
        mov     PR_VIDELEN,#0 ; Позитивное отображение знака.
		;*********************
		
		;ВЫБИРАЕМ, КАКОЙ ЗАГОЛОВОК РИСОВАТЬ
		JB		REGIM_DUGA_O,REGIM_DUGA_F_
        mov     DPTR,#TEST64 ; 'ДУГА-О'
		JMP		DRAW_TITLE_DUGA_REGIM
REGIM_DUGA_F_:
		JB		REGIM_DUGA_F,REGIM_DUGA_T_
        mov     DPTR,#TEST65 ; 'ДУГА-Ф'
		JMP		DRAW_TITLE_DUGA_REGIM
REGIM_DUGA_T_:
		JB		REGIM_DUGA_T,DRAW_POLOSKA
        mov     DPTR,#TEST68 ; 'ДУГА-T'


DRAW_TITLE_DUGA_REGIM:
		mov     POZITION,#0
        mov     POZ_STR,#0
        mov     KOL_SIMV,#6
		lcall   LcdStrWriteSt_Tabl

; ВЫБИРАЕМ, ЧТО РИСОВАТЬ : ВКЛ ИЛИ ВЫКЛ
	   JNB FLAG_SERVICE_MODE,DRAW_POLOSKA ; ЕСЛИ МЫ В СЕРВИСНОМ РЕЖИМЕ, ТО НИХЕРА НЕ РИСУЕМ
	   										; ВКЛ ИЛИ ВЫКЛ
	   JNB POW_ON1,DRAWING_ON
			 CALL DRAW_OFF
			 JMP  DRAW_POLOSKA
DRAWING_ON:	 CALL DRAW_ON
	   


DRAW_POLOSKA:
		mov     POZITION,#0
        mov     POZ_STR,#1
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST62 ; '--------------------'
        lcall   LcdStrWriteSt_Tabl


		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST44 ; 'Срабатывание выходов:'
        lcall   LcdStrWriteSt_Tabl

		CALL DRAW_IN_NOT_ALL ; РИСУЕМ '---' ВЕЗДЕ


		mov     POZITION,#0
        mov     POZ_STR,#6
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST62 ; '--------------------'
        lcall   LcdStrWriteSt_Tabl

		; РИСУЕМ "УРОВЕНЬ СИГНАЛА" ТОЛЬКО В РЕЖИМЕ ДУГА-О
		JB REGIM_DUGA_O,DRAW_MANUAL_WITHOUT_INTENS
		
		mov     POZITION,#0
        mov     POZ_STR,#7
        mov     KOL_SIMV,#7
        mov     DPTR,#TEST45 ; 'Сигнал:'
        lcall   LcdStrWriteSt_Tabl


		JNB	INTENS,GO2_DRAW_INTENS_MAX	; ЕСЛИ INTENS В 0, ТО РИСУЕМ MAX
		CALL DRAW_INTENS_MIN			; ЕСЛИ INTENS В 1, ТО РИСУЕМ MIN
		JMP EXIT_DRAW_MANUAL	; ВЫХОД
GO2_DRAW_INTENS_MAX:
		CALL  DRAW_INTENS_MAX			;РИСУЕМ MAX

DRAW_MANUAL_WITHOUT_INTENS:
EXIT_DRAW_MANUAL:
		RET
;=======================================================
;=======================================================





;=======================================================
;ОКНО АВТО РЕЖИМА РАБОТЫ
DRAW_AUTO:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4
       ;******************************************************************
        lcall   RESP
        mov     PR_VIDELEN,#0 ; Позитивное отображение знака.
		;*********************
		
		
		;ВЫБИРАЕМ, КАКОЙ ЗАГОЛОВОК РИСОВАТЬ
		JB		REGIM_DUGA_O,REGIM_DUGA_F_AUTO
        mov     DPTR,#TEST64 ; 'ДУГА-О'
		JMP		DRAW_TITLE_DUGA_AUTO
REGIM_DUGA_F_AUTO:
		JB		REGIM_DUGA_F,REGIM_DUGA_T_AUTO
        mov     DPTR,#TEST65 ; 'ДУГА-Ф'
		JMP		DRAW_TITLE_DUGA_AUTO
REGIM_DUGA_T_AUTO:
		JB		REGIM_DUGA_T,DRAW_POLOSKA
        mov     DPTR,#TEST68 ; 'ДУГА-T'

DRAW_TITLE_DUGA_AUTO:
		mov     POZITION,#0
        mov     POZ_STR,#0
        mov     KOL_SIMV,#6
        lcall   LcdStrWriteSt_Tabl

DRAW_POLOSKA_AUTO:
		mov     POZITION,#0
        mov     POZ_STR,#1
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST62 ; '--------------------'
        lcall   LcdStrWriteSt_Tabl

;======НОМЕР ТЕСТА==========        
		mov     POZITION,#3
        mov     POZ_STR,#1
        mov     KOL_SIMV,#5
        mov     DPTR,#TEST29 ; 'ТЕСТ:'
        lcall   LcdStrWriteSt_Tabl

;======НОМЕР ШАГА==========        
		mov     POZITION,#11
        mov     POZ_STR,#1
        mov     KOL_SIMV,#4
        mov     DPTR,#TEST30 ; 'ШАГ:'
        lcall   LcdStrWriteSt_Tabl



		mov     POZITION,#0
        mov     POZ_STR,#6
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST62 ; '--------------------'
        lcall   LcdStrWriteSt_Tabl

        mov     POZITION,#0
        mov     POZ_STR,#7
        mov     KOL_SIMV,#10
        mov     DPTR,#TEST26 ; 'Состояние:'
        lcall   LcdStrWriteSt_Tabl

        mov     POZITION,#11
        mov     POZ_STR,#7
        mov     KOL_SIMV,#5
        mov     DPTR,#TEST27 ; 'НОРМА'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================

;=======================================================
;ОКНО СЕРВИСНОГО РЕЖИМА РАБОТЫ
DRAW_SERVICE_MODE:
		
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4
       ;******************************************************************
        lcall   RESP
        mov     PR_VIDELEN,#0 ; Позитивное отображение знака.
		;******* **************
		
		mov     POZITION,#1
        mov     POZ_STR,#0
        mov     KOL_SIMV,#19
        mov     DPTR,#TEST60 ; '**Сервисный режим**'
		lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#1
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST62 ; '--------------------'
        lcall   LcdStrWriteSt_Tabl


		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#20
        mov     DPTR,#TEST61 ; 'Длительность выхода'
        lcall   LcdStrWriteSt_Tabl

; РИСОВАНИЕ ДЛИТЕЛЬНОСТИ ИМПУЛЬСОВ	    
		
		CALL DRAW_TIME_INPUT
		
		clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4	;16 символов х 4 строки
		
		mov     POZITION,#0
        mov     POZ_STR,#6
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST62 ; '--------------------'
        lcall   LcdStrWriteSt_Tabl

		; РИСУЕМ "УРОВЕНЬ СИГНАЛА" ТОЛЬКО В РЕЖИМЕ ДУГА-О
		JB REGIM_DUGA_O,DRAW_MANUAL_WITHOUT_INTENS1
		
		mov     POZITION,#0
        mov     POZ_STR,#7
        mov     KOL_SIMV,#7
        mov     DPTR,#TEST45 ; 'Сигнал:'
        lcall   LcdStrWriteSt_Tabl


		JNB	INTENS,GO3_DRAW_INTENS_MAX	; ЕСЛИ INTENS В 0, ТО РИСУЕМ MAX
		CALL DRAW_INTENS_MIN			; ЕСЛИ INTENS В 1, ТО РИСУЕМ MIN
		JMP EXIT_DRAW_service	; ВЫХОД
GO3_DRAW_INTENS_MAX:
		CALL  DRAW_INTENS_MAX			;РИСУЕМ MAX

DRAW_MANUAL_WITHOUT_INTENS1:
EXIT_DRAW_service:
		RET






;=======================================================
;РИСУЕМ ОШИБКУ 
DRAW_ERROR:

		clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4


		mov     POZITION,#11
        mov     POZ_STR,#7
        mov     KOL_SIMV,#7
        mov     DPTR,#TEST28 ; 'ОШИБКА:'
        lcall   LcdStrWriteSt_Tabl
				
		MOV  DPL,ERROR
		MOV  DPH,#0

		CALL DECADA			; ВЫХОДНЫЕ ПАРАМЕТРЫ:
							; DECST, DECML- СТАРШИЕ И МЛАДШИЕ РАЗРЯДЫ;

        ; РИСУЕМ НОМЕР ОШИБКИ ПОСЛЕ СЛОВА "ОШИБКА"
		mov     POZITION,#18
        mov     POZ_STR,#7
        LCALL SET_POZITION
		MOV A,DECML
        lcall   LCD_OUTH

		RET


DRAW_STEP_TEHNOLOGY:
;***************************
; ТЕХНОЛОГИЧЕСКАЯЯ РИСОВАЛКА
; НОМЕРА ШАГА И ТЕСТА В ПРАВОМ ВЕРХНЕМ УГЛУ
;******************************************
		; РИСУЕМ НОМЕР ТЕСТА ПОСЛЕ СЛОВА ТЕСТ
        mov     POZITION,#8
        mov     POZ_STR,#1
        LCALL SET_POZITION
		MOV A,TEST_NUM
        lcall   LCDDataWriteSt
		

		; РИСУЕМ НОМЕР ШАГА ПОСЛЕ СЛОВА ШАГ
        mov     POZITION,#15
        mov     POZ_STR,#1
        LCALL SET_POZITION
		MOV A,STEP_NUM
        lcall   LCDDataWriteSt

		RET
;**************************************


;****************************
; РИСОВАНИЕ наименованиЯ шага
;*****************************
;=======================================================
;"Проверка исходного состояния реле"
DRAW_STEP_1:		


		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#18
        mov     DPTR,#TEST33 ; 'Проверка исходного'
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#14
        mov     DPTR,#TEST34 ; 'состояния реле'
        lcall   LcdStrWriteSt_Tabl

		RET

;=======================================================
;"Проверка готовности после подачи питания"
DRAW_STEP_2:		
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl


		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#19
        mov     DPTR,#TEST35 ; 'Проверка готовности'
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#20
        mov     DPTR,#TEST36 ; 'после подачи питания'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================
;"Мин. интенсивность импульс 21ms"
DRAW_STEP_3_O:		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl


		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#16
        mov     DPTR,#TEST52 ; 'Подача импульсов'
        lcall   LcdStrWriteSt_Tabl


		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#18
        mov     DPTR,#TEST54 ; 'длительностью 21мс'
        lcall   LcdStrWriteSt_Tabl
		
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#17
        mov     DPTR,#TEST70 ; 'с уровнем сигнала'
        lcall   LcdStrWriteSt_Tabl
		
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#11
        mov     DPTR,#TEST46 ; 'ниже порога'
        lcall   LcdStrWriteSt_Tabl
		
		RET

;=======================================================


;=======================================================
;"ПОДАЧА ИМПУЛЬСОВ ДЛИТЕЛЬНОСТЬЮ 12ms"
DRAW_STEP_3_F:		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#16
        mov     DPTR,#TEST52 ; 'Подача импульсов'
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#18
        mov     DPTR,#TEST53 ; 'длительностью 12мс'
        lcall   LcdStrWriteSt_Tabl


		RET

;=======================================================



;=======================================================
;"Макс. интенсивность 12ms"
DRAW_STEP_4_O:		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#16
        mov     DPTR,#TEST52 ; 'Подача импульсов'
        lcall   LcdStrWriteSt_Tabl


		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#18
        mov     DPTR,#TEST53 ; 'длительностью 12мс'
        lcall   LcdStrWriteSt_Tabl
		
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#17
        mov     DPTR,#TEST70 ; 'с уровнем сигнала'
        lcall   LcdStrWriteSt_Tabl
		
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#11
        mov     DPTR,#TEST47 ; 'выше порога'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================


;=======================================================
;"ПОДАЧА ИМПУЛЬСОВ ДЛИТЕЛЬНОСТЬЮ 21ms"
DRAW_STEP_4_F:		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#16
        mov     DPTR,#TEST52 ; 'Подача импульсов'
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#18
        mov     DPTR,#TEST54 ; 'длительностью 21мс'
        lcall   LcdStrWriteSt_Tabl


		RET
;=======================================================



;=======================================================
;"Макс. интенсивность 21ms"
DRAW_STEP_5_O:		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#16
        mov     DPTR,#TEST52 ; 'Подача импульсов'
        lcall   LcdStrWriteSt_Tabl


		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#18
        mov     DPTR,#TEST54 ; 'длительностью 21мс'
        lcall   LcdStrWriteSt_Tabl
		
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#17
        mov     DPTR,#TEST70 ; 'с уровнем сигнала'
        lcall   LcdStrWriteSt_Tabl
		
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#11
        mov     DPTR,#TEST47 ; 'выше порога'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================


;=======================================================
;"ПОДАЧА ИМПУЛЬСОВ ДЛИТЕЛЬНОСТЬЮ 300ms"
DRAW_STEP_5_F:		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#16
        mov     DPTR,#TEST52 ; 'Подача импульсов'
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#19
        mov     DPTR,#TEST55 ; 'длительностью 300мс'
        lcall   LcdStrWriteSt_Tabl


		RET
;=======================================================




;=======================================================
;"Макс. интенсивность 300ms"
DRAW_STEP_6_O:		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#16
        mov     DPTR,#TEST52 ; 'Подача импульсов'
        lcall   LcdStrWriteSt_Tabl


		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#19
        mov     DPTR,#TEST55 ; 'длительностью 300мс'
        lcall   LcdStrWriteSt_Tabl
		
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#17
        mov     DPTR,#TEST70 ; 'с уровнем сигнала'
        lcall   LcdStrWriteSt_Tabl
		
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#11
        mov     DPTR,#TEST47 ; 'выше порога'
        lcall   LcdStrWriteSt_Tabl

		RET

;=======================================================



;=======================================================
;"ПОДАЧА ИМПУЛЬСОВ ДЛИТЕЛЬНОСТЬЮ 1100ms"
DRAW_STEP_6_F:		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#16
        mov     DPTR,#TEST52 ; 'Подача импульсов'
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#20
        mov     DPTR,#TEST56 ; 'длительностью 1100мс'
        lcall   LcdStrWriteSt_Tabl


		RET
;=======================================================




;=======================================================
;"Макс. интенсивность 1100ms"
DRAW_STEP_7_O:		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#16
        mov     DPTR,#TEST52 ; 'Подача импульсов'
        lcall   LcdStrWriteSt_Tabl


		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#20
        mov     DPTR,#TEST56 ; 'длительностью 1100мс'
        lcall   LcdStrWriteSt_Tabl
		
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#17
        mov     DPTR,#TEST70 ; 'с уровнем сигнала'
        lcall   LcdStrWriteSt_Tabl
		
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#11
        mov     DPTR,#TEST47 ; 'выше порога'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================
;"Выключение питания блока"
DRAW_STEP_8_O:		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl


		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#18
        mov     DPTR,#TEST39 ; 'Выключение питания'
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#5
        mov     DPTR,#TEST40 ; 'блока'
        lcall   LcdStrWriteSt_Tabl

		RET

;=======================================================

;=======================================================
; ОКНО УСПЕШНОГО ЗАВЕРШЕНИЯ АВТО ТЕСТИРОВАНИЯ
DRAW_TEST_OK:		

		mov     POZITION,#0
        mov     POZ_STR,#1
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST62 ; '---------------------'
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#4
        mov     POZ_STR,#3
        mov     KOL_SIMV,#13
        mov     DPTR,#TEST51 ; 'БЛОК ИСПРАВЕН'
        lcall   LcdStrWriteSt_Tabl

		; стираем "СОСТОЯНИЕ:НОРМА" 
		mov     POZITION,#0
        mov     POZ_STR,#7
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
		lcall   LcdStrWriteSt_Tabl

		RET

;=======================================================



DRAW_STOP_TEST_USER:
;=======================================================
; ОКНО ЗАВЕРШЕНИЯ АВТО РЕЖИМА ПОЛЬЗОВАТЛЕМ

		mov     POZITION,#0
        mov     POZ_STR,#1
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST62 ; '---------------------'
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#4
        mov     POZ_STR,#3
        mov     KOL_SIMV,#12
        mov     DPTR,#TEST58 ; 'ТЕСТ ПРЕРВАН'
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#5
        mov     POZ_STR,#4
        mov     KOL_SIMV,#10
        mov     DPTR,#TEST59 ; 'ОПЕРАТОРОМ'
        lcall   LcdStrWriteSt_Tabl

		; стираем "СОСТОЯНИЕ:НОРМА" 
		mov     POZITION,#0
        mov     POZ_STR,#7
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
		lcall   LcdStrWriteSt_Tabl

		RET

;=======================================================




; РИСУЕМ НАДПИСЬ "НАЖМИТЕ КЛАВИШУ КВИТИРОВАНИЕ"
DRAW_WAITING_FOR:		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#2
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#3
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#4
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl
		
		; стираем пред. надпись 
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST32 ; '                 '
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#4
        mov     POZ_STR,#2
        mov     KOL_SIMV,#15
        mov     DPTR,#TEST48 ; 'Нажмите клавишу'
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#4
        mov     POZ_STR,#3
        mov     KOL_SIMV,#14
        mov     DPTR,#TEST49 ; '"КВИТИРОВАНИЕ"'
        lcall   LcdStrWriteSt_Tabl

		RET

;=======================================================



;=============================
; РИСУЕМ ОБРАТНЫЙ ОТСЧЕТ 3- 2 -1
;===============================
DRAW_COUNT_3SEC:
		
		MOV  DPL,TIMER_KVIT
		MOV  DPH,#0

		CALL DECADA			; ВЫХОДНЫЕ ПАРАМЕТРЫ:
							; DECST, DECML- СТАРШИЕ И МЛАДШИЕ РАЗРЯДЫ;

		mov     POZITION,#9
        mov     POZ_STR,#5
        LCALL SET_POZITION
		MOV A,DECML
        lcall   LCD_OUTH0

		mov     POZITION,#11
        mov     POZ_STR,#5
        mov     KOL_SIMV,#6
        mov     DPTR,#TEST50 ; 'СЕК...'
        lcall   LcdStrWriteSt_Tabl

		RET
;=================================




;=======================================================
;РИСУЕМ НАДПИСЬ "12MS" ПОСЛЕ СЛОВА "ДЛИТЕЛЬНОСТЬ" 
DRAW_12MS:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#14
        mov     POZ_STR,#3
        mov     KOL_SIMV,#6
        mov     DPTR,#TEST4 ; '12MS  '
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================

;=======================================================
;РИСУЕМ НАДПИСЬ "21MS" ПОСЛЕ СЛОВА "ДЛИТЕЛЬНОСТЬ" 
DRAW_21MS:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#14
        mov     POZ_STR,#3
        mov     KOL_SIMV,#6
        mov     DPTR,#TEST5 ; '21MS  '
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================


;=======================================================
;РИСУЕМ НАДПИСЬ "300MS" ПОСЛЕ СЛОВА "ДЛИТЕЛЬНОСТЬ" 
DRAW_300MS:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#14
        mov     POZ_STR,#3
        mov     KOL_SIMV,#6
        mov     DPTR,#TEST6 ; '300MS '
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================

;=======================================================
;РИСУЕМ НАДПИСЬ "1100ms" ПОСЛЕ СЛОВА "ДЛИТЕЛЬНОСТЬ" 
DRAW_1100MS:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#14
        mov     POZ_STR,#3
        mov     KOL_SIMV,#6
        mov     DPTR,#TEST7 ; '1100MS'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================



;=======================================================
;РИСУЕМ НАДПИСЬ "Вых.1"  
DRAW_IN_1:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

		mov     POZITION,#3
        mov     POZ_STR,#3
        mov     KOL_SIMV,#5
        mov     DPTR,#TEST17 ; 'Вых.1'
        lcall   LcdStrWriteSt_Tabl

        ; ЕСЛИ ФЛАГ ОШИБКИ ВРЕМЕНИ СРАБ. УСТАНОВЛЕН, ТО
		; РИСУЕМ РЯДОМ СО ВХОДОМ "!"
		JB TIME_IN_ERROR,EXIT_DRAW_IN_1	 ; ПЕРЕХОД, ЕСЛИ 1
DRAW_IN_1_WITH_ERROR:
		mov     POZITION,#8
        mov     POZ_STR,#3
        mov     KOL_SIMV,#1
        mov     DPTR,#TEST57 ; '!'
        lcall   LcdStrWriteSt_Tabl

EXIT_DRAW_IN_1:
		RET
;=======================================================



;=======================================================
;РИСУЕМ НАДПИСЬ "Вых.2"  
DRAW_IN_2:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#3
        mov     POZ_STR,#4
        mov     KOL_SIMV,#5
        mov     DPTR,#TEST18 ; 'Вых.2'
        lcall   LcdStrWriteSt_Tabl

        ; ЕСЛИ ФЛАГ ОШИБКИ ВРЕМЕНИ СРАБ. УСТАНОВЛЕН, ТО
		; РИСУЕМ РЯДОМ СО ВХОДОМ "!"
		JB TIME_IN_ERROR,EXIT_DRAW_IN_2	 ; ПЕРЕХОД, ЕСЛИ 1
DRAW_IN_2_WITH_ERROR:
		mov     POZITION,#8
        mov     POZ_STR,#4
        mov     KOL_SIMV,#1
        mov     DPTR,#TEST57 ; '!'
        lcall   LcdStrWriteSt_Tabl

EXIT_DRAW_IN_2:
		RET
;=======================================================


;=======================================================
;РИСУЕМ НАДПИСЬ "Вых.3"  
DRAW_IN_3:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#3
        mov     POZ_STR,#5
        mov     KOL_SIMV,#5
        mov     DPTR,#TEST19 ; 'Вых.3'
        lcall   LcdStrWriteSt_Tabl
        ; ЕСЛИ ФЛАГ ОШИБКИ ВРЕМЕНИ СРАБ. УСТАНОВЛЕН, ТО
		; РИСУЕМ РЯДОМ СО ВХОДОМ "!"
		JB TIME_IN_ERROR,EXIT_DRAW_IN_3	 ; ПЕРЕХОД, ЕСЛИ 1
DRAW_IN_3_WITH_ERROR:
		mov     POZITION,#8
        mov     POZ_STR,#5
        mov     KOL_SIMV,#1
        mov     DPTR,#TEST57 ; '!'
        lcall   LcdStrWriteSt_Tabl

EXIT_DRAW_IN_3:
		RET
;=======================================================



;=======================================================
;РИСУЕМ НАДПИСЬ "Вых.4.1"  
DRAW_IN_4_1:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#11
        mov     POZ_STR,#3
        mov     KOL_SIMV,#7
        mov     DPTR,#TEST20 ; 'Вых.4.1'
        lcall   LcdStrWriteSt_Tabl
        
		; ЕСЛИ ФЛАГ ОШИБКИ ВРЕМЕНИ СРАБ. УСТАНОВЛЕН, ТО
		; РИСУЕМ РЯДОМ СО ВХОДОМ "!"
		JB TIME_IN_ERROR,EXIT_DRAW_IN_4_1	 ; ПЕРЕХОД, ЕСЛИ 1
DRAW_IN_4_1_WITH_ERROR:
		mov     POZITION,#18
        mov     POZ_STR,#3
        mov     KOL_SIMV,#1
        mov     DPTR,#TEST57 ; '!'
        lcall   LcdStrWriteSt_Tabl

EXIT_DRAW_IN_4_1:
		RET
;=======================================================



;=======================================================
;РИСУЕМ НАДПИСЬ "Вых.4.2"  
DRAW_IN_4_2:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#11
        mov     POZ_STR,#4
        mov     KOL_SIMV,#7
        mov     DPTR,#TEST21 ; 'Вых.4.2'
        lcall   LcdStrWriteSt_Tabl

		; ЕСЛИ ФЛАГ ОШИБКИ ВРЕМЕНИ СРАБ. УСТАНОВЛЕН, ТО
		; РИСУЕМ РЯДОМ СО ВХОДОМ "!"
		JB TIME_IN_ERROR,EXIT_DRAW_IN_4_2	 ; ПЕРЕХОД, ЕСЛИ 1
DRAW_IN_4_2_WITH_ERROR:
		mov     POZITION,#18
        mov     POZ_STR,#4
        mov     KOL_SIMV,#1
        mov     DPTR,#TEST57 ; '!'
        lcall   LcdStrWriteSt_Tabl

EXIT_DRAW_IN_4_2:
		RET
;=======================================================



;=======================================================
;РИСУЕМ НАДПИСЬ "Отказ"  
DRAW_IN_NDZ:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#11
        mov     POZ_STR,#5
        mov     KOL_SIMV,#5
        mov     DPTR,#TEST22 ; 'Отказ'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================


;=======================================================
;РИСУЕМ НАДПИСЬ "---" ВЕЗДЕ 
DRAW_IN_NOT_ALL:
	   	JNB 	FLAG_SERVICE_MODE,EXIT_DRAW_IN_NOT_ALL ;ЕСЛИ СЕРВ.РЕЖИМ - НЕ РИСУЕМ '---'
													   ; ПОЧТИ СРАЗУ ВЫХОДИМ НАХРЕН
		clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#3
        mov     POZ_STR,#3
        mov     KOL_SIMV,#8
        mov     DPTR,#TEST41 ; 'Вых.1'
        lcall   LcdStrWriteSt_Tabl

        mov     POZITION,#3
        mov     POZ_STR,#4
        mov     KOL_SIMV,#8
        mov     DPTR,#TEST41 ; 'Вых.2'
        lcall   LcdStrWriteSt_Tabl

        mov     POZITION,#3
        mov     POZ_STR,#5
        mov     KOL_SIMV,#8
        mov     DPTR,#TEST41 ; 'Вых.3'
        lcall   LcdStrWriteSt_Tabl

        mov     POZITION,#11
        mov     POZ_STR,#3
        mov     KOL_SIMV,#8
        mov     DPTR,#TEST41 ; 'Вых.4.1'
        lcall   LcdStrWriteSt_Tabl
        
		mov     POZITION,#11
        mov     POZ_STR,#4
        mov     KOL_SIMV,#8
        mov     DPTR,#TEST41 ; 'Вых.4.2'
        lcall   LcdStrWriteSt_Tabl

        mov     POZITION,#11
        mov     POZ_STR,#5
        mov     KOL_SIMV,#8
        mov     DPTR,#TEST41 ; 'Отказ'
        lcall   LcdStrWriteSt_Tabl

		RET

EXIT_DRAW_IN_NOT_ALL:
		;ОБНУЛИМ ВРЕМЯ ВХОДА И НА ВЫХОД
		; ЭТО, ЕСЛИ МЫ В СЕРВИСНОМ РЕЖИМЕ
		MOV	TAB2ML,#0
		MOV TAB2ST,#0  ; ОБНУЛИМ ПЕРЕМЕННЫЕ TIMER2
		CALL DRAW_TIME_INPUT ; НАРИСУМ 000 MS
		
		RET
;=======================================================



;=======================================================
;РИСУЕМ НАДПИСЬ "CONST"  
DRAW_CONST:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#16
        mov     POZ_STR,#1
        mov     KOL_SIMV,#5
        mov     DPTR,#TEST12 ; 'const'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================

;=======================================================
;стираем НАДПИСЬ "CONST"  
DRAW_CLR:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#0
        mov     POZ_STR,#1
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST62 ; '---------------------'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================

;=======================================================
;РИСУЕМ  "*" ПОСЛЕ СЛОВА "XXMS" 
DRAW_STAR:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#20
        mov     POZ_STR,#3
        lcall   SET_POZITION
        mov     A,#'*' ; '*'
        lcall   LcdDataWriteSt

		RET
;=======================================================

;=======================================================
;СТИРАЕМ  "*" ПОСЛЕ СЛОВА "XXMS" 
DRAW_CLR_STAR:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#20
        mov     POZ_STR,#3
        lcall   SET_POZITION
        mov     A,#' ' 
        lcall   LcdDataWriteSt

		RET
;=======================================================

;=======================================================
;РИСУЕМ НОМЕР КАНАЛА ПОСЛЕ СЛОВА "КАНАЛ:" 
DRAW_CHN:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#14
        mov     POZ_STR,#2
        LCALL SET_POZITION
		mov     A,SEL_CHN
        lcall   LCD_OUTH0

		RET
;=======================================================

;=======================================================
;РИСУЕМ 'ниже порога' ПОСЛЕ СЛОВА "Сигнал:" 
DRAW_INTENS_MIN:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#8
        mov     POZ_STR,#7
        mov     KOL_SIMV,#11
        mov     DPTR,#TEST46 ; 'ниже порога'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================




;=======================================================
;РИСУЕМ 'ниже порога' ПОСЛЕ СЛОВА "Сигнал:" 
DRAW_INTENS_MAX:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#8
        mov     POZ_STR,#7
        mov     KOL_SIMV,#11
        mov     DPTR,#TEST47 ; 'выше порога'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================

;=======================================================
;СЛУЖЕБНАЯ РИСОВАЛКА
; В ЛЕВОМ НИЖНЕМ УГЛУ ВЫВОДИМ ЧЕРЕЗ ПРОБЕЛ СЛЕВА НАПРАВО 
;ЗНАЧЕНИЯ ПЕРЕМЕННЫХ TAB4ST TAB4ML
DRAW_TAB4:

	    
		clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#0
        mov     POZ_STR,#7
        LCALL SET_POZITION
		MOV A,TAB4ST
        lcall   LCD_OUTH

        mov     POZITION,#3
        mov     POZ_STR,#7
        LCALL SET_POZITION
		MOV A,TAB4ML
        lcall   LCD_OUTH

		RET
;=======================================================

;=======================================================
; РИСУЕМ ВРЕМЯ СРАБАТЫВАНИЯ ВЫХОДОВ ДУГА

DRAW_TIME_INPUT:
; ПРЕОБРАЗОВАНИЕ ЧИСЕЛ В ПЕРЕМЕННЫХ
; TAB2ML И TAB2ST ИЗ HEX В DEC C ПОМОЩЬЮ 
; ПРОЦЕДУРЫ DEC20		
		clr     Bit_Mode_12x4
        SETB     Bit_Mode_16x4	;16 символов х 4 строки
		
		MOV  DPL,TAB2ML
		MOV  DPH,TAB2ST  ; DPTR -ВХОДНЫЕ ПАРАМЕТРЫ ДЛЯ DEC20
		CALL DECADA			; ВЫХОДНЫЕ ПАРАМЕТРЫ:
							; DECST, DECML- СТАРШИЕ И МЛАДШИЕ РАЗРЯДЫ;

; УБЕРЕМ ЛИШНИЙ НОЛЬ В СТАРШЕМ РАЗРЯДЕ, ЕСЛИ ЧИСЛО <1000
; ЧТОБЫ НЕ БЫЛО ТАКОЙ ХЕРНИ: "0354", А БЫЛО ТАК "354"
		MOV A, DECST
		ANL A,#11110000B ; ЗАТРЕМ 4 МЛАДШИХ РАЗРЯДА
		JZ 	DRAW_DECST_999 ; ЕСЛИ В АСС НОЛЬ, ТО НОЛИК ЗАТИРАЕМ

; СОБСТВЕННО, РИСОВАНИЕ		
DRAW_DECST_1000:		; С НУЛЕМ В СТАРШЕМ РЯЗРЯДЕ 
		
		mov     POZITION,#5
        mov     POZ_STR,#4
        LCALL SET_POZITION
		MOV A,DECST
        lcall   LCD_OUTH
		JMP   DRAW_DECML

DRAW_DECST_999:			 ; БЕЗ НУЛЯ В СТАРШЕМ РЯЗРЯДЕ 
		
		mov     POZITION,#5
        mov     POZ_STR,#4
        LCALL SET_POZITION
		MOV A,DECST
        lcall   LCD_OUTH

; ЗАТРЕМ НОЛИК        
		mov     POZITION,#5
        mov     POZ_STR,#4
        mov     KOL_SIMV,#1
        mov     DPTR,#TEST15 ; ' '
        lcall   LcdStrWriteSt_Tabl

DRAW_DECML:	 
		
		mov     POZITION,#7
        mov     POZ_STR,#4
        LCALL SET_POZITION
		MOV A,DECML
        lcall   LCD_OUTH
		
		mov     POZITION,#10
        mov     POZ_STR,#4
        mov     KOL_SIMV,#2
        mov     DPTR,#TEST14 ; 'ms'
        lcall   LcdStrWriteSt_Tabl
		
		RET
;=======================================================


;=======================================================
;РИСУЕМ "ВКЛ."  В ПРАВОМ ВЕРХНЕМ УГЛУ
DRAW_ON:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#16
        mov     POZ_STR,#0
        mov     KOL_SIMV,#5
        mov     DPTR,#TEST42 ; 'ВКЛ. '
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================

;=======================================================
;РИСУЕМ "ВЫКЛ."  В ПРАВОМ ВЕРХНЕМ УГЛУ
DRAW_OFF:
	    clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4

        mov     POZITION,#16
        mov     POZ_STR,#0
        mov     KOL_SIMV,#5
        mov     DPTR,#TEST43 ; 'ВЫКЛ.'
        lcall   LcdStrWriteSt_Tabl

		RET
;=======================================================

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; ВЫДАЧА СИМВОЛА ЧЕРЕЗ UART
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Out Byte in UART    

UART:    
		CLR 	EA			; ЗАПРЕЩАЕМ ВСЕ ПРЕРЫВАНИЯ НАФИГ
		MOV     SBUF,A      ;Выдача символа в буффер UART
		JNB     TI,$        ;Ожидание готовности
        CLR     TI			; сброс флага готовности
		SETB EA				; СНОВА РАЗРЕШАЕМ ПРЕРЫВАНИЯ
		RET
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




;                #########################################################################
;               #                                                                       #
;              #        ПРОЦЕДУРЫ выбора канала ДУГИ в зависимости от состояния Гали   #      		  
;             #          Процедура используется при формировании импульсов    		  #
;            #       Входной параметр ACC. В АСС лежит десятичное число от #0 до #4	 #
;           #                 Выходной параметр - уже забитый порт P2				#
;          #           Р2 будет таким:											   #
;         #                           1111 1110 - 1 канал						  #
;        #                            1111 1101 - 2 канал						 #
;       #                            1111 1011 - 3 канал						#
;      #                         1111 0111 - 4 канал						   #
;     #                          1111 1111 - 0 канал						  #
;    #             + выбор интенсивности: 									 #
;   #                              INTENS=0-MAX->CLR P2.4					#
;  #                               INTENS=1-MIN->SETB P2.4				   #
; #########################################################################

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

SELECT_CHN:
		MOV A,SEL_CHN
IF_CHN1:
		
		CJNE	A,#1, IF_CHN2  ; ЕСЛИ В АСС ЧИСЛО "1", ТО
		MOV		P2,#11111110B  ; ВКЛЮЧАЕМ 1 КАНАЛ, ЕСЛИ НЕТ, ТО К СЛЕД.
		JMP		SELECT_INTENS
IF_CHN2:
		CJNE	A,#2, IF_CHN3
		MOV		P2,#11111101B
		JMP		SELECT_INTENS
IF_CHN3:
		CJNE	A,#3, IF_CHN4
		MOV		P2,#11111011B
		JMP		SELECT_INTENS
IF_CHN4:
		CJNE	A,#4, IF_CHN0
		MOV		P2,#11110111B
		JMP		SELECT_INTENS
IF_CHN0:
		CJNE	A,#0, SELECT_INTENS
		MOV		P2,#11111111B	; ЕСЛИ В АСС "0" ТО ОТРУБАЕМ ВСЕ КАНАЛЫ
		JMP		SELECT_INTENS
;-----------------------------------------
;выбор интенсивности
SELECT_INTENS:
		JNB	INTENS,SET_INTENS_MAX	; ЕСЛИ INTENS В 0, ТО CLR.P2.4
		

		SETB	P2.4				; ЕСЛИ INTENS В 1, ТО SETB.P2.4
		RET
SET_INTENS_MAX:



		CLR		P2.4
		RET			
		
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;                #########################################################################
;               #                                                                       #
;              #        Процедура опроса входов ДУГИ                                   #      		  
;             #          Процедура используется при формировании импульсов    		  #
;            #       Входной параметр P2	                                         #
;           #                 ;ВЫХОДНОЙ INPUT			 	                        #
;          #                   ; INPUT.0  - ВХ.1								   #
;         #                   ; INPUT.1  - ВХ.2									  #
;        #                      ; INPUT.2  - ВХ.3								 #
;       #                      ; INPUT.3  - ВХ.4.1								#
;      #                       ; INPUT.4  - ВХ.4.2							   #
;     #                        ; INPUT.5  - NDZ								  #
;    #########################################################################

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; В ПРОЦЕССЕ ТЕСТИРОВАНИЯ Я ПОСТОЯННО ОПРАШИВАЮ ВТУПУЮ КНОПКУ СБРОС
; ДЛЯ ЭТОГО Я ВКЛЮЧАЮ БУФЕР ВХОДОВ ОЕ_BTN1 И СЛУШАЮ НОГУ P2.7
; ЕСЛИ КНОПКА НАЖАТА, Я ЭКСТРЕННО ВЫХОЖУ ИЗ ДАННОЙ ПРОЦЕДУРЫ ПРОВЕРКИ ВХОДОВ ДУГИ (EXTRIM_EXIT)
; ВЫРУБАЮ ВСЕ ЧТО МОГУ И ВЫСТАВЛЯЮ БИТ RES. ПО НЕМУ Я ПОТОМ УЗНАЮ, ЧТО ПОЛЬЗОВАТЕЛЬ НАЖАЛ КНОПКУ СБРОС
; ВО ВРЕМЯ АВТО РЕЖИМА
; ВСЕ ЭТО НУЖНО ДЛЯ ЗАВЕРШЕНИЯ АВТО РЕЖИМА ПО НАЖАТИЮ КНОПКИ СБРОС
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; 			Опрос входов
;  
; Процедура используется при формировании импульсов
; 

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CHECK_INP:
		MOV	INPUT,#0FFH	  ; ПЕРЕМЕННУЮ ВХОДОВ В СТОК
		MOV	P2,#0FFH	  ; ШИНУ В СТОК НА ВСЯКИЙ ПОЖАРНЫЙ

; В ЭТИХ ПЕРЕМЕННЫХ БУДЕТ ХРАНИТЬСЯ ВРЕМЯ СРАБАТЫВАНИЯ ВХОДА		
		MOV	TAB2ML,#0
		MOV TAB2ST,#0 ; ОБНУЛЯЕМ ВРЕМЯ ВХОДА

; ЕСЛИ ЭТОТ ФЛАГ БУДЕТ УСТАНОВЛЕН (0) ТО ЗНАЧИТ ВРЕМЯ ВХОДА ДЕРЬМО		
		SETB TIME_IN_ERROR ; СБРОС ФЛАГА ОШИБКИ ВРЕМЕНИ ВХОДА

		SETB FLAG_NDZ_ERROR; ЕСЛИ НДЗ СРАБОТАЛ РАНЬШЕ ВХОДА, ТО ВЫСТАВЛЯЕМ В 0
	; ИСПОЛЬЗУЕТСЯ В ПРОЦЕДУРЕ ПРОВЕРКИ ВХОДОВ
		
		clr	OE_IN			; ВКЛЮЧИМ БУФЕР ВХОДОВ, СЛУШАЕМ...
		
		MOV TIME_1MS,#00H			; ОБНУЛИМ ПЕРЕМЕННУЮ ДЛЯ НАЧАЛА ОТСЧЕТА
						; TIME_1MS БУДЕТ ИСПОЛЬЗОВАНА ДЛЯ ЗАЩИТЫ ОТ ЗАВИСАНИЯ

;*****ТУТ МЫ ТУПО СЛУШАЕМ ЛИНИЮ ДО 1-ГО СРАБАТЫВАНИЯ ВХОДА*********************
;*********************************************************************************
LISTEN_INP:
		
		JNB	P2.0,GO_FIX_IN_1	; ЕСЛИ СРАБОТАЛ ВХ.1
		JNB	P2.1,GO_FIX_IN_2	; ЕСЛИ СРАБОТАЛ ВХ.2, ТО НА МЕТКУ SET_INPUT_2
		JNB	P2.2,GO_FIX_IN_3	; ЕСЛИ СРАБОТАЛ ВХ.3, ТО НА МЕТКУ SET_INPUT_3
		JNB	P2.3,GO_FIX_IN_4_1	; ЕСЛИ СРАБОТАЛ ВХ.4.1, ТО НА МЕТКУ SET_INPUT_4
		JNB	P2.4,GO_FIX_IN_4_2	; ЕСЛИ СРАБОТАЛ ВХ.4.2, ТО НА МЕТКУ SET_INPUT_5
		;JNB	P2.5,GO_FIX_IN_NDZ	; ЕСЛИ СРАБОТАЛ ндз, ТО НА МЕТКУ SET_INPUT_5

;///////////////////////////////////////////////////
; ДОПОЛНИТЕЛЬНАЯ ПРОВЕРКА НАЖАТИЯ КНОПКИ "СБРОС"
; ДЛЯ ВЫХОДА ИЗ АВТО РЕЖИМА
;//////////////////////////////////////////////////
		SETB	OE_IN	; ВЫРУБИМ БУФЕР ВХОДОВ НА ВРЕМЯ
		CLR OE_BTN1 ; ВКЛ. БУФЕР КНОПОК
		JNB P2.7,EXIT_RESET_LISTEN		
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		CLR	OE_IN	; ВРУБИМ СНОВА БУФЕР ВХОДОВ
;//////////////////////////////////////////////////

        ;***************************
		; ЗАЩИТА ОТ ЗАВИСАНИЯ
		; ЕСЛИ ПОСЛЕ НАЖАТИЯ КНОПКИ НИ ОДИН ИЗ ВХОДОВ НЕ СРАБОТАЛ
		; ТО ЧЕРЕЗ 30 МС Я ВЫХОЖУ
		; 1EH = 30 MS
		
		CALL delay_1_ms

		INC TIME_1MS

		MOV A,TIME_1MS
		CJNE A,#30,LISTEN_INP
		
		; ЕСЛИ МЫ В АВТО РЕЖИМЕ, ТО ИДЕМ БЕЗ ДОП ОПРОСА НДЗ
		JNB FLAG_AUTO,GO_STOP_SAVE 
		; ЕСЛИ ВСЕ, КРОМЕ 1100МС, ТО ИДЕМ БЕЗ ОПРОСА НДЗ
		JNB FLAG_OPROS_NDZ,OPROS_NDZ_AFTER_30MS 
		
GO_STOP_SAVE:

		JMP		STOP_SAVE_INP

; ДОСРОЧНЫЙ ВЫХОД ЕСЛИ НАЖАТА КНОПКА СБРОС
EXIT_RESET_LISTEN:
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		JMP EXTRIM_EXIT

;==================================================================		
; СЮДА МЫ ПОПАДЕМ В СЛУЧАЕ, ЕСЛИ БЫЛА НАЖАТА КНОПКА "1100MS"
; ИЛИ СИГНАЛ CONST
; A ОПТОРЕЛЕ ДУГИ НЕ СРАБОТАЛИ (КВИТ НЕ НАЖАТА ИЛИ ПИТАНИЯ НЕТ)
; ВОТ МЫ И ПРОСКАНИМ НДЗ ДО КОНЦА ИМПУЛЬСА 1100МС
OPROS_NDZ_AFTER_30MS:
		
		JB TR0,$ ; ЖДЕМ, ПОКА ИМПУЛЬС НЕ ЗАКОНЧИТСЯ
		
		MOV TIME_1MS,#0
OPROS2_NDZ_AFTER_30MS:
		JNB	P2.5,GO_SET_IN_NDZ_2 ; ЕСЛИ СРАБОТАЛ ндз ТО  НА МЕТКУ
		
		; ДИСКРЕТНОСТЬ ОПРОСА НДЗ
		CALL delay_1_ms
		
		INC TIME_1MS ;+1
		
		MOV A,TIME_1MS
        CJNE A,#50,OPROS2_NDZ_AFTER_30MS ; СРАВНИВАЕМ ПЕРЕМННУЮ TIME_1MS С #50
										 ; если НЕ РАВНО ,ТО СНОВА СЛУШАЕМ НДЗ
		;ЕСЛИ РАВНО. ТО ВЫХОДИМ
		JMP		STOP_SAVE_INP

; УСТАНВЛИВАЕМ ФЛАГ В ПЕРЕМЕННОЙ INPUT И ВЫХОДИМ
GO_SET_IN_NDZ_2:
		JMP		SET_IN_NDZ_2
;==================================================================		

; ЭТО ЗАМОРОЧКА НУЖНА ПОТОМУ, ЧТО ПЕРЕХОД JNB НЕ ДОСТАЕТ
GO_FIX_IN_1: 	JMP  FIX_IN_1
GO_FIX_IN_2: 	JMP  FIX_IN_2
GO_FIX_IN_3: 	JMP  FIX_IN_3
GO_FIX_IN_4_1:  JMP  FIX_IN_4_1
GO_FIX_IN_4_2: 	JMP  FIX_IN_4_2
GO_FIX_IN_NDZ: 	JMP  FIX_IN_NDZ
;**********************************************************
		


////////////////////////////////////////////////////////////////////////////
;**** А ВОТ ТУТ УЖЕ ОБРАБАТЫВАЕМ КАЖДЫЙ КОНКРЕТНЫЙ СРАБОТАВШИЕЙ ВХОД *******
;**** ПО СВОЕМУ АЛГОРИТМУ*********************
/////////////////////////////////////////////////////////////////////////////


;=============ВХ.1===============================
;================================================
; СРАБОТАЛ ВХ.1
FIX_IN_1:
		CALL SET_IN_1			;УСТАНОВИТЬ БИТ
;=========================================
; == Загрузка таймера T/C2 начальным кодом для формирования интервала 1 МС.=
;=============================================================================
        lcall   load_tc2       ; Останов и перезагрузка внутpеннего   ;*
                              ; таймеpа/счетчика 2. Сброс флага TF2. ;*
        ;***********************************************************;*
        mov     TAB2ST,#0
        mov     TAB2ML,#0; "Очистка" накопительных переменных временного параметра
        ;---------------; инкрементируемых на +1 после обработки процедуры прерывания
                       ; Diskret_Time2 по переполнению флага tf2 внутpеннего таймеpа/счетчика 2.
		setb    tr2   ; Запуск внутpеннего таймеpа/счетчика 2. ОТСЧЕТ ПО 1МС ПОШЕЛ!
        ;====================================================

LISTEN_WITHOUT_1:
;*********************
		JB	P2.1,NEXT_IN_3	; ЕСЛИ СРАБОТАЛ ВХ.2, ТО НА МЕТКУ SET_INPUT_2
		CALL	SET_IN_2
;*********************
NEXT_IN_3:
		JB	P2.2,NEXT_IN_4_1	; ЕСЛИ СРАБОТАЛ ВХ.3, ТО НА МЕТКУ SET_INPUT_3
		CALL	SET_IN_3
;*********************
NEXT_IN_4_1:
		JB	P2.3,NEXT_IN_4_2	; ЕСЛИ СРАБОТАЛ ВХ.4.1, ТО НА МЕТКУ SET_INPUT_4
		CALL SET_IN_4_1
;*********************
NEXT_IN_4_2:
		JB	P2.4,NEXT_IN_NDZ	; ЕСЛИ СРАБОТАЛ ВХ.4.2, ТО НА МЕТКУ SET_INPUT_5
		CALL SET_IN_4_2
;*********************
NEXT_IN_NDZ:
		JB	P2.5,CHECK_FIX_IN_1	; ЕСЛИ СРАБОТАЛ ндз, ТО НА МЕТКУ SET_INPUT_5
		CALL SET_IN_NDZ




; ПРОВЕРКА, НЕ ОТПУСТИЛО ЛИ ВХОД
CHECK_FIX_IN_1:

;///////////////////////////////////////////////////
; ДОПОЛНИТЕЛЬНАЯ ПРОВЕРКА НАЖАТИЯ КНОПКИ "СБРОС"
; ДЛЯ ВЫХОДА ИЗ АВТО РЕЖИМА
;//////////////////////////////////////////////////
		SETB	OE_IN	; ВЫРУБИМ БУФЕР ВХОДОВ НА ВРЕМЯ
		CLR OE_BTN1 ; ВКЛ. БУФЕР КНОПОК
		JNB P2.7,EXIT_RESET_1		
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		CLR	OE_IN	; ВРУБИМ СНОВА БУФЕР ВХОДОВ
;//////////////////////////////////////////////////


		JNB	P2.0,PROTECT_IN1	; ЕСЛИ ВХОД 1 ЕЩЕ РАБОТАЕТ, ТО К ЗАЩИТЕ ОТ ЗАВИСАНИЯ


; НОРМАЛЬНЫЙ ВЫХОД С ФИКСАЦИЕЙ СРАБАТЫВАНИЯ	БЕЗ ОШИБКИ
EXIT_LISTEN_WITH_1:
		JMP STOP_CHECK_IN	; ЗАВЕРШЕНИЕ СКАНА	

; ДОСРОЧНЫЙ ВЫХОД И3 АВТО РЕЖИМА. КАНАЛ1
EXIT_RESET_1:
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		JMP EXTRIM_EXIT
;================================================================================
		


PROTECT_IN1:
;**********************************************************
;**********************************************************
; ЗАЩИТА ОТ ЗАВИСАНИЯ ВХОДА В ЗАМКНУТОМ СОСТОЯНИИ
; АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ TAB2ST И TAB2ML
; ЕСЛИ ПРОШЛО 1,5 СЕКУНДЫ (TAB2ST=5H  TAB2ML=DCH) ТО ВЫХОДИМ

;***ПРОВЕРКА ПЕРЕМЕННЫХ TAB4ST,TAB4ML Прошло ЛИ 1500 мс.? ***
; TAB2ST=05H 	TAB2ML=DCH 	 (1500=5DCH)
		CLR		C								  ; 1 cl.
		mov     A,TAB2ML						  ; 1 cl.
		SUBB	A,#0DCH		;TAB2ML-0DCH		  ; 1 cl.
		MOV		DPL,A		;РЕЗУЛЬТАТ В DPL	  ; 1 cl.
		
		CLR		C								  ; 1 cl.
		mov     A,TAB2ST						  ; 1 cl.
		SUBB	A,#05H		;TAB2ST-05H		  	  ; 1 cl.

;ЛОГ. ИЛИ МЕЖДУ РЕЗУЛЬТАТАМИ
; ЕСЛИ СЧЕТЧИК ДОСТИГ 05DCH, ТО В АСС БУДЕТ НОЛЬ		
		ORL		A,DPL

;ПЕРЕХОД, ЕСЛИ АСС РАВЕН НУЛЮ
		JZ		EXIT_LISTEN_WITH_1			  ; 2 cl. 
;ПЕРЕХОД, ЕСЛИ АСС НЕ РАВЕН НУЛЮ
		JMP		LISTEN_WITHOUT_1				  ; 2 cl.
;************************************************************
;**********************************************************







;=============ВХ.2===============================
;================================================
; СРАБОТАЛ ВХ.2
FIX_IN_2:
		CALL SET_IN_2			;УСТАНОВИТЬ БИТ


;=========================================
; == Загрузка таймера T/C2 начальным кодом для формирования интервала 1 МС.=
;=============================================================================
        lcall   load_tc2       ; Останов и перезагрузка внутpеннего   ;*
                              ; таймеpа/счетчика 2. Сброс флага TF2. ;*
        ;***********************************************************;*
        mov     TAB2ST,#0
        mov     TAB2ML,#0; "Очистка" накопительных переменных временного параметра
        ;---------------; инкрементируемых на +1 после обработки процедуры прерывания
                       ; Diskret_Time2 по переполнению флага tf2 внутpеннего таймеpа/счетчика 2.
		setb    tr2   ; Запуск внутpеннего таймеpа/счетчика 2. ОТСЧЕТ ПО 1МС ПОШЕЛ!
        ;====================================================

; СЛУШАЕМ ВСЕ ВХОДЫ, КРОМЕ СРАБОТАВШЕГО
LISTEN_WITHOUT_2:
;*********************
		JB	P2.0,NEXT2_IN_3	; 
		CALL	SET_IN_1
;*********************
NEXT2_IN_3:
		JB	P2.2,NEXT2_IN_4_1	; 
		CALL	SET_IN_3
;*********************
NEXT2_IN_4_1:
		JB	P2.3,NEXT2_IN_4_2	; 
		CALL SET_IN_4_1
;*********************
NEXT2_IN_4_2:
		JB	P2.4,NEXT2_IN_NDZ	;
		CALL SET_IN_4_2
;*********************
NEXT2_IN_NDZ:
		JB	P2.5,CHECK_FIX_IN_2	; 
		CALL SET_IN_NDZ



; ПРОВЕРКА, НЕ ОТПУСТИЛО ЛИ ВХОД
CHECK_FIX_IN_2:

;///////////////////////////////////////////////////
; ДОПОЛНИТЕЛЬНАЯ ПРОВЕРКА НАЖАТИЯ КНОПКИ "СБРОС"
; ДЛЯ ВЫХОДА ИЗ АВТО РЕЖИМА
;//////////////////////////////////////////////////
		SETB	OE_IN	; ВЫРУБИМ БУФЕР ВХОДОВ НА ВРЕМЯ
		CLR OE_BTN1 ; ВКЛ. БУФЕР КНОПОК
		JNB P2.7,EXIT_RESET_2		
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		CLR	OE_IN	; ВРУБИМ СНОВА БУФЕР ВХОДОВ
;//////////////////////////////////////////////////


		JNB	P2.1,PROTECT_IN2 ; ЕСЛИ ВХОД 1 ЕЩЕ РАБОТАЕТ, ТО ОБРАТНО СЛУШАТЬ ЛИНИЮ


EXIT_LISTEN_WITHOUT_2:
		JMP STOP_CHECK_IN	; ЗАВЕРШЕНИЕ СКАНА	
							; ОСТАНОВКА ТАЙМЕРА 2
							; ЗАКРЫТИЕ РЕГИСТРА

; ДОСРОЧНЫЙ ВЫХОД И3 АВТО РЕЖИМА. КАНАЛ2
EXIT_RESET_2:
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		JMP EXTRIM_EXIT


PROTECT_IN2:
;**********************************************************
;**********************************************************
; ЗАЩИТА ОТ ЗАВИСАНИЯ ВХОДА В ЗАМКНУТОМ СОСТОЯНИИ
; АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ TAB2ST И TAB2ML
; ЕСЛИ ПРОШЛО 1,5 СЕКУНДЫ (TAB2ST=5H  TAB2ML=DCH) ТО ВЫХОДИМ

;***ПРОВЕРКА ПЕРЕМЕННЫХ TAB4ST,TAB4ML Прошло ЛИ 1500 мс.? ***
; TAB2ST=05H 	TAB2ML=DCH 	 (1500=5DCH)
		CLR		C								  ; 1 cl.
		mov     A,TAB2ML						  ; 1 cl.
		SUBB	A,#0DCH		;TAB2ML-0DCH		  ; 1 cl.
		MOV		DPL,A		;РЕЗУЛЬТАТ В DPL	  ; 1 cl.
		
		CLR		C								  ; 1 cl.
		mov     A,TAB2ST						  ; 1 cl.
		SUBB	A,#05H		;TAB2ST-05H		  	  ; 1 cl.

;ЛОГ. ИЛИ МЕЖДУ РЕЗУЛЬТАТАМИ
; ЕСЛИ СЧЕТЧИК ДОСТИГ 05DCH, ТО В АСС БУДЕТ НОЛЬ		
		ORL		A,DPL

;ПЕРЕХОД, ЕСЛИ АСС РАВЕН НУЛЮ
		JZ		EXIT_LISTEN_WITHOUT_2			  ; 2 cl. 
;ПЕРЕХОД, ЕСЛИ АСС НЕ РАВЕН НУЛЮ
		JMP		LISTEN_WITHOUT_2				  ; 2 cl.
;************************************************************
;**********************************************************







;=============ВХ.3===============================
;================================================
; СРАБОТАЛ ВХ.3
FIX_IN_3:
		CALL SET_IN_3			;УСТАНОВИТЬ БИТ
;=========================================
; == Загрузка таймера T/C2 начальным кодом для формирования интервала 1 МС.=
;=============================================================================
        lcall   load_tc2       ; Останов и перезагрузка внутpеннего   ;*
                              ; таймеpа/счетчика 2. Сброс флага TF2. ;*
        ;***********************************************************;*
        mov     TAB2ST,#0
        mov     TAB2ML,#0; "Очистка" накопительных переменных временного параметра
        ;---------------; инкрементируемых на +1 после обработки процедуры прерывания
                       ; Diskret_Time2 по переполнению флага tf2 внутpеннего таймеpа/счетчика 2.
		setb    tr2   ; Запуск внутpеннего таймеpа/счетчика 2. ОТСЧЕТ ПО 1МС ПОШЕЛ!
        ;====================================================

; СЛУШАЕМ ВСЕ ВХОДЫ, КРОМЕ СРАБОТАВШЕГО
LISTEN_WITHOUT_3:
;*********************
		JB	P2.0,NEXT3_IN_2	; 
		CALL	SET_IN_1
;*********************
NEXT3_IN_2:
		JB	P2.1,NEXT3_IN_4_1	; 
		CALL	SET_IN_2
;*********************
NEXT3_IN_4_1:
		JB	P2.3,NEXT3_IN_4_2	; 
		CALL SET_IN_4_1
;*********************
NEXT3_IN_4_2:
		JB	P2.4,NEXT3_IN_NDZ	;
		CALL SET_IN_4_2
;*********************
NEXT3_IN_NDZ:
		JB	P2.5,CHECK_FIX_IN_3	; 
		CALL SET_IN_NDZ

; ПРОВЕРКА, НЕ ОТПУСТИЛО ЛИ ВХОД
CHECK_FIX_IN_3:

;///////////////////////////////////////////////////
; ДОПОЛНИТЕЛЬНАЯ ПРОВЕРКА НАЖАТИЯ КНОПКИ "СБРОС"
; ДЛЯ ВЫХОДА ИЗ АВТО РЕЖИМА
;//////////////////////////////////////////////////
		SETB	OE_IN	; ВЫРУБИМ БУФЕР ВХОДОВ НА ВРЕМЯ
		CLR OE_BTN1 ; ВКЛ. БУФЕР КНОПОК
		JNB P2.7,EXIT_RESET_3		
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		CLR	OE_IN	; ВРУБИМ СНОВА БУФЕР ВХОДОВ
;//////////////////////////////////////////////////


		JNB	P2.2,PROTECT_IN3	; ЕСЛИ ВХОД 1 ЕЩЕ РАБОТАЕТ, ТО ОБРАТНО СЛУШАТЬ ЛИНИЮ


EXIT_LISTEN_WITHOUT_3:
		JMP STOP_CHECK_IN	; ЗАВЕРШЕНИЕ СКАНА	
							; ОСТАНОВКА ТАЙМЕРА 2
							; ЗАКРЫТИЕ РЕГИСТРА

; ДОСРОЧНЫЙ ВЫХОД И3 АВТО РЕЖИМА. КАНАЛ2
EXIT_RESET_3:
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		JMP EXTRIM_EXIT


PROTECT_IN3:
;**********************************************************
;**********************************************************
; ЗАЩИТА ОТ ЗАВИСАНИЯ ВХОДА В ЗАМКНУТОМ СОСТОЯНИИ
; АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ TAB2ST И TAB2ML
; ЕСЛИ ПРОШЛО 1,5 СЕКУНДЫ (TAB2ST=5H  TAB2ML=DCH) ТО ВЫХОДИМ

;***ПРОВЕРКА ПЕРЕМЕННЫХ TAB4ST,TAB4ML Прошло ЛИ 1500 мс.? ***
; TAB2ST=05H 	TAB2ML=DCH 	 (1500=5DCH)
		CLR		C								  ; 1 cl.
		mov     A,TAB2ML						  ; 1 cl.
		SUBB	A,#0DCH		;TAB2ML-0DCH		  ; 1 cl.
		MOV		DPL,A		;РЕЗУЛЬТАТ В DPL	  ; 1 cl.

		CLR		C								  ; 1 cl.
		mov     A,TAB2ST						  ; 1 cl.
		SUBB	A,#05H		;TAB2ST-05H		  	  ; 1 cl.

;ЛОГ. ИЛИ МЕЖДУ РЕЗУЛЬТАТАМИ
; ЕСЛИ СЧЕТЧИК ДОСТИГ 05DCH, ТО В АСС БУДЕТ НОЛЬ		
		ORL		A,DPL

;ПЕРЕХОД, ЕСЛИ АСС РАВЕН НУЛЮ
		JZ		EXIT_LISTEN_WITHOUT_3			  ; 2 cl. 
;ПЕРЕХОД, ЕСЛИ АСС НЕ РАВЕН НУЛЮ
		JMP		LISTEN_WITHOUT_3				  ; 2 cl.
;************************************************************
;**********************************************************







;=============ВХ.4.1===============================
;================================================
; СРАБОТАЛ ВХ.4.1
FIX_IN_4_1:
		CALL SET_IN_4_1			;УСТАНОВИТЬ БИТ
;=========================================
; == Загрузка таймера T/C2 начальным кодом для формирования интервала 1 МС.=
;=============================================================================
        lcall   load_tc2       ; Останов и перезагрузка внутpеннего   ;*
                              ; таймеpа/счетчика 2. Сброс флага TF2. ;*
        ;***********************************************************;*
        mov     TAB2ST,#0
        mov     TAB2ML,#0; "Очистка" накопительных переменных временного параметра
        ;---------------; инкрементируемых на +1 после обработки процедуры прерывания
                       ; Diskret_Time2 по переполнению флага tf2 внутpеннего таймеpа/счетчика 2.
		setb    tr2   ; Запуск внутpеннего таймеpа/счетчика 2. ОТСЧЕТ ПО 1МС ПОШЕЛ!
        ;====================================================

; СЛУШАЕМ ВСЕ ВХОДЫ, КРОМЕ СРАБОТАВШЕГО
LISTEN_WITHOUT_4_1:
;*********************
		JB	P2.0,NEXT4_IN_2	; 
		CALL	SET_IN_1
;*********************
NEXT4_IN_2:
		JB	P2.1,NEXT4_IN_3	; 
		CALL	SET_IN_2
;*********************
NEXT4_IN_3:
		JB	P2.2,NEXT4_IN_4_2	; 
		CALL	SET_IN_3
;*********************
NEXT4_IN_4_2:
		JB	P2.4,NEXT4_IN_NDZ	;
		CALL SET_IN_4_2
;*********************
NEXT4_IN_NDZ:
		JB	P2.5,CHECK_FIX_IN_4_1	; 
		CALL SET_IN_NDZ


; ПРОВЕРКА, НЕ ОТПУСТИЛО ЛИ ВХОД
CHECK_FIX_IN_4_1:

;///////////////////////////////////////////////////
; ДОПОЛНИТЕЛЬНАЯ ПРОВЕРКА НАЖАТИЯ КНОПКИ "СБРОС"
; ДЛЯ ВЫХОДА ИЗ АВТО РЕЖИМА
;//////////////////////////////////////////////////
		SETB	OE_IN	; ВЫРУБИМ БУФЕР ВХОДОВ НА ВРЕМЯ
		CLR OE_BTN1 ; ВКЛ. БУФЕР КНОПОК
		JNB P2.7,EXIT_RESET_4_1		
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		CLR	OE_IN	; ВРУБИМ СНОВА БУФЕР ВХОДОВ
;//////////////////////////////////////////////////


		JNB	P2.3,PROTECT_IN4_1	; ЕСЛИ ВХОД 4.1 ЕЩЕ РАБОТАЕТ, ТО ОБРАТНО СЛУШАТЬ ЛИНИЮ

EXIT_LISTEN_WITHOUT_4_1:
		JMP STOP_CHECK_IN	; ЗАВЕРШЕНИЕ СКАНА	
							; ОСТАНОВКА ТАЙМЕРА 2
							; ЗАКРЫТИЕ РЕГИСТРА
; ДОСРОЧНЫЙ ВЫХОД И3 АВТО РЕЖИМА. КАНАЛ2
EXIT_RESET_4_1:
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		JMP EXTRIM_EXIT

PROTECT_IN4_1:
;**********************************************************
;**********************************************************
; ЗАЩИТА ОТ ЗАВИСАНИЯ ВХОДА В ЗАМКНУТОМ СОСТОЯНИИ
; АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ TAB2ST И TAB2ML
; ЕСЛИ ПРОШЛО 1,5 СЕКУНДЫ (TAB2ST=5H  TAB2ML=DCH) ТО ВЫХОДИМ

;***ПРОВЕРКА ПЕРЕМЕННЫХ TAB4ST,TAB4ML Прошло ЛИ 1500 мс.? ***
; TAB2ST=05H 	TAB2ML=DCH 	 (1500=5DCH)
		CLR		C								  ; 1 cl.
		mov     A,TAB2ML						  ; 1 cl.
		SUBB	A,#0DCH		;TAB2ML-0DCH		  ; 1 cl.
		MOV		DPL,A		;РЕЗУЛЬТАТ В DPL	  ; 1 cl.
		
		CLR		C								  ; 1 cl.
		mov     A,TAB2ST						  ; 1 cl.
		SUBB	A,#05H		;TAB2ST-05H		  	  ; 1 cl.

;ЛОГ. ИЛИ МЕЖДУ РЕЗУЛЬТАТАМИ
; ЕСЛИ СЧЕТЧИК ДОСТИГ 05DCH, ТО В АСС БУДЕТ НОЛЬ		
		ORL		A,DPL

;ПЕРЕХОД, ЕСЛИ АСС РАВЕН НУЛЮ
		JZ		EXIT_LISTEN_WITHOUT_4_1			  ; 2 cl. 
;ПЕРЕХОД, ЕСЛИ АСС НЕ РАВЕН НУЛЮ
		JMP		LISTEN_WITHOUT_4_1				  ; 2 cl.
;************************************************************
;**********************************************************




;=============ВХ.4.2===============================
;================================================
; СРАБОТАЛ ВХ.4.2
FIX_IN_4_2:
		CALL SET_IN_4_2			;УСТАНОВИТЬ БИТ
;=========================================
; == Загрузка таймера T/C2 начальным кодом для формирования интервала 1 МС.=
;=============================================================================
        lcall   load_tc2       ; Останов и перезагрузка внутpеннего   ;*
                              ; таймеpа/счетчика 2. Сброс флага TF2. ;*
        ;***********************************************************;*
        mov     TAB2ST,#0
        mov     TAB2ML,#0; "Очистка" накопительных переменных временного параметра
        ;---------------; инкрементируемых на +1 после обработки процедуры прерывания
                       ; Diskret_Time2 по переполнению флага tf2 внутpеннего таймеpа/счетчика 2.
		setb    tr2   ; Запуск внутpеннего таймеpа/счетчика 2. ОТСЧЕТ ПО 1МС ПОШЕЛ!
        ;====================================================

; СЛУШАЕМ ВСЕ ВХОДЫ, КРОМЕ СРАБОТАВШЕГО
LISTEN_WITHOUT_4_2:
;*********************
		JB	P2.0,NEXT5_IN_2	; 
		CALL	SET_IN_1
;*********************
NEXT5_IN_2:
		JB	P2.1,NEXT5_IN_3	; 
		CALL	SET_IN_2
;*********************
NEXT5_IN_3:
		JB	P2.2,NEXT5_IN_4_1	; 
		CALL	SET_IN_3
;*********************
NEXT5_IN_4_1:
		JB	P2.3,NEXT5_IN_NDZ	;
		CALL SET_IN_4_1
;*********************
NEXT5_IN_NDZ:
		JB	P2.5,CHECK_FIX_IN_4_2	; 
		CALL SET_IN_NDZ

; ПРОВЕРКА, НЕ ОТПУСТИЛО ЛИ ВХОД
CHECK_FIX_IN_4_2:

;///////////////////////////////////////////////////
; ДОПОЛНИТЕЛЬНАЯ ПРОВЕРКА НАЖАТИЯ КНОПКИ "СБРОС"
; ДЛЯ ВЫХОДА ИЗ АВТО РЕЖИМА
;//////////////////////////////////////////////////
		SETB	OE_IN	; ВЫРУБИМ БУФЕР ВХОДОВ НА ВРЕМЯ
		CLR OE_BTN1 ; ВКЛ. БУФЕР КНОПОК
		JNB P2.7,EXIT_RESET_4_2		
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		CLR	OE_IN	; ВРУБИМ СНОВА БУФЕР ВХОДОВ
;//////////////////////////////////////////////////

		JNB	P2.4,PROTECT_IN4_2	; ЕСЛИ ВХОД 4.2 ЕЩЕ РАБОТАЕТ, ТО ОБРАТНО СЛУШАТЬ ЛИНИЮ

EXIT_LISTEN_WITHOUT_4_2:
		JMP STOP_CHECK_IN	; ЗАВЕРШЕНИЕ СКАНА	
							; ОСТАНОВКА ТАЙМЕРА 2
							; ЗАКРЫТИЕ РЕГИСТРА
; ДОСРОЧНЫЙ ВЫХОД И3 АВТО РЕЖИМА. КАНАЛ2
EXIT_RESET_4_2:
		SETB OE_BTN1 ; ВЫКЛ. БУФЕР КНОПОК
		JMP EXTRIM_EXIT

PROTECT_IN4_2:
;**********************************************************
;**********************************************************
; ЗАЩИТА ОТ ЗАВИСАНИЯ ВХОДА В ЗАМКНУТОМ СОСТОЯНИИ
; АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ TAB2ST И TAB2ML
; ЕСЛИ ПРОШЛО 1,5 СЕКУНДЫ (TAB2ST=5H  TAB2ML=DCH) ТО ВЫХОДИМ

;***ПРОВЕРКА ПЕРЕМЕННЫХ TAB4ST,TAB4ML Прошло ЛИ 1500 мс.? ***
; TAB4ST=05H 	TAB4ML=DCH 	 (1500=5DCH)
		CLR		C								  ; 1 cl.
		mov     A,TAB2ML						  ; 1 cl.
		SUBB	A,#0DCH		;TAB4ML-0DCH		  ; 1 cl.
		MOV		DPL,A		;РЕЗУЛЬТАТ В DPL	  ; 1 cl.
		
		CLR		C								  ; 1 cl.
		mov     A,TAB2ST						  ; 1 cl.
		SUBB	A,#05H		;TAB4ST-05H		  	  ; 1 cl.

;ЛОГ. ИЛИ МЕЖДУ РЕЗУЛЬТАТАМИ
; ЕСЛИ СЧЕТЧИК ДОСТИГ 05DCH, ТО В АСС БУДЕТ НОЛЬ		
		ORL		A,DPL

;ПЕРЕХОД, ЕСЛИ АСС РАВЕН НУЛЮ
		JZ		EXIT_LISTEN_WITHOUT_4_2			  ; 2 cl. 
;ПЕРЕХОД, ЕСЛИ АСС НЕ РАВЕН НУЛЮ
		JMP		LISTEN_WITHOUT_4_2				  ; 2 cl.
;************************************************************
;**********************************************************







;=============НДЗ===============================
; ЕСЛИ МЫ СЮДА ПОПАЛИ, ТО ЗНАЧИТ НДЗ СРАБОТАЛ РАНЬШЕ ВХОДА
; А ЭТО НЕ ЕСТЬ ГУД. ПОЭТОМУ ВЫСТАВИМ ФЛАГ ОШИБКИ НДЗ
;================================================
; СРАБОТАЛ НДЗ
FIX_IN_NDZ:
		CALL SET_IN_NDZ			;УСТАНОВИТЬ БИТ НДЗ
		CALL SET_IN_NDZ_ERROR			;УСТАНОВИТЬ ФЛАГ ОШИБКИ НДЗ

;=========================================
; == Загрузка таймера T/C2 начальным кодом для формирования интервала 1 МС.=
;=============================================================================
        lcall   load_tc2       ; Останов и перезагрузка внутpеннего   ;*
                              ; таймеpа/счетчика 2. Сброс флага TF2. ;*
        ;***********************************************************;*
        mov     TAB2ST,#0
        mov     TAB2ML,#0; "Очистка" накопительных переменных временного параметра
        ;---------------; инкрементируемых на +1 после обработки процедуры прерывания
                       ; Diskret_Time2 по переполнению флага tf2 внутpеннего таймеpа/счетчика 2.
		setb    tr2   ; Запуск внутpеннего таймеpа/счетчика 2. ОТСЧЕТ ПО 1МС ПОШЕЛ!
        ;====================================================

; СЛУШАЕМ ВСЕ ВХОДЫ, КРОМЕ СРАБОТАВШЕГО
LISTEN_WITHOUT_NDZ:
;*********************
		JB	P2.0,NEXT6_IN_2	; 
		CALL	SET_IN_1
;*********************
NEXT6_IN_2:
		JB	P2.1,NEXT6_IN_3	; 
		CALL	SET_IN_2
;*********************
NEXT6_IN_3:
		JB	P2.2,NEXT6_IN_4_1	; 
		CALL	SET_IN_3
;*********************
NEXT6_IN_4_1:
		JB	P2.3,NEXT6_IN_4_2	;
		CALL SET_IN_4_1
;*********************
NEXT6_IN_4_2:
		JB	P2.4,CHECK_FIX_IN_NDZ	;
		CALL SET_IN_4_2
;*********************
; ПРОВЕРКА, НЕ ОТПУСТИЛО ЛИ ВХОД
CHECK_FIX_IN_NDZ:
		JNB	P2.5,PROTECT_NDZ	;

EXIT_LISTEN_WITHOUT_NDZ:

		JMP STOP_CHECK_IN	; ЗАВЕРШЕНИЕ СКАНА	
							; ОСТАНОВКА ТАЙМЕРА 2
							; ЗАКРЫТИЕ РЕГИСТРА

;**********************************************************
PROTECT_NDZ:
;**********************************************************
;**********************************************************
; ЗАЩИТА ОТ ЗАВИСАНИЯ ВХОДА В ЗАМКНУТОМ СОСТОЯНИИ
; АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ TAB2ST И TAB2ML
; ЕСЛИ ПРОШЛО 0.1 СЕКУНДЫ (TAB2ST=0  TAB2ML=64H) ТО ВЫХОДИМ

;***ПРОВЕРКА ПЕРЕМЕННЫХ TAB4ST,TAB4ML Прошло ЛИ 100 мс.? ***
; TAB2ST=05H 	TAB2ML=DCH 	 (100=64H)
		mov     A,TAB2ML						  ; 1 cl.
		CJNE 	A,#064H,LISTEN_WITHOUT_NDZ
		JMP		EXIT_LISTEN_WITHOUT_NDZ
		
;**********************************************************



;*************************************
;УСТАНОВКА БИТОВЫХ ПЕРЕМЕННЫХ
;0-ВХОД СРАБОТАЛ
;1-НЕ СРАБОТАЛ
SET_IN_1:
		CLR	IN_1
		RET
SET_IN_2:
		CLR	IN_2
		RET
SET_IN_3:
		CLR	IN_3
		RET
SET_IN_4_1:
		CLR	IN_4_1
		RET
SET_IN_4_2:
		CLR	IN_4_2
		RET
SET_IN_NDZ:
		CLR	IN_NDZ
		RET
SET_IN_NDZ_ERROR:
		CLR	FLAG_NDZ_ERROR
		RET
SET_IN_NDZ_2:

		CLR	IN_NDZ
		JMP		STOP_SAVE_INP

;**************************************




;*******завершение скана входов с сохранением результата************
STOP_CHECK_IN:

;================================================================================
; ПРОВЕРИМ ВРЕМЯ СРАБ.ВЫХОДА
CHECK_TIME_IN:
		clr     tr2     ; 1 cl. Останов внутpеннего таймеpа/счетчика 2.
     ;------------------
        clr     tf2   ; 1 cl. "Очистка" флага переполнения T/C2
		

		
		JNB S_OK,MET97 ; ЕСЛИ РЕЖИМ CONST, ТО НЕ ПРОВЕРЯЕМ ДЛИТЕЛЬНОСТЬ
		JNB S_12MS,MET97; ЕСЛИ НАЖАТА КЛАВИША  12MS, ТО ФИКСИРУЕМ ВХОД ПРИ ЛЮБОМ ВРЕМЕНИ БЕЗ !	 
; ЕСЛИ НАЖАТА КЛАВИША  1100MS, ТО ВРЕМЯ=1000+-100
; ОСТАЛЬНЫЕ КЛАВИШИ, ВРЕМЯ=300+-30
		JNB S_1100MS,TIME1_LONG_1000MS	 
		
; ВЫЗОВ ПРОЦЕДУРЫ ПРОВЕКРИ ИМПУЛЬСА ДЛИТЕЛЬНОСТЬЮ 300МС
TIME1_LONG_300MS:
		CALL   CHECK_LONG_300MS
		JNC	 MET97 ; ПЕРЕХОД ЕСЛИ С=0 ;ВЫХОД БЕЗ ОШИБКИ
		JMP	 EXIT_CHECK_TIME_IN_ERROR ; ВЫХОД С ОШИБКОЙ

; ВЫЗОВ ПРОЦЕДУРЫ ПРОВЕКРИ ИМПУЛЬСА ДЛИТЕЛЬНОСТЬЮ 1000МС
TIME1_LONG_1000MS:
		CALL   CHECK_LONG_1000MS
		JNC	 MET97 ; ПЕРЕХОД ЕСЛИ С=0 ;ВЫХОД БЕЗ ОШИБКИ

; ВЫХОД С УСТАНОВКОЙ ФЛАГА ОШИБКИ ВРЕМЕНИ ВХОДА
EXIT_CHECK_TIME_IN_ERROR:
		CLR TIME_IN_ERROR
		
MET97:
		JB FLAG_OPROS_NDZ,STOP_SAVE_INP ; ЕСЛИ МЫ В АВТО РЕЖИМЕ, ТО НЕ СЛУШАЕМ НДЗ
									; КРОМЕ РЕЖИМА 1100 МС (ТОЖЕ АВТО)
;=========================================================================
LISTEN_NDZ_AFTER_STOP:
		


; ЕЩЕ НЕМНОГО ПОСЛУШАЕМ ЛИНИЮ ДЛЯ НДЗ
		MOV TIME_1MS,#0
CHECK_NDZ_AFTER_STOP:
		
		
		JNB	P2.5,SET_IN_NDZ_2	; ЕСЛИ СРАБОТАЛ ндз, ТО НА МЕТКУ SET_INPUT_5
		
		CALL delay_1_ms
		
		INC TIME_1MS
		
		MOV A,TIME_1MS
        CJNE A,#100,CHECK_NDZ_AFTER_STOP

;==================================================================		

STOP_SAVE_INP:

;**********************************************************		
		SETB	OE_IN			; ВыКЛЮЧИМ БУФЕР ВХОДОВ
		MOV P2, #0FFH ; ШИНУ ДАННЫХ В СТОК

;**********************************************************		

		
		JB TR0,$ ; ЖДЕМ, ПОКА ИМПУЛЬС НЕ ЗАКОНЧИТСЯ
		
;===================================
; ЕСЛИ МЫ В СЕРВИСНОМ РЕЖИМЕ, ТО РИСУЕМ ВРЕМЯ ВХОДА ДУГИ
	   	JNB 	FLAG_SERVICE_MODE,DRAWING_TIME_INP ;ЕСЛИ СЕРВ.РЕЖИМ - НЕ РИСУЕМ НОМЕР ВХОДА
		JMP MET95
DRAWING_TIME_INP: 
		CALL  DRAW_TIME_INPUT ; РИСУЕМ ВРЕМЯ СРАБАТЫВАНИЯ ВЫХОДОВ ДУГА
;=====================================

MET95:
		JNB FLAG_AUTO,POBITNAYA_PROVERKA_INPUT ; ЕСЛИ МЫ В АВТО РЕЖИМЕ ТО 
											   ; НЕ ЖДЕМ СТИРАНИЯ ЗВЕЗДОЧКИ
		MOV R7,#1
		CALL delay_n_x_01_sek	; ЗАДЕРЖКА ДЛЯ ЗВЕЗДОЧКИ
		CALL	DRAW_CLR_STAR	  ;СТИРАЕМ ЗВЕЗДОЧКУ ПОСЛЕ НАДПИСИ 12MS

		;CALL	DRAW_TIME_INPUT	  ;РИСУЕМ ВРЕМЯ ВЫХОДОВ
		
; побитная входов проверка для рисования		
;===========================
POBITNAYA_PROVERKA_INPUT:
		JNB IN_1,GO_DRAW_IN_1		
		JMP SLED_IN2
GO_DRAW_IN_1:
		CLR		LED_IN_1
		CALL	BURN_LEDS		  ; ЗАЖИГАЕМ "Выходы ДУГА"

		JNB 	FLAG_SERVICE_MODE,SLED_IN2 ;ЕСЛИ СЕРВ.РЕЖИМ - НЕ РИСУЕМ НОМЕР ВХОДА
		JB		FLAG_AUTO,GOQ_DRAW_IN_1	 ; ЕСЛИ МЫ В АВТО РЕЖИМЕ, ТО НОМЕР ВЫХОДА НЕ РИСУЕМ
		JMP		SLED_IN2
GOQ_DRAW_IN_1:
		CALL	DRAW_IN_1 
;===========================


;===========================
SLED_IN2:
		JNB IN_2,GO_DRAW_IN_2		
		JMP SLED_IN3
GO_DRAW_IN_2:
		CLR		LED_IN_2
		CALL	BURN_LEDS		  ; ЗАЖИГАЕМ "Выходы ДУГА"
		
		JNB 	FLAG_SERVICE_MODE,SLED_IN3 ;ЕСЛИ СЕРВ.РЕЖИМ - НЕ РИСУЕМ НОМЕР ВХОДА
		JB		FLAG_AUTO,GOQ_DRAW_IN_2	 ; ЕСЛИ МЫ В АВТО РЕЖИМЕ, ТО НОМЕР ВЫХОДА НЕ РИСУЕМ
		JMP		SLED_IN3
GOQ_DRAW_IN_2:
		CALL	DRAW_IN_2 
;===========================

;===========================
SLED_IN3:
		JNB IN_3,GO_DRAW_IN_3		
		JMP SLED_IN4_1
GO_DRAW_IN_3:
		CLR		LED_IN_3
		CALL	BURN_LEDS		  ; ЗАЖИГАЕМ "Выходы ДУГА"
		
		JNB 	FLAG_SERVICE_MODE,SLED_IN4_1 ;ЕСЛИ СЕРВ.РЕЖИМ - НЕ РИСУЕМ НОМЕР ВХОДА
		JB		FLAG_AUTO,GOQ_DRAW_IN_3	 ; ЕСЛИ МЫ В АВТО РЕЖИМЕ, ТО НОМЕР ВЫХОДА НЕ РИСУЕМ
		JMP		SLED_IN4_1
GOQ_DRAW_IN_3:
		CALL	DRAW_IN_3 
;===========================

;===========================
SLED_IN4_1:		
		JNB IN_4_1,GO_DRAW_IN_4_1		
		JMP SLED_IN4_2
GO_DRAW_IN_4_1:
		CLR		LED_IN_4_1
		CALL	BURN_LEDS		  ; ЗАЖИГАЕМ "Выходы ДУГА"
		
		JNB 	FLAG_SERVICE_MODE,SLED_IN4_2 ;ЕСЛИ СЕРВ.РЕЖИМ - НЕ РИСУЕМ НОМЕР ВХОДА
		JB		FLAG_AUTO,GOQ_DRAW_IN_4_1	 ; ЕСЛИ МЫ В АВТО РЕЖИМЕ, ТО НОМЕР ВЫХОДА НЕ РИСУЕМ
		JMP		SLED_IN4_2
GOQ_DRAW_IN_4_1:
		CALL	DRAW_IN_4_1 
;===========================


;===========================
SLED_IN4_2:
		JNB IN_4_2,GO_DRAW_IN_4_2		
		JMP SLED_NDZ
GO_DRAW_IN_4_2:
		CLR		LED_IN_4_2
		CALL	BURN_LEDS		  ; ЗАЖИГАЕМ "Выходы ДУГА"
		
		JNB 	FLAG_SERVICE_MODE,SLED_NDZ   ;ЕСЛИ СЕРВ.РЕЖИМ - НЕ РИСУЕМ НОМЕР ВХОДА
		JB		FLAG_AUTO,GOQ_DRAW_IN_4_2	 ; ЕСЛИ МЫ В АВТО РЕЖИМЕ, ТО НОМЕР ВЫХОДА НЕ РИСУЕМ
		JMP		SLED_NDZ
GOQ_DRAW_IN_4_2:
		CALL	DRAW_IN_4_2 
;===========================


;===========================
SLED_NDZ:
		JNB IN_NDZ,GO_DRAW_IN_NDZ		
		JMP MET99
GO_DRAW_IN_NDZ:
		CLR		LED_IN_NDZ
		CALL	BURN_LEDS		  ; ЗАЖИГАЕМ "Выходы ДУГА"

		JNB 	FLAG_SERVICE_MODE,MET99   ;ЕСЛИ СЕРВ.РЕЖИМ - НЕ РИСУЕМ НОМЕР ВХОДА
		JB		FLAG_AUTO,GOQ_DRAW_NDZ	 ; ЕСЛИ МЫ В АВТО РЕЖИМЕ, ТО НОМЕР ВЫХОДА НЕ РИСУЕМ
		JMP		MET99
GOQ_DRAW_NDZ:
		CALL	DRAW_IN_NDZ 
;===========================
		JMP  MET99



MET99:

		RET


EXTRIM_EXIT:
; ВЫРУБАЕМ ВСЕ СЧЕТЧИКИ И ФЛАГИ НАХРЕН
		clr     tr0     ; 1 cl. Останов внутpеннего таймеpа/счетчика 0.
     ;------------------
        clr     tf0   ; 1 cl. "Очистка" флага переполнения T/C0
		
		clr     tr2     ; 1 cl. Останов внутpеннего таймеpа/счетчика 2.
     ;------------------
        clr     tf2   ; 1 cl. "Очистка" флага переполнения T/C2
		
		SETB	OE_CHN		;ВЫРУБИМ ОПТО СИГНАЛ НА ДУГУ
		SETB OE_IN ; ВЫРУБАЕМ БУФЕР ВХОДОВ
		MOV INPUT,#0FFH ; СБРОСИМ ПЕРМЕННУЮ ВХОДОВ
		
		CLR RES ; УСТАНОВИМ ФЛАГ НАЖАТИЯ КНОПКИ СБРОС

		RET
;**********************************************************	





;======================================================================================

;           ######################################################################
;          #                                                                    #
;         #        ПРОЦЕДУРЫ ПРОВЕРКИ ДЛИТЕЛЬНОСТИ ИМУЛЬСОВ ДУГИ         	   #
;        #              ВХОДНОЙ ПАРАМЕТР: TAB2ML,TAB2ST    		              #
;						ВЫХОДНОЙ: ФЛАГ С=0 - OK, C=1 - ERROR
;       #              **************************************************    #
;       #####################################################################


;============================================
; ИМЕЕМ ДВЕ ПРОЦЕДУРЫ: ПРОВЕРКА НА (300+-30) МС И
; (1000+-100) МС
; СРАВНИВАЕМ ЧИЛО В ПЕРМЕННЫХ С ПОРОГАМИ (ВЕРХНИЙ И НИЖНИЙ)
; ПОСЛЕ СРАВНЕНИЯ С КАЖДЫМ ПОРОГОМ, СМОТРИМ НА ФЛАГ С
;=============================================
; ОСТАЛЬНОЕ СМОТРИ  КОММЕНТАХ
;=============================================

;***********************************
; ПРОВЕРКА, ЧТО ИМПУЛЬС =+-300МС
;********************************************
CHECK_LONG_300MS:
; ВРЕМЯ ВХОДА ДОЛЖНО ВЫТЬ 270(1 0EH)< T <350(1 15EH)
		
;СНАЧАЛА ПРОВЕРИМ >270 МС
;======================
		CLR	C
		MOV	A,TAB2ML ; МЛАДШИЕ РАЗРЯДЫ
		SUBB A,#0EH ;TAB2ML-0EH 
		; ФЛАГ ПЕРЕНОСА НЕ ТРОГАЕМ
		MOV	A,TAB2ST ; СТАРШИЕ РАЗРЯДЫ
		SUBB A,#01H ; TAB2ST-1H

; ТЕПЕРЬ СМОТРИМ НА ФЛАГ ПЕРЕНОСА
; ЕСЛИ С=1, ТО Т<270 (КОСЯК)
; ЕСЛИ С=0, ТО Т>=270
		 JC EXIT_CHECK_LONG_300MS_WITH_ERROR  ; ПЕРЕХОД, ЕСЛИ С=1

;ЕСЛИ >270 МС В ПОРДЯКЕ, ПРОВЕРИМ <350 МС
;======================
		CLR	C
		MOV	A,TAB2ML ; МЛАДШИЕ РАЗРЯДЫ
		SUBB A,#05EH ;TAB2ML-5EH 
		; ФЛАГ ПЕРЕНОСА НЕ ТРОГАЕМ
		MOV	A,TAB2ST ; СТАРШИЕ РАЗРЯДЫ
		SUBB A,#01H ; TAB2ST-1H
; ТЕПЕРЬ СМОТРИМ НА ФЛАГ ПЕРЕНОСА
; ЕСЛИ С=1, ТО Т<350 
; ЕСЛИ С=0, ТО Т>=350 (КОСЯК)
		 JNC EXIT_CHECK_LONG_300MS_WITH_ERROR  ; ПЕРЕХОД, ЕСЛИ С=0
		 
		 JMP  EXIT_CHECK_LONG_300MS

EXIT_CHECK_LONG_300MS_WITH_ERROR:
		SETB C	; ОШИБКА
		RET 
EXIT_CHECK_LONG_300MS:
		CLR	C  ; OK
		RET
;**********************************************





;***********************************
; ПРОВЕРКА, ЧТО ИМПУЛЬС =+-300МС
;********************************************
CHECK_LONG_1000MS:
; ВРЕМЯ ВХОДА ДОЛЖНО ВЫТЬ 900(3 84H)<T<1100(4 4CH)
		
;СНАЧАЛА ПРОВЕРИМ >900 МС
;======================
		CLR	C
		MOV	A,TAB2ML ; МЛАДШИЕ РАЗРЯДЫ
		SUBB A,#084H ;TAB2ML-84H 
		; ФЛАГ ПЕРЕНОСА НЕ ТРОГАЕМ
		MOV	A,TAB2ST ; СТАРШИЕ РАЗРЯДЫ
		SUBB A,#03H ; TAB2ST-3H

; ТЕПЕРЬ СМОТРИМ НА ФЛАГ ПЕРЕНОСА
; ЕСЛИ С=1, ТО Т<900 (КОСЯК)
; ЕСЛИ С=0, ТО Т>=900
		 JC EXIT_CHECK_LONG_1000MS_WITH_ERROR  ; ПЕРЕХОД, ЕСЛИ С=1

;ЕСЛИ 900 МС В ПОРДЯКЕ, ПРОВЕРИМ 1100 МС
;======================
		CLR	C
		MOV	A,TAB2ML ; МЛАДШИЕ РАЗРЯДЫ
		SUBB A,#04CH ;TAB2ML-4CH 
		; ФЛАГ ПЕРЕНОСА НЕ ТРОГАЕМ
		MOV	A,TAB2ST ; СТАРШИЕ РАЗРЯДЫ
		SUBB A,#04H ; TAB2ST-4H
; ТЕПЕРЬ СМОТРИМ НА ФЛАГ ПЕРЕНОСА
; ЕСЛИ С=1, ТО Т<1100 
; ЕСЛИ С=0, ТО Т>=1100 (КОСЯК)
		 JNC EXIT_CHECK_LONG_1000MS_WITH_ERROR  ; ПЕРЕХОД, ЕСЛИ С=0
		 JMP  EXIT_CHECK_LONG_1000MS

EXIT_CHECK_LONG_1000MS_WITH_ERROR:
		SETB C	; ОШИБКА
		RET 
EXIT_CHECK_LONG_1000MS:
		CLR	C  ; OK
		RET
;=====================================================================








;           ######################################################################
;          #                                                                    #
;         #        ПРОЦЕДУРА ЗАЖИГАНИЯ СВЕТОДИОДОВ         		               #
;        #              ВХОДНОЙ ПАРАМЕТР: ПЕРЕМЕННАЯ LED    		          #
;       #              **************************************************    #
;       #####################################################################

; КОДЫ НЕИСПРАВНЫХ ВХОДОВ ДЛЯ ПЕРЕМЕННОЙ LED
; #01111110B - IN.1
; #01111101B - IN.2
; #01111011B - IN.3
; #01110111B - IN.4.1
; #01101111B - IN.4.2
; #01011111B - IN.NDZ
;**********************************************************	
BURN_LEDS:
		MOV	P2,LED
   		SETB	CE_LED	; ЧТО НA ВХОДЕ ТО И НА ВЫХ.
		CLR		OE_LED	; ON REGISTR D13
		NOP
		CLR		CE_LED ; ЗАЩЕЛКНУЛИ РЕГИСТР

		MOV P2,#0FFH ; ШИНУ В СТОК

		RET

; ТУТ МЫ МИГАЕМ СВЕТОДИДОМ И ЖДЕМ НАЖАТИЯ КНОПКИ "СБРОС"
; ВООБЩЕМ, СЮДА ПОПАДАЕМ ИЗ АВТО РЕЖИМА, ЕСЛИ ОБНАРУЖЕНО НЕСРАБ. ИЛИ 
; ЛОЖНОЕ СРАБ. ВЫХОДА ДУГИ
BLINK_LED_ERROR:
;======================================
		; ПРОВЕРКА, КАКОЙ ВХОД СРАБОТАЛ
;=====================================		
		;================1
		MOV A,LED
		
		CJNE A,#01111110B,CHEK_BLINK_IN_2
		JMP	 BLINKING_IN_1

		;===============2
CHEK_BLINK_IN_2:		
		
		CJNE A,#01111101B,CHEK_BLINK_IN_3
		JMP	 BLINKING_IN_2

		;===============3
CHEK_BLINK_IN_3:		
		CJNE A,#01111011B,CHEK_BLINK_IN_4_1
		JMP	 BLINKING_IN_3

		;===============4.1
CHEK_BLINK_IN_4_1:		
		CJNE A,#01110111B,CHEK_BLINK_IN_4_2
		JMP	 BLINKING_IN_4_1

		;===============4.2
CHEK_BLINK_IN_4_2:		
		CJNE A,#01101111B,CHEK_BLINK_IN_NDZ
		JMP	 BLINKING_IN_4_2


		;===============NDZ
CHEK_BLINK_IN_NDZ:		
		CJNE A,#01011111B,GO_EXIT_BLINK
		JMP	 BLINKING_IN_NDZ

GO_EXIT_BLINK:
		JMP  EXIT_BLINK

;=======================================



;=========================
; СОБСТВЕННО, МИГАНИЕ СВЕТОДИОДАМИ
;=========================1
BLINKING_IN_1:
		CPL LED_IN_1
		MOV	P2,LED
   		SETB	CE_LED	; ЧТО НA ВХОДЕ ТО И НА ВЫХ.
		CLR		OE_LED	; ON REGISTR D13
		NOP
		CLR		CE_LED ; ЗАЩЕЛКНУЛИ РЕГИСТР

		; ЗАДЕРЖКА 300МС+АНАЛИЗ КНОПОК "СБРОС", "ВКЛ", "ВЫКЛ"
		; ПО ОКОНЧАНИИ ПРОЦЕДУРЫ АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ RES,POW_ON, POW_OFF
		MOV R7,#3
		CALL delay_n_x_01_sek_ESC
		
		JNB RES,EXIT_BLINK_IN_1			  ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		JNB POW_OFF,SET_POW_OFF_IN_1  ; ВЫКЛ. ПИТАНИЕ ДУГИ
		JNB POW_ON,SET_POW_ON_IN_1	  ; ВКЛ. ПИТАНИЕ ДУГИ

		JMP BLINKING_IN_1

EXIT_BLINK_IN_1: ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		RET

SET_POW_OFF_IN_1:		; ВЫКЛ. ПИТАНИЕ ДУГИ
		SETB POW_ON1
		JMP BLINKING_IN_1

SET_POW_ON_IN_1:		; ВКЛ. ПИТАНИЕ ДУГИ
		CLR POW_ON1
		JMP BLINKING_IN_1


;=========================2
BLINKING_IN_2:
		CPL LED_IN_2
		MOV	P2,LED
   		SETB	CE_LED	; ЧТО НA ВХОДЕ ТО И НА ВЫХ.
		CLR		OE_LED	; ON REGISTR D13
		NOP
		CLR		CE_LED ; ЗАЩЕЛКНУЛИ РЕГИСТР

		; ЗАДЕРЖКА 300МС+АНАЛИЗ КНОПОК "СБРОС", "ВКЛ", "ВЫКЛ"
		; ПО ОКОНЧАНИИ ПРОЦЕДУРЫ АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ RES,POW_ON, POW_OFF
		MOV R7,#3
		CALL delay_n_x_01_sek_ESC
		
		JNB RES,EXIT_BLINK_IN_2			  ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		JNB POW_OFF,SET_POW_OFF_IN_2  ; ВЫКЛ. ПИТАНИЕ ДУГИ
		JNB POW_ON,SET_POW_ON_IN_2	  ; ВКЛ. ПИТАНИЕ ДУГИ

		JMP BLINKING_IN_2


EXIT_BLINK_IN_2: ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		RET


SET_POW_OFF_IN_2:		; ВЫКЛ. ПИТАНИЕ ДУГИ
		SETB POW_ON1
		JMP BLINKING_IN_2

SET_POW_ON_IN_2:		; ВКЛ. ПИТАНИЕ ДУГИ
		CLR POW_ON1
		JMP BLINKING_IN_2


;=========================3
BLINKING_IN_3:
		CPL LED_IN_3
		MOV	P2,LED
   		SETB	CE_LED	; ЧТО НA ВХОДЕ ТО И НА ВЫХ.
		CLR		OE_LED	; ON REGISTR D13
		NOP
		CLR		CE_LED ; ЗАЩЕЛКНУЛИ РЕГИСТР

		; ЗАДЕРЖКА 300МС+АНАЛИЗ КНОПОК "СБРОС", "ВКЛ", "ВЫКЛ"
		; ПО ОКОНЧАНИИ ПРОЦЕДУРЫ АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ RES,POW_ON, POW_OFF
		MOV R7,#3
		CALL delay_n_x_01_sek_ESC
		
		JNB RES,EXIT_BLINK_IN_3			  ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		JNB POW_OFF,SET_POW_OFF_IN_3  ; ВЫКЛ. ПИТАНИЕ ДУГИ
		JNB POW_ON,SET_POW_ON_IN_3	  ; ВКЛ. ПИТАНИЕ ДУГИ

		JMP BLINKING_IN_3

EXIT_BLINK_IN_3: ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		RET

SET_POW_OFF_IN_3:		; ВЫКЛ. ПИТАНИЕ ДУГИ
		SETB POW_ON1
		JMP BLINKING_IN_3

SET_POW_ON_IN_3:		; ВКЛ. ПИТАНИЕ ДУГИ
		CLR POW_ON1
		JMP BLINKING_IN_3


;=========================4.1
BLINKING_IN_4_1:
		CPL LED_IN_4_1
		MOV	P2,LED
   		SETB	CE_LED	; ЧТО НA ВХОДЕ ТО И НА ВЫХ.
		CLR		OE_LED	; ON REGISTR D13
		NOP
		CLR		CE_LED ; ЗАЩЕЛКНУЛИ РЕГИСТР

		; ЗАДЕРЖКА 300МС+АНАЛИЗ КНОПОК "СБРОС", "ВКЛ", "ВЫКЛ"
		; ПО ОКОНЧАНИИ ПРОЦЕДУРЫ АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ RES,POW_ON, POW_OFF
		MOV R7,#3
		CALL delay_n_x_01_sek_ESC
		
		JNB RES,EXIT_BLINK_IN_4_1			  ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		JNB POW_OFF,SET_POW_OFF_IN_4_1  ; ВЫКЛ. ПИТАНИЕ ДУГИ
		JNB POW_ON,SET_POW_ON_IN_4_1	  ; ВКЛ. ПИТАНИЕ ДУГИ

		JMP BLINKING_IN_4_1

EXIT_BLINK_IN_4_1: ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		RET

SET_POW_OFF_IN_4_1:		; ВЫКЛ. ПИТАНИЕ ДУГИ
		SETB POW_ON1
		JMP BLINKING_IN_4_1

SET_POW_ON_IN_4_1:		; ВКЛ. ПИТАНИЕ ДУГИ
		CLR POW_ON1
		JMP BLINKING_IN_4_1


;=========================4.2
BLINKING_IN_4_2:
		CPL LED_IN_4_2
		MOV	P2,LED
   		SETB	CE_LED	; ЧТО НA ВХОДЕ ТО И НА ВЫХ.
		CLR		OE_LED	; ON REGISTR D13
		NOP
		CLR		CE_LED ; ЗАЩЕЛКНУЛИ РЕГИСТР

		; ЗАДЕРЖКА 300МС+АНАЛИЗ КНОПОК "СБРОС", "ВКЛ", "ВЫКЛ"
		; ПО ОКОНЧАНИИ ПРОЦЕДУРЫ АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ RES,POW_ON, POW_OFF
		MOV R7,#3
		CALL delay_n_x_01_sek_ESC
		
		JNB RES,EXIT_BLINK_IN_4_2			  ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		JNB POW_OFF,SET_POW_OFF_IN_4_2  ; ВЫКЛ. ПИТАНИЕ ДУГИ
		JNB POW_ON,SET_POW_ON_IN_4_2	  ; ВКЛ. ПИТАНИЕ ДУГИ

		JMP BLINKING_IN_4_2

EXIT_BLINK_IN_4_2: ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		RET

SET_POW_OFF_IN_4_2:		; ВЫКЛ. ПИТАНИЕ ДУГИ
		SETB POW_ON1
		JMP BLINKING_IN_4_2

SET_POW_ON_IN_4_2:		; ВКЛ. ПИТАНИЕ ДУГИ
		CLR POW_ON1
		JMP BLINKING_IN_4_2



;=========================NDZ
BLINKING_IN_NDZ:
		CPL LED_IN_NDZ
		MOV	P2,LED
   		SETB	CE_LED	; ЧТО НA ВХОДЕ ТО И НА ВЫХ.
		CLR		OE_LED	; ON REGISTR D13
		NOP
		CLR		CE_LED ; ЗАЩЕЛКНУЛИ РЕГИСТР

		; ЗАДЕРЖКА 300МС+АНАЛИЗ КНОПОК "СБРОС", "ВКЛ", "ВЫКЛ"
		; ПО ОКОНЧАНИИ ПРОЦЕДУРЫ АНАЛИЗИРУЕМ ПЕРЕМЕННЫЕ RES,POW_ON, POW_OFF
		MOV R7,#3
		CALL delay_n_x_01_sek_ESC
		
		JNB RES,EXIT_BLINK_IN_NDZ			  ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		JNB POW_OFF,SET_POW_OFF_IN_NDZ  ; ВЫКЛ. ПИТАНИЕ ДУГИ
		JNB POW_ON,SET_POW_ON_IN_NDZ	  ; ВКЛ. ПИТАНИЕ ДУГИ

		JMP BLINKING_IN_NDZ

EXIT_BLINK_IN_NDZ: ; ВЫХОДИМ НАХЕР В РАБОЧИЙ РЕЖИМ
		RET

SET_POW_OFF_IN_NDZ:		; ВЫКЛ. ПИТАНИЕ ДУГИ
		SETB POW_ON1
		JMP BLINKING_IN_NDZ

SET_POW_ON_IN_NDZ:		; ВКЛ. ПИТАНИЕ ДУГИ
		CLR POW_ON1
		JMP BLINKING_IN_NDZ



EXIT_BLINK:
		RET
;**********************************************************	




;           ######################################################################
;          #                                                                    #
;         #        ПРОЦЕДУРА ОЖИДАНИЯ НАЖАТИЯ КНОПКИ КВИТ         		       #
;         #####################################################################

;======================================
; ЖДЕМ 3 СЕК ДЛЯ НАЖАТИЯ КНОПКИ КВИТ НА ДУГЕ
; РИСУЕМ ОБРАТНЫЙ ОТСЧЕТ 3-2-1 НА ДИСПЛЕЕ
;=======================================
WAITING_FOR:
		CALL DRAW_WAITING_FOR ; РИСОВАЛКА ПОДОЖДИТЕ
		
		MOV	 TIMER_KVIT,#3 ; 3 СЕКУНДЫ

; РИСОВАНИЕ ОБРАТНОГО ОТСЧЕТА  И ЗАДЕРЖКА
DRAWING_COUNT_3SEC:		
		CALL  DRAW_COUNT_3SEC

		; ЗАДЕРЖКА С АНАЛИЗОМ КНОПКИ СБРОС
		MOV	R7,#10
		CALL delay_n_x_01_sek_ESC
		JNB RES,EXIT_WAITING_FOR	; НА МЕТКУ, ЕСЛИ БЫЛА НАЖАТА КНОПКА СБРОС

		DJNZ	TIMER_KVIT,DRAWING_COUNT_3SEC ; ЕСЛИ НЕ НОЛЬ, ТО РИСУЕМ ДАЛЬШЕ
EXIT_WAITING_FOR:
		RET
;=======================================





;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


;           ######################################################################
;          #                                                                    #
;         #        ПРОЦЕДУРЫ ОБРАБТКИ ПРЕРЫВАНИЙ ОТ ТС0 И ТС2         		   #
;        #              А ТАКЖЕ ПРОЦЕДУРЫ НАБИВКИ ЭТИХ СЧЕТЧИКОВ    		  #
;       #              **************************************************    #
;       #####################################################################


;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; Загрузка таймера T/C0 начальным кодом для формирования интервала 1 мс.=
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
load_tc0:
        ;++++
        CLR     EA ; Запретить прерывания от последовательного порта!!! (вообще все прерывания)
        ;++
                ;----------;
                clr     tr0     ; 1 cl. Останов внутpеннего таймеpа/счетчика 0.
                ;------------------
                clr     tf0   ; 1 cl. "Очистка" флага переполнения T/C0
							
							; Загрузка T/C0 кодом: F8FBh (63739)
                           ; для обеспечения в дальнейшем модуля счёта,
                          ; равного 1797 (63739+ 1797= 65536), при котором
                         ; общее время заполнения счётчика, до установки
                        ; флага TF0 составит:
                   ; ((1/Fbq=22118400 Гц.)*12) *1797 = 0.5425 мкс.*1797 =
                  ;  = 974,8725 мкс
                  ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                 ; !!! К данному времени (974,8725 мкс.) следует добавить среднее время
                ; !!! выполнения самой пп. обработки процедуры прерывания Diskret_Time
               ; !!! - 35 машинных циклов + 11 cl (выход в нужное место+МЕЛОЧЕВКА) - 974,8725+24.955= 1000 мкс. !!!!!!!!!!!!!!
                mov     tl0,#0FBH     ; 2 cl.
                mov     th0,#0F8H   ; 2 cl.
                ;------------------------------------------------------
        ;++++
        SETB     EA ; Разрешить прерывания от последовательного порта!!! (вообще все прерывания)
        ;++
                ret
;=========================================================================







;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; Загрузка таймера T/C2 начальным кодом для формирования интервала 1 мс.=
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
load_tc2:
        ;++++
        CLR     EA ; Запретить прерывания от последовательного порта!!! (вообще все прерывания)
        ;++
                ;----------;
                clr     tr2     ; 1 cl. Останов внутpеннего таймеpа/счетчика 2.
                ;------------------
                clr     tf2   ; 1 cl. "Очистка" флага переполнения T/C2
							
                mov     tl2,#0CDH     ; 2 cl.
                mov     th2,#0F8H   ; 2 cl.
                ;------------------------------------------------------
        ;++++
        SETB     EA ; Разрешить прерывания от последовательного порта!!! (вообще все прерывания)
        ;++
                ret
;=========================================================================








;*************************************************************************************************
;***********ДИСКРЕТА 1 MS ***********************************************************************
;*************************************************************************************************
                         ;******************************************************
                        ; Обработка процедуры прерывания: перезагрузка счётчика/
                       ; таймера T/C0 с повторным его перезапуском, и увеличения переменных
                      ; TAB4ST,TAB4ML после отрабатывания таймером T/C0
                     ; временного интервала 
                    ;*********************************************************
; Расчет:
; Время в счетчик: 1000 мкс - время пп = 1000-18,9875=981,0125 мкс
; Кол-во циклов: 981,0125/0.5425 мкс=1808 циклов
; Число в счетчик: 65536-1808=63728= F8F0h                           
                
; СМ. РАСЧЕТ В ФАЙЛЕ TO.XLS				

Diskret_Time:                 ; 2 cl. - вход в пп. обработки прекрывания.
                ;----------;
                clr     tr0     ; 1 cl. Останов внутpеннего таймеpа/счетчика 0.
                ;------------------
                clr     tf0   ; 1 cl. "Очистка" флага переполнения T/C0

				
; В зависимости от нажатой клавиши, время выполенния пп будет разным 22-42 cl
; для того. чтобы записать правильное число в счетчик, будем анализировать,
; какая клавиша нажата.
				
				JNB S_12MS,SET_DELTA_12MS	 ; 2 cl	 ; время выполнения пп. 24 cl
				JNB S_21MS,SET_DELTA_21MS	 ; 2 cl	 ; время выполнения пп. 30 cl
				JNB S_300MS,SET_DELTA_300MS ; 2 cl	 ; время выполнения пп. 37 cl
				JNB S_1100MS,SET_DELTA_1100MS	 ; 2 cl	 ; время выполнения пп. 42 cl
			    
				JMP  Diskret_Time_EXIT_TO
				;------------------------------------------------------
				; ЗАПИСЬ ЧИСЛА В СЧЕТЧИК
				;------------------------------------------------------

SET_DELTA_12MS:                
				mov     tl0,#0E5H     ; 2 cl.
                mov     th0,#0F8H   ; 2 cl.
				JMP		FIXED_COUNT	; 2 cl. 
SET_DELTA_21MS:                
				mov     tl0,#0EBH     ; 2 cl.
                mov     th0,#0F8H   ; 2 cl.
				JMP		FIXED_COUNT	; 2 cl.
SET_DELTA_300MS:                
				mov     tl0,#0F2H     ; 2 cl.
                mov     th0,#0F8H   ; 2 cl.
				JMP		FIXED_COUNT	; 2 cl.
SET_DELTA_1100MS:                
				mov     tl0,#0F7H     ; 2 cl.
                mov     th0,#0F8H   ; 2 cl.

				;------------------------------------------------------

FIXED_COUNT:	 ;	ФИКСАЦИЯ СЧЕТЧИКА В ПЕРМЕННЫЕ

				inc     TAB4ML    ; 1 cl.
        		
                mov     R6,TAB4ML; 2 cl.
                ;***************

                cjne    R6,#00H,CHECK_S ; 2 cl.

                ;***************
                inc     TAB4ST ; 1 cl.
                ;*************;


				
				;------------------------------------------------------
				;ПРОВЕРКИ ПЕРЕМЕННЫХ
				;------------------------------------------------------
				
;*** от 2 до 8 cl***
CHECK_S:				
				JNB S_12MS,CHECK_TAB4_12MS	 ; 2 cl
				JNB S_21MS,CHECK_TAB4_21MS	 ; 2 cl
				JNB S_300MS,CHECK_TAB4_300MS ; 2 cl
				JNB S_1100MS,CHECK_TAB4_1100MS	 ; 2 cl

				JMP Diskret_Time_EXIT_TO	; 2 cl		  
                
								 
;***3 cl***				
CHECK_TAB4_12MS:
;***ПРОВЕРКА ПЕРЕМЕННОЙ TAB4ML, м Прошло ЛИ 12 мс.? ***		
				mov     A,TAB4ML				  ; 1 cl.
				cjne    A,#12,Diskret_Time_End	  ; 2 cl.
				JMP		Diskret_Time_EXIT_TO	  ; 2 cl.  УЧЕТ ПРИ НАЧАЛЬНОЙ ЗАГРУЗКЕ СЧЕТЧИКА
;***3 cl***	
CHECK_TAB4_21MS:
;***ПРОВЕРКА ПЕРЕМЕННОЙ TAB4ML, Прошло ЛИ 21 мс.? ***		
				mov     A,TAB4ML				  ; 1 cl.
        		cjne    A,#21,Diskret_Time_End	  ; 2 cl.
				JMP		Diskret_Time_EXIT_TO	  ; 2 cl.

;***9 cl***	
CHECK_TAB4_300MS:									
;***ПРОВЕРКА ПЕРЕМЕННЫХ TAB4ST,TAB4ML Прошло ЛИ 300 мс.? ***
; TAB4ST=01H 	TAB4ML=2CH 	 (300=12CH)
		CLR		C								  ; 1 cl.
		mov     A,TAB4ML						  ; 1 cl.
		SUBB	A,#02CH		;TAB4ML-02CH		  ; 1 cl.
		MOV		DPL,A		;РЕЗУЛЬТАТ В DPL	  ; 1 cl.
		
		mov     A,TAB4ST						  ; 1 cl.
		SUBB	A,#01H		;TAB4ST-01H		  	  ; 1 cl.

;ЛОГ. ИЛИ МЕЖДУ РЕЗУЛЬТАТАМИ
; ЕСЛИ СЧЕТЧИК ДОСТИГ 012CH, ТО В АСС БУДЕТ НОЛЬ		
		ORL		A,DPL							  ; 1 cl.
;ПЕРЕХОД, ЕСЛИ АСС РАВЕН НУЛЮ
		JZ		Diskret_Time_EXIT_TO			  ; 2 cl. УЧЕТ В НАЧ. ЗАГРУЗКЕ
;ПЕРЕХОД, ЕСЛИ АСС НЕ РАВЕН НУЛЮ
		JMP		Diskret_Time_End				  ; 2 cl.

;***9 cl***	
CHECK_TAB4_1100MS:
;***ПРОВЕРКА ПЕРЕМЕННЫХ TAB4ST,TAB4ML Прошло ЛИ 300 мс.? ***
; TAB4ST=04H 	TAB4ML=4CH 	 (1100=44CH)
		CLR		C								  ; 1 cl.
		mov     A,TAB4ML						  ; 1 cl.
		SUBB	A,#04CH		;TAB4ML-04CH		  ; 1 cl.
		MOV		DPL,A		;РЕЗУЛЬТАТ В DPL	  ; 1 cl.
		
		mov     A,TAB4ST						  ; 1 cl.
		SUBB	A,#04H		;TAB4ST-04H		  	  ; 1 cl.

;ЛОГ. ИЛИ МЕЖДУ РЕЗУЛЬТАТАМИ
; ЕСЛИ СЧЕТЧИК ДОСТИГ 044CH, ТО В АСС БУДЕТ НОЛЬ		
		ORL		A,DPL

;ПЕРЕХОД, ЕСЛИ АСС РАВЕН НУЛЮ
		JZ		Diskret_Time_EXIT_TO			  ; 2 cl. УЧЕТ В НАЧ. ЗАГРУЗКЕ
;ПЕРЕХОД, ЕСЛИ АСС НЕ РАВЕН НУЛЮ
		JMP		Diskret_Time_End				  ; 2 cl.

;***3 cl***	
Diskret_Time_End:
                ;pop    PSW  ; 2 cl. Вернуть из стека флаг переноса C (использован
                           ;       в пп. TTI_GOTOV_OTKAZ и м.б. использован в других пп).
                ;---------;
                setb    tr0  ; 1 cl. Запуск внутpеннего таймеpа/счетчика 0.
				reti  ; 2 cl.
            ;*******************************************************

                
				
				;------------------------------------------------------
				;ВЫХОД В НУЖНОЕ МЕСТО
				; 11 cl = 11*0.5425 мск = 5,9675 мкс
				;------------------------------------------------------
;***8 cl***	
Diskret_Time_EXIT_TO:

		SETB	OE_CHN		;OFF BUFFER
        
		setb    S_12MS   ; Сброс в исходное состояние выходных битовых переменных.
        setb    S_21MS
        setb    S_300MS
        setb    S_1100MS
        
		CLR    tr0  ; 1 cl. ОСТАНОВКА внутpеннего таймеpа/счетчика 0.
		reti  ; 2 cl.
            ;*******************************************************
				
				
				;MOV     A,SP	; 1 cl. ;ЗАГРУЖАЕМ В АСС УКАЗАТЕЛЬ СТЕКА(НОМЕР ЯЧЕЙКИ) СО СТАРШЕЙ ЧАСТЬЮ АДРЕСА (АДРЕС,КУДА БЫ ВЫШЛИ ПО RET) 
                ;MOV     R0,A	; 1 cl. ;ТУТ ПОНЯТНО

				;MOV	@R0,ADR_ST		; 2 cl. ;ТЕПЕРЬ В ЭТУ ЯЧЕЙКУ СТЕКА ЗАПИШЕМ СТАРШУЮ ЧАСТЬ АДРЕСА НАШЕЙ МЕТКИ Cont_post_set_default
				;DEC	R0				; 1 cl.		;ТЕПЕРЬ В R0 ЗАПИСАНА СЛЕД. ЯЧЕКА СТЕКА С МЛАДШЕЙ ЧАСТЬЮ АДРЕСА (ВЫХОД ПО RET)
				;MOV	@R0,ADR_ML		; 2 cl. ;НА МЕСТО И ЭТОЙ ЯЧЕЙКИ МЫ ЗАПИШЕМ МЛАДШУЮ ЧАСТЬ АДРЕСА НАШЕЙ МЕТКИ Cont_post_set_default
                ;================

				;reti  ; 2 cl.
            ;*******************************************************
;*************************************************************************************************







;*************************************************************************************************
;***********ДИСКРЕТА 1 MS ***********************************************************************
;*************************************************************************************************
                         ;******************************************************
                        ; Обработка процедуры прерывания: перезагрузка счётчика/
                       ; таймера T/C2 с повторным его перезапуском, и увеличения переменных
                      ; TAB2ST,TAB2ML после отрабатывания таймером T/C2
                     ; временного интервала 
					 ; ПРИМЕНЯЕТСЯ ДЛЯ ФИКСАЦИИ ДЛИТЕЛЬНОСТИ ВХОДНОГО ИМПУЛЬСА ДУГИ
                    ;*********************************************************
;*************************************************************************************************
Diskret_Time_2:                 ; 2 cl. - вход в пп. обработки прекрывания.
                ;----------;
                clr     tr2     ; 1 cl. Останов внутpеннего таймеpа/счетчика 2.
                ;------------------
                clr     tf2   ; 1 cl. "Очистка" флага переполнения T/C2
				
				;------------------------------------------------------
				; ЗАПИСЬ ЧИСЛА В СЧЕТЧИК  F8DE
				;------------------------------------------------------

				mov     tl2,#0DEH     ; 2 cl.
                mov     th2,#0F8H   ; 2 cl.

				;------------------------------------------------------

FIXED_COUNT_2:	 ;	ФИКСАЦИЯ СЧЕТЧИКА В ПЕРМЕННЫЕ
                inc     TAB2ML    ; 1 cl.
        		
                mov     R5,TAB2ML; 2 cl.
                ;***************

                cjne    R5,#00H,EXIT_Diskret_Time_2 ; 2 cl.

                ;***************
                inc     TAB2ST ; 1 cl.
                ;*************;
EXIT_Diskret_Time_2:
                ;---------;
                setb    tr2  ; 1 cl. Запуск внутpеннего таймеpа/счетчика 0.
				reti  ; 2 cl.
;*************************************************************************************************







;           ######################################################################
;          #                                                                    #
;         #        ПРОЦЕДУРА РАБОТЫ С МЕНЮ БЛОКА			         		   #
;        #    **************************************************              #
;       #  ВЫХ ДАННЫЕ      ЗНАЧЕНИЯ ПЕРМЕННОЙ  REGIM_A1_2:					 #
;	   #                  11111110B   - ЗАСВЕТИМ НАДПИСЬ "ДУГА-О"			#
;	  #                  11111101B   - ЗАСВЕТИМ НАДПИСЬ "ДУГА-Ф"		   #
;	 #                  11111011B   - ЗАСВЕТИМ НАДПИСЬ "ДУГА-Т"			  #
;   ######################################################################



;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Работа с меню выбора блоков
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	   	SETB  BIT_MENU_REGIM
	;	!!! ВРЕМЕННО ОТКЛЮЧЕНО
		;******************************************************
		;lcall   Menu_Regim
 		; РИСОВАНИЕ МЕНЮ
       ;******************************************************
	   
		;******************************************************

              ;***************************************************************
        ; Выбор и индикация режима работы с БУВВ-СЭЩ-А1 или БУВВ-СЭЩ-А2.
       ;***************************************************************
             ;***************************************************************
        ; Выбор и индикация режима работы с БУВВ-СЭЩ-А1 или БУВВ-СЭЩ-А2.
       ;***************************************************************
Menu_Regim:
        jbc     BIT_MENU_REGIM,Menu_Regim_000
                            ; Анализ со сбросом, если установлен, бита BIT_MENU_REGIM -признака
                           ; обхода выполнения пп. выбора режимов А1/А2 MENU_REGIM.
                          ; Бит анализируется и сбрасывается в "0" в самой пп. Menu_Regim.
                         ; Если бит BIT_MENU_REGIM был уже ранее установлен в "0", - на выход из пп.
                        ; без продолжения.
        ;*******************************************************************************
        ;ljmp    Menu_Regim_END
      ;*******************************************************************************



;======================================================
; РИСУЕМ РАМКУ И СТАЦ. НАДПИСИ
;======================================================        
Menu_Regim_000:
;!!!!!!! ВРЕМЕННО - ЗАБЛОКИРОВАТЬ ВЫБОР РЕЖИМОВ - ПО УМОЛЧАНИЮ: РЕЖИМ БУВВ-СЭЩ-А2 !!! 15-09-2010 !!!!!!
       ; mov     REGIM_A1_2,#1
       ; ljmp    Menu_Regim_END
      ;*******************************************************************************

         ;*************************************************************************
        ;******** !!! Установить режим обычного шрифта 21 символ х 8 строк.    !!!
       ;*************************************************************************
     ;******************************************************************
        clr     Bit_Mode_12x4
         ;!! *************************************************************
        ;!! Сбросить битовый признак режима широкого шрифта на
       ;!! дисплее кассира: 12 символов х 4 строки. *********************
                                       ; "0" - обычный шрифт 21 символ х 8 строк
                                      ; формат знака 5х7 пикселей.
                                     ; "1" - широкий шрифт 12 символов х 4 строки
                                    ; формат знака 8х14 пикселей.
     ;******************************************************************

        clr     Bit_Mode_16x4
         ;!! *************************************************************
        ;!! Сбросить битовый признак режима широкого шрифта на
       ;!! дисплее кассира: 16 символов х 4 строки. *********************
                                 ; "0" - обычный шрифт 21 символ х 8 строк
                                ; формат знака 5х7 пикселей.
                               ; "1" - широкий шрифт 16 символов х 4 строки
                              ; формат знака 6х10 пикселей.
        ;********************;
       ;******************************************************************
        lcall   RESP

        mov     PR_VIDELEN,#0; Позитивное отображение знака.
        ;*********************
		mov     POZITION,#0
        mov     POZ_STR,#1
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST62 ; '--------------------'
        lcall   LcdStrWriteSt_Tabl
		
		
		mov     POZITION,#0
        mov     POZ_STR,#5
        mov     KOL_SIMV,#21
        mov     DPTR,#TEST62 ; '--------------------'
        lcall   LcdStrWriteSt_Tabl
		
		
        ;*************************************************
        ;********************;
        mov     POZITION,#4
        mov     POZ_STR,#6
        mov     KOL_SIMV,#14
        mov     DPTR,#TEST67 ; '"Ok"   - Ввод'
        lcall   LcdStrWriteSt_Tabl

		mov     POZITION,#4
        mov     POZ_STR,#7
        mov     KOL_SIMV,#15
        mov     DPTR,#TEST66 ; '"Выбор" - Выбор'
        lcall   LcdStrWriteSt_Tabl

        ;*************************************************

        ;---------------------------------------------
        
		JNB FLAG_SERVICE_MODE,DRAW_1
		;-------------------------------------------------------------------

        mov     POZITION,#1
        mov     POZ_STR,#0
        mov     KOL_SIMV,#18
        mov     DPTR,#TEST63 ; 'Выбрать тип блока:'
        lcall   LcdStrWriteSt_Tabl
        ;*************************************************
		JMP Menu_Regim_Cukl_000

DRAW_1:
        mov     POZITION,#1
        mov     POZ_STR,#0
        mov     KOL_SIMV,#19
        mov     DPTR,#TEST60 ; '**Сервисный режим**'
        lcall   LcdStrWriteSt_Tabl
;======================================================        

          ;*********************************************************************

;=============================
; АНАЛИЗ ПЕРЕМЕННОЙ REGIM_A1_2	АСС.0
;=============================
Menu_Regim_Cukl_000:
        ;*********************************************************************
        mov     A,REGIM_A1_2 ; Анализ признака режима работы с БУВВ-СЭЩ-А1/А2
                            ; REGIM_A1_2:=0 - работа с БУВВ-СЭЩ-А1.
                           ; REGIM_A1_2 >0 - работа с БУВВ-СЭЩ-А2.
                          ;*************************************************
         JB    ACC.0,Menu_Regim_1_POZIT       ;	переход, если АCC.0 не равен нулю
        ;*******************************;
Menu_Regim_1_NEGAT:
        mov     PR_VIDELEN,#1     ; Негативное отображение знака (выделеный пункт меню).
        ljmp    Menu_Regim_1_CONT
        ;***********************;
Menu_Regim_1_POZIT:            ;
        mov     PR_VIDELEN,#0 ; Позитивное отображение знака (невыделеный пункт меню).
        ;********************;

;=============================
; РИСУЕМ ДУГА-О
;=============================
Menu_Regim_1_CONT:
        mov     POZITION,#7
        mov     POZ_STR,#2
        mov     KOL_SIMV,#6
        mov     DPTR,#TEST64 ; 'ДУГА-О'
        lcall   LcdStrWriteSt_Tabl
        ;*************************************************

;=============================
; АНАЛИЗ ПЕРЕМЕННОЙ REGIM_A1_2	  АСС.1
;=============================
        ;*********************************************************************
        mov     A,REGIM_A1_2 ; Анализ признака режима работы с БУВВ-СЭЩ-А1/А2
                            ; REGIM_A1_2:=0 - работа с БУВВ-СЭЩ-А1.
                           ; REGIM_A1_2 >0 - работа с БУВВ-СЭЩ-А2.
                          ;*************************************************
         JB    ACC.1,Menu_Regim_2_POZIT       ;	переход, если АCC.1 не равен нулю
        ;*******************************;
Menu_Regim_2_NEGAT:
        mov     PR_VIDELEN,#1     ; Негативное отображение знака (выделеный пункт меню).
        ljmp    Menu_Regim_2_CONT
        ;***********************;
Menu_Regim_2_POZIT:            ;
        mov     PR_VIDELEN,#0 ; Позитивное отображение знака (невыделеный пункт меню).
        ;********************;

;=============================
; РИСУЕМ ДУГА-Ф
;=============================
Menu_Regim_2_CONT:
        mov     POZITION,#7
        mov     POZ_STR,#3
        mov     KOL_SIMV,#6
        mov     DPTR,#TEST65 ; 'ДУГА-Ф'
        lcall   LcdStrWriteSt_Tabl
        ;*************************************************
		

;=============================
; АНАЛИЗ ПЕРЕМЕННОЙ REGIM_A1_2	   АСС.2
;=============================
        ;*********************************************************************
        mov     A,REGIM_A1_2 ; Анализ признака режима работы с БУВВ-СЭЩ-А1/А2
                            ; REGIM_A1_2:=0 - работа с БУВВ-СЭЩ-А1.
                           ; REGIM_A1_2 >0 - работа с БУВВ-СЭЩ-А2.
                          ;*************************************************
         JB    ACC.2,Menu_Regim_3_POZIT       ;	переход, если АCC.2 не равен нулю
        ;*******************************;
Menu_Regim_3_NEGAT:
        mov     PR_VIDELEN,#1     ; Негативное отображение знака (выделеный пункт меню).
        ljmp    Menu_Regim_3_CONT
        ;***********************;
Menu_Regim_3_POZIT:            ;
        mov     PR_VIDELEN,#0 ; Позитивное отображение знака (невыделеный пункт меню).
        ;********************;

;=============================
; РИСУЕМ ДУГА-Т
;=============================
Menu_Regim_3_CONT:
        mov     POZITION,#7
        mov     POZ_STR,#4
        mov     KOL_SIMV,#6
        mov     DPTR,#TEST68 ; 'ДУГА-Т'
        lcall   LcdStrWriteSt_Tabl
        ;*************************************************




Menu_Regim_Cukl_001:
      ;******* - Проверка нажатых клавиш S2-S9 - ********************************************
     ;******* Возврат: выходные битовые переменные:                    *********************
    ;******* S2_ESC; S3_TEST; S4_VKL; S5_OTKL; S6_U_VKL; S7_U_OTKL; S8_I_VKL; S9_I_OTKL. **
   ;****** S2_x..S9_x:=0 - соответствующая клавиша нажата. *******************************
  ;****** S2_x..S9_x:=1 - соответствующая клавиша НЕ нажата. ****************************
 ;****** Программное исключение одновременного нажатия нескольких клавиш. **************
;**************************************************************************************
        
		
		lcall   TTI_S
		
        
		jnb     S_OK,Menu_Regim_END
        ;******************************

        jnb     S_SEL,Menu_Regim_New_Mode
        ;******************************

        ljmp    Menu_Regim_Cukl_001    ; Если кнопки не нажаты,
        ;*****************************; на повторный опрос нажатых клавиш.

        ;****************************************************************
Menu_Regim_END:
        ret
      ;****************************************************************


;==============================================
; ИЗМЕНЕНИЕ ПЕРЕМЕННОЙ 	REGIM_A1_2
; ЗНАЧЕНИЯ ПЕРМЕННОЙ  REGIM_A1_2:
;		11111110B   - ЗАСВЕТИМ НАДПИСЬ "ДУГА-О"
;		11111101B   - ЗАСВЕТИМ НАДПИСЬ "ДУГА-Ф"
;		11111011B   - ЗАСВЕТИМ НАДПИСЬ "ДУГА-Т"
;==============================================
Menu_Regim_New_Mode:
		MOV  A,REGIM_A1_2
		RL A  ; СДВИГ А ВЛЕВО
		CJNE A,#11110111B,Menu_Regim_New_Mode_01  ; ПРОВЕРКА, ЧТО СДВИНУЛИ 3 РАЗА
		
		MOV A,#11111110B ; ЕСЛИ ДОШЛИ ДО 3 РАЗА, ТО REGIM_A1_2 В СТОК
Menu_Regim_New_Mode_01:
		MOV  REGIM_A1_2,A
        ljmp    Menu_Regim_Cukl_000




;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




;           ######################################################################
;          #                                                                    #
;         #        СЕРВИСНЫЙ РЕЖИМ РАБОТЫ БЛОКА			         		       #
;        #    **************************************************              #
;       #  БУДЕМ ОТОБРАЖАТЬ ВРЕМЯ СРАБАТЫВАНЯ ВХОДА И ЕЩЕ КОЕ-ЧТО			 #
;      ######################################################################
TEST_SERVICE_MODE:
		CLR FLAG_SERVICE_MODE
		RET 



;           ######################################################################
;          #                                                                    #
;         #        ЖДЕМ НАЖАТИЯ КНОПКИ ТЕСТ ДЛЯ ПОШАГОВОЙ ОТЛАДКИ   		   #
;        #    **************************************************              #
;       #  			 СТОИМ НА МЕСТЕ, ПОКА НЕ НАЖМЕМ КНОПКУ "ТЕСТ"            #
;      ######################################################################
WAITING_BTN_TEST:
;====================
		CLR OE_BTN1
		JB P2.6,$

		SETB OE_BTN1

		RET
;====================





;           ######################################################################
;          #                                                                    #
;         #        ТЕСТ СВЕТОДИОДОВ						         		       #
;        #    **************************************************              #
;       #  ВХОД В ЭТОТ РЕЖИМ ПО НАЖАТИЮ КНОПКИ "ВЫКЛ"						 #
;      ######################################################################
TEST_LED_MODE:
	    
		
		call RESP
        mov     PR_VIDELEN,#0 ; Позитивное отображение знака.
		
		clr     Bit_Mode_12x4
        clr     Bit_Mode_16x4
		
		mov     POZITION,#1
        mov     POZ_STR,#3
        mov     KOL_SIMV,#20
        mov     DPTR,#TEST69 ; '**Тест светодиодов**'
		lcall   LcdStrWriteSt_Tabl
		
		SETB CE_LED	 ; ЧТО НА ВХОДЕ, ТО И НА ВЫХОДЕ

START_TEST_LED:		
		MOV P2,#00H	 ; ВСЕ ДИОДЫ ЗАЖЕЧЬ
		
		CLR OE_LED ; ВКЛ РЕГИСТР СВЕТОДИОДОВ
		
		MOV R7,#5
		CALL delay_n_x_01_sek
		
		MOV P2,#0FFH	 ; ВСЕ ДИОДЫ ПОТУШИТЬ
		
		MOV R7,#3
		CALL delay_n_x_01_sek

;=============================		
		MOV P2,#11111110B	 ; ВЫХ1
		MOV R7,#3
		CALL delay_n_x_01_sek
;=============================		

;=============================		
		MOV P2,#11111101B	 ; ВЫХ2
		MOV R7,#3
		CALL delay_n_x_01_sek
;=============================		

;=============================		
		MOV P2,#11111011B	 ; ВЫХ3
		MOV R7,#3
		CALL delay_n_x_01_sek
;=============================		


;=============================		
		MOV P2,#11110111B	 ; ВЫХ4,1
		MOV R7,#3
		CALL delay_n_x_01_sek
;=============================		

;=============================		
		MOV P2,#11101111B	 ; ВЫХ4,2
		MOV R7,#3
		CALL delay_n_x_01_sek
;=============================		

;=============================		
		MOV P2,#11011111B	 ; НДЗ
		MOV R7,#3
		CALL delay_n_x_01_sek
;=============================		

;=============================		
		MOV P2,#10111111B	 ; OK
		MOV R7,#3
		CALL delay_n_x_01_sek
;=============================		

;=============================		
		MOV P2,#01111111B	 ; ERROR
		MOV R7,#3
		CALL delay_n_x_01_sek
;=============================		
		JMP START_TEST_LED

		RET 



;//////////////////////////////////////////////////////////////////////
;                         БИБЛИОТЕКИ
;//////////////////////////////////////////////////////////////////////		
		 $INCLUDE (C:\Keil\PROJECTs\DUGA\Buttons_check.inc) ; Проверка кнопок (POW_ON,POW,OFF,TEST,RES)						
		 $INCLUDE (C:\Keil\PROJECTs\DUGA\Galya.inc) ; Проверка гали						
		 $INCLUDE (C:\Keil\PROJECTs\DUGA\Library_LCD.inc)	; ЖКИ     
		 $INCLUDE (C:\Keil\PROJECTs\DUGA\delays.inc)		; Задержки
 		 
;/////////////////////////////////////////////////////////////////////// 

	   
	   END


